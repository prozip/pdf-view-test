<div id="pf6e" class="pf w0 h0" data-page-no="6e"><div class="pc pc6e w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgf0.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">86</div><div class="t m0 xbe h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xa8 h2c y1d0 ffb fs19 fcb sc0 ls185 ws0">HAPTER</div><div class="t m0 x93 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 5</div><div class="t m0 x5d h2d y80 ffa fs7 fcb sc0 ls6 ws0">Testing your software</div><div class="t m0 x44 h1f y13f ffc fs13 fc2 sc0 ls191 ws634">Statements of fact<span class="_ _97"></span>5<span class="_ _1d"></span>.3</div><div class="t m0 x44 h15 y140 ff4 fsb fc3 sc0 ls42 ws1d1">The next step toward crea<span class="ls38 wsc5">ting real tests is to <span class="ff3 ls35 ws0">assert</span> that a particular comparison holds</span></div><div class="t m0 x44 h15 y141 ff4 fsb fc3 sc0 ls47 ws2f5">true. Assertions are state<span class="_ _e"></span>ments of fact; if yo<span class="ls36 ws201">u make an assertion that doesn’t hold true,</span></div><div class="t m0 x44 h15 y142 ff4 fsb fc3 sc0 ls31 wsc6">either some assumption you’ve made is incorr<span class="ls2f ws15f">ect or the assertion itself is incorrect. If</span></div><div class="t m0 x44 h15 y143 ff4 fsb fc3 sc0 ls51 ws47">you assert that “you can see the sun on th<span class="_ _0"></span><span class="ls71 wsd4">e horizon every morning,<span class="ls52 ws42">” it holds <span class="ls1e ws8b">true most</span></span></span></div><div class="t m0 x44 h15 y144 ff4 fsb fc3 sc0 ls20 ws221">of the time. But when there are clouds o<span class="_ _e"></span>n<span class="ls42 ws38f"> the horizon, your assertion doesn’t hold</span></div><div class="t m0 x44 h15 y145 ff4 fsb fc3 sc0 ls4e ws635">true. If you up<span class="_ _e"></span>date your assumptions to incl<span class="ls31 ws2b7">ude that the sky is clear, your assertion</span></div><div class="t m0 x44 h15 y146 ff4 fsb fc3 sc0 ls71 wsd4">becomes true again.</div><div class="t m0 x32 h15 y24e ff4 fsb fc3 sc0 ls2d ws18b"> Assertions in software are similar. They assert that some expres<span class="ls2f">sion must hold true,</span></div><div class="t m0 x44 h15 yb6 ff4 fsb fc3 sc0 ls3a ws12e">and they fail loudly if that assertion fails. In Python, <span class="_ _0"></span>assertions can be written using the</div><div class="t m5 x44 h24 yb20 ffd fsc fc3 sc0 lsa0 ws0">assert</div><div class="t m0 xd7 h15 y8b ff4 fsb fc3 sc0 ls5e ws14a"> keyword. When assertions f<span class="_ _e"></span>ail, they raise an </div><div class="t m5 x55 h24 yb20 ffd fsc fc3 sc0 lsa0 ws0">AssertionEr<span class="_ _e"></span>ror</div><div class="t m0 xb4 h15 y8b ff4 fsb fc3 sc0 ls6 ws0">.</div><div class="t m0 x32 h15 y26c ff4 fsb fc3 sc0 ls2d ws371"> You can test </div><div class="t m5 xad h24 yb21 ffd fsc fc3 sc0 lsa0 ws0">calculate_me<span class="_ _e"></span>an</div><div class="t m0 x63 h15 y26c ff4 fsb fc3 sc0 ls10b ws0"> w<span class="_ _3e"></span>i<span class="_ _25"></span>t<span class="_ _25"></span>h<span class="_ _3e"></span> a<span class="_ _25"></span>s<span class="_ _25"></span>s<span class="_ _3e"></span>e<span class="_ _25"></span>r<span class="_ _25"></span>t<span class="_ _3e"></span>i<span class="_ _25"></span>o<span class="_ _25"></span>n<span class="_ _3e"></span>s<span class="_ _25"></span> b<span class="_ _3e"></span>y<span class="_ _25"></span> a<span class="_ _25"></span>d<span class="_ _25"></span>d<span class="_ _3e"></span>i<span class="_ _25"></span>n<span class="_ _3e"></span>g<span class="_ _25"></span> </div><div class="t m5 xcc h24 yb21 ffd fsc fc3 sc0 lsa0 ws0">assert</div><div class="t m0 x120 h15 y26c ff4 fsb fc3 sc0 ls8d ws636"> in front of your</div><div class="t m0 x44 h15 y26d ff4 fsb fc3 sc0 ls2f wse2">comparisons. A passing assertion will have <span class="ls1f ws7f">no output; a failing one will show you the</span></div><div class="t m0 x44 h15 y414 ff4 fsb fc3 sc0 ls36 ws35">traceback for the </div><div class="t m5 x28 h24 y415 ffd fsc fc3 sc0 lsa0 ws0">AssertionErro<span class="_ _e"></span>r</div><div class="t m0 x2a h15 y414 ff4 fsb fc3 sc0 ls6 ws0">:</div><div class="t m0 x44 h3b y36d ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>assert<span class="_"> </span>10.0<span class="_"> </span>==<span class="_"> </span>calculate_mean([0,<span class="_"> </span>10,<span class="_"> </span>20])</div><div class="t m0 x44 h3b y36e ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>assert<span class="_"> </span>1.0<span class="_"> </span>==<span class="_"> </span>calculate_mean([1000,<span class="_"> </span>3500,<span class="_"> </span>7_000_000])</div><div class="t m0 x44 h3b y36f ffd fs18 fc3 sc0 lsb2 ws0">Traceback<span class="_"> </span>(most<span class="_"> </span>recent<span class="_"> </span>call<span class="_"> </span>last):</div><div class="t m0 xc4 h3b y370 ffd fs18 fc3 sc0 lsb2 ws0">File<span class="_"> </span>&quot;&lt;stdin&gt;&quot;,<span class="_"> </span>line<span class="_"> </span>1,<span class="_"> </span>in<span class="_"> </span>&lt;module&gt;</div><div class="t m0 x44 h3b y517 ffd fs18 fc1 sc0 lsb2 ws0">AssertionError</div><div class="t m0 x44 h15 y3ff ff4 fsb fc3 sc0 ls34 wsd0">This behavior is what many Python testing tools are built<span class="_ _e"></span> on. Using the recipe for a</div><div class="t m0 x44 h15 y699 ff4 fsb fc3 sc0 ls192 ws637">function<span class="_ _0"></span>al test (set u<span class="_ _0"></span>p input, ide<span class="_ _0"></span>ntify expe<span class="_ _0"></span><span class="ls1c ws266">cted output, obtain actual output<span class="_ _e"></span>, and com-</span></div><div class="t m0 x44 h15 y69a ff4 fsb fc3 sc0 ls4e ws638">pare), these tools help you do th<span class="_ _e"></span>e comparison and provide valuable context when</div><div class="t m0 x44 h15 y1fd ff4 fsb fc3 sc0 ls2d ws1a4">your assertions fail. Read on to see how tw<span class="ls42 ws20a">o of the most widely used testing tools in</span></div><div class="t m0 x44 h15 y41d ff4 fsb fc3 sc0 ls31 ws25">Python handle making assertions about your code. </div><div class="t m0 x44 h1f yb22 ffc fs13 fc2 sc0 ls7e ws1f8">Unit testing with unittest<span class="_ _98"></span>5<span class="_ _0"></span>.<span class="_ _1d"></span>4</div><div class="t m0 x44 h15 y743 ff4 fsb fc3 sc0 ls3d ws333">Unittest is Python’s built-in testing <span class="_ _e"></span>framewor<span class="ls3b wsec">k. Although it’s called<span class="_ _e"></span><span class="ls3a ws28"> unittest, it can <span class="_ _0"></span>also</span></span></div><div class="t m0 x44 h15 y744 ff4 fsb fc3 sc0 ls31 ws21c">be used for integration testing. Unittest provides features for making assertions about</div><div class="t m0 x44 h15 y745 ff4 fsb fc3 sc0 ls35 ws639">your code, and also the tool for <span class="_ _0"></span><span class="ff3 ls63 ws0">running<span class="ff4 ls71 ws160"> the tests. In this section, <span class="_ _e"></span>you’ll see how tests</span></span></div><div class="t m0 x44 h15 y746 ff4 fsb fc3 sc0 ls2d ws4f5">are organized and how to run them, and you’<span class="ls20 ws621">ll finally get some practice writing real</span></div><div class="t m0 x44 h15 y7be ff4 fsb fc3 sc0 ls34 ws22">tests. Let’s get to it!</div><div class="t m0 x44 h26 yb23 ffc fs15 fc2 sc0 ls12f ws43f">Test organization with unittest<span class="_ _7f"></span>5.<span class="_ _1d"></span>4.<span class="_ _1d"></span>1</div><div class="t m0 x44 h15 y5f7 ff4 fsb fc3 sc0 ls3d ws1ac">Unittest provides a set of features for perf<span class="ls25 wse5">orming assertions. You <span class="ls21 ws63a">previously saw how to</span></span></div><div class="t m0 x44 h15 y102 ff4 fsb fc3 sc0 ls48 ws3d3">write raw </div><div class="t m5 xd8 h24 yb24 ffd fsc fc3 sc0 lsa0 ws0">assert</div><div class="t m0 xad h15 y102 ff4 fsb fc3 sc0 ls48 ws3d3"> statements to test code, but unittest provides a </div><div class="t m5 x33 h24 yb24 ffd fsc fc3 sc0 lsa0 ws0">TestCase</div><div class="t m0 x107 h15 y102 ff4 fsb fc3 sc0 ls48 ws3d3"> class with</div><div class="t m0 x44 h15 y5ce ff4 fsb fc3 sc0 ls2f ws63b">custom assertion methods for more unders<span class="ls3a ws63c">tandable testing output. Your tests will</span></div><div class="t m0 x44 h15 y5d0 ff4 fsb fc3 sc0 ls5e ws14a">inherit from this <span class="_ _e"></span>class and us<span class="ls2d ws31">e methods to make assertions.</span></div><div class="t m0 x32 h15 y7c1 ff4 fsb fc3 sc0 ls71 ws2b4"> I encourage you to use these test classes as<span class="ls30 ws52c"> a strategy for grouping your tests. The</span></div><div class="t m0 x44 h15 y7c2 ff4 fsb fc3 sc0 ls21 ws63d">classes are flexible<span class="_ _0"></span>—you can use them to <span class="ls20 ws9b">group any tests you like. If you have many</span></div><div class="t m0 x44 h15 yb25 ff4 fsb fc3 sc0 ls34 ws11f">tests for a class, putting them in their own </div><div class="t m5 x3f h24 yb26 ffd fsc fc3 sc0 lsa0 ws0">TestCase</div><div class="t m0 x10f h15 yb27 ff4 fsb fc3 sc0 ls104 ws0"> i<span class="_ _0"></span>s<span class="_ _0"></span> a<span class="_ _1d"></span> go<span class="_ _1d"></span>od<span class="_ _1d"></span> id<span class="_ _1d"></span>ea<span class="_ _1d"></span>.<span class="_ _0"></span> I<span class="_ _0"></span>f<span class="_ _0"></span> y<span class="_ _0"></span>o<span class="_ _1d"></span>u h<span class="_ _1d"></span>av<span class="_ _1d"></span>e m<span class="_ _1d"></span>an<span class="_ _1d"></span>y</div><div class="t m0 x44 h15 yb28 ff4 fsb fc3 sc0 ls36 wsc2">tests for a single meth<span class="ls42 ws562">od within a class, you could even create a </span></div><div class="t m5 x77 h24 yb29 ffd fsc fc3 sc0 lsa0 ws0">TestCase</div><div class="t m0 xec h15 yb2a ff4 fsb fc3 sc0 ls67 ws63e"> only for</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
