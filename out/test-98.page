<div id="pf62" class="pf w0 h0" data-page-no="62"><div class="pc pc62 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg62.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">74</div><div class="t m0 x67 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xb1 h2c y1d0 ffb fs19 fcb sc0 ls158 ws0">HAPTER</div><div class="t m0 xb6 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 4</div><div class="t m0 x101 h2d y80 ffa fs7 fcb sc0 ls6 ws0">Designing for high performance</div><div class="t m0 x44 h15 y40 ff4 fsb fc3 sc0 ls25 ws5bf">measure the performance of <span class="_ _0"></span>your code is through CPU profil<span class="_ _0"></span>ing. CPU profiling lets</div><div class="t m0 x44 h15 y41 ff4 fsb fc3 sc0 ls1f ws5c0">you see which <span class="ff3 ls5e ws0">parts</span><span class="ls71 ws263"> of your code perform expensive calculations, as well as h<span class="_ _0"></span>ow often</span></div><div class="t m0 x44 h15 y42 ff4 fsb fc3 sc0 ls71 ws22a">they’re called. This kind of output is us<span class="ls36 ws87">eful because it helps you understand <span class="_ _0"></span>where</span></div><div class="t m0 x44 h15 y43 ff4 fsb fc3 sc0 ls2e ws4d">you might want to look first when trying to speed up your code.</div><div class="t m0 x32 h15 y44 ff4 fsb fc3 sc0 ls30 wsbd"> Suppose you’ve written a function that is<span class="ls36 ws6a">n’t too expensive but is called many times</span></div><div class="t m0 x44 h15 y45 ff4 fsb fc3 sc0 ls3a ws1c6">in your application. You’ve al<span class="ls44 ws593">so written a function that is expensive but is only called</span></div><div class="t m0 x44 h15 y46 ff4 fsb fc3 sc0 ls7d ws334">once. If you only have<span class="_ _e"></span> time to fix one, wh<span class="ls36 ws201">ich will it be? Without profiling the code, it’s</span></div><div class="t m0 x44 h15 y47 ff4 fsb fc3 sc0 ls25 ws5c1">hard to know which will speed up your code the most. You can figure it out using</div><div class="t m0 x44 h15 y48 ff4 fsb fc3 sc0 ls7a ws2c3">Python’s cProfi<span class="_ _0"></span>le module.</div><div class="t m0 x32 h49 y24f ffb fs17 fc2 sc0 lsf7 ws0">NOTE</div><div class="t m0 xef h15 y149 ff4 fsb fc3 sc0 ls1c ws3e2">If you try to import the cProfile module but get an error, you can use</div><div class="t m0 x32 h15 ya0c ff4 fsb fc3 sc0 ls3b ws70">the profile module instead.</div><div class="t m0 x44 h15 ya0d ff4 fsb fc3 sc0 ls25 ws2b9">The cProfile module prints a few pieces of<span class="ls2f ws81"> information about each method or func-</span></div><div class="t m0 x44 h15 ya0e ff4 fsb fc3 sc0 ls34 ws22">tion called while executing your progra<span class="ls36 ws6a">m. For each call, it will show you</span></div><div class="t m0 x86 h29 ya0f ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y962 ff4 fsb fc3 sc0 ls42 ws32">The number of times the call occurred (</div><div class="t m5 x5f h24 ya10 ffd fsc fc3 sc0 lsa0 ws0">ncalls</div><div class="t m0 x3e h15 y962 ff4 fsb fc3 sc0 ls6 ws0">)</div><div class="t m0 x86 h29 ya11 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y72e ff4 fsb fc3 sc0 ls2d ws301">The time spent in that call alone, not including things it calls in turn (</div><div class="t m5 xec h24 ya12 ffd fsc fc3 sc0 lsa0 ws0">tottime</div><div class="t m0 xa0 h15 y72e ff4 fsb fc3 sc0 ls6 ws0">)</div><div class="t m0 x86 h29 y258 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y259 ff4 fsb fc3 sc0 ls2d ws3ad">The average time spent in that call alone, across the </div><div class="t m5 x9c h24 ya13 ffd fsc fc3 sc0 lsa0 ws0">ncalls</div><div class="t m0 x117 h15 y259 ff4 fsb fc3 sc0 ls71 ws2b4"> times it was called</div><div class="t m0 x87 h15 y25a ff4 fsb fc3 sc0 ls6 ws0">(</div><div class="t m5 x4 h24 ya14 ffd fsc fc3 sc0 lsa0 ws0">percall</div><div class="t m0 x38 h15 y25a ff4 fsb fc3 sc0 ls6 ws0">)</div><div class="t m0 x86 h29 y25b ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y1a5 ff4 fsb fc3 sc0 ls2d ws5c2">The cumulative time spent in that call,<span class="ls31 ws376"> including any time spent in subcalls</span></div><div class="t m0 x87 h15 y1a6 ff4 fsb fc3 sc0 ls6 ws0">(</div><div class="t m5 x4 h24 y575 ffd fsc fc3 sc0 lsa0 ws0">cumtime</div><div class="t m0 x38 h15 y576 ff4 fsb fc3 sc0 ls6 ws0">)</div><div class="t m0 x44 h15 y199 ff4 fsb fc3 sc0 ls6f ws5c3">This informatio<span class="_ _e"></span>n is helpful because <span class="_ _e"></span>it will expose things th<span class="_ _e"></span>at are slow—that have a</div><div class="t m0 x44 h15 y19a ff4 fsb fc3 sc0 lsbc ws0">large </div><div class="t m5 x8a h24 y436 ffd fsc fc3 sc0 lsa0 ws0">cumtime</div><div class="t m0 xac h15 y19a ff4 fsb fc3 sc0 ls31 ws213">—but will also expose things that are fast but called many times. The fol-</div><div class="t m0 x44 h15 y57 ff4 fsb fc3 sc0 ls51 ws5c4">lowing listing shows a toy pr<span class="ls3a ws1c2">ogram that calls a function 1000 times. The function call</span></div><div class="t m0 x44 h15 y58 ff4 fsb fc3 sc0 ls3b ws70">takes a random amount o<span class="_ _e"></span>f time, up to 10 milliseconds, to exe<span class="_ _e"></span>cute.</div><div class="t m0 x44 h3b ya15 ffd fs18 fc3 sc0 lsb2 ws0">import<span class="_"> </span>random</div><div class="t m0 x44 h3b ya16 ffd fs18 fc3 sc0 lsb2 ws0">import<span class="_"> </span>time</div><div class="t m0 xae h3b ya17 ffd fs18 fc3 sc0 lsb2 ws0">an_expensive_function():<span class="_ _48"></span>def</div><div class="t m0 x3f h3b ya18 ffd fs18 fc3 sc0 lsb2 ws0">100<span class="_ _89"></span>/<span class="_ _84"></span>random.random()<span class="_ _84"></span>=<span class="_ _6d"></span>execution_time</div><div class="t m0 xae h3b ya19 ffd fs18 fc3 sc0 lsb2 ws0">time.sleep(execution_time)</div><div class="t m0 x44 h3b ya1a ffd fs18 fc3 sc0 lsb2 ws0">if<span class="_"> </span>__name__<span class="_"> </span>==<span class="_"> </span>&apos;__main__&apos;:</div><div class="t m0 xae h3b ya1b ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>_<span class="_"> </span>in<span class="_"> </span>range(1000):</div><div class="t m0 x97 h3b ya1c ffd fs18 fc1 sc0 lsb2 ws0">an_expensive_function()</div><div class="t m0 x44 h15 y557 ff4 fsb fc3 sc0 ls3e ws115">Save this program in a cpu_profi<span class="_ _0"></span>ling.py module. Then you can pr<span class="_ _0"></span>ofile it from the</div><div class="t m0 x44 h15 y559 ff4 fsb fc3 sc0 ls3e ws4a">command line using cProfile:</div><div class="t m0 x44 h3b ya1d ffd fs18 fc3 sc0 lsb2 ws0">python<span class="_"> </span>-m<span class="_"> </span>cProfile<span class="_"> </span>--sort<span class="_"> </span>cumtime<span class="_"> </span>cpu_profiling.py</div><div class="t m0 x37 h20 ya1e ffb fs7 fc4 sc0 ls6 ws0">Profiling the CPU performance of a Python pro<span class="_ _0"></span>gram<span class="_ _69"></span>List<span class="_ _0"></span>ing<span class="_"> </span>4.4</div><div class="c xa1 ya1f w9 h4b"><div class="t m0 x43 h14 ya20 ff12 fs7 fcb sc0 ls172 ws566">Takes a <span class="ff13 ls6 ws0">r<span class="ff12">a</span>n<span class="ff12 lsec">do</span>m<span class="ff12 lsdd"> a</span>m<span class="ff12 lse2">ou<span class="_ _0"></span><span class="ff13 ls6">n<span class="ff12 ls105 ws325">t of </span></span></span></span></div><div class="t m0 x43 h14 y97d ff12 fs7 fcb sc0 lsd2 ws0">ti<span class="ff13 ls6">m</span><span class="ws35c">e (up to </span></div><div class="t m0 x35 h47 ya21 ff14 fs17 fcb sc0 ls6 ws0">1</div><div class="t m0 x32 h14 y97d ff12 fs7 fcb sc0 ls182 ws0">0 <span class="ff13 ls6">m</span><span class="ls125">illiseco<span class="ff13 ls6">n</span><span class="ls170">ds) </span></span></div><div class="t m0 x43 h14 ya22 ff12 fs7 fcb sc0 ls6 ws317">to execute</div></div><div class="c x45 ya23 w9 h56"><div class="t m0 x43 h14 y68d ff12 fs7 fcb sc0 ls100 ws0">Ru<span class="ff13 ls6">n</span><span class="ls172 ws566">s the fu</span><span class="ff13 ls6">n</span><span class="ls118">ctio<span class="ff13 ls6">n<span class="ff12"> </span></span></span></div><div class="t m0 x43 h14 y68e ff14 fs17 fcb sc0 ls6 ws0">1<span class="ff12 fs7 ls145 ws5c5">000 ti</span><span class="ff13 fs7">m<span class="ff12">es</span></span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
