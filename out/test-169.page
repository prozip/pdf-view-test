<div id="pfa9" class="pf w0 h0" data-page-no="a9"><div class="pc pca9 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bga9.png"/><div class="t m0 xa0 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">145<span class="_ _c6"></span><span class="ffa">The inheritance of programming past</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls51 ws417">pling that exists in progra<span class="ls2d ws5c2">mming. A class is fully couple<span class="ls3a ws416">d to its superclass because</span></span></div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls6 ws788">everything it knows and does by de<span class="ls5e ws57">fault is tied to that superclass.</span></div><div class="t m0 x83 h15 y42 ff4 fsb fc3 sc0 ls6b ws844"> Seeing this coupling is <span class="ff3 ls2e ws2e1">very diffi<span class="_ _0"></span>cult<span class="ff4 ls42 ws206"> when class hierarchies grow, because if<span class="_ _e"></span> you’re</span></span></div><div class="t m0 x35 h15 y43 ff4 fsb fc3 sc0 ls2d ws1d">looking at a particular cl<span class="_ _0"></span>ass, it isn’t obvious<span class="ws31"> whether another class is inheriting from it</span></div><div class="t m0 x35 h15 y44 ff4 fsb fc3 sc0 ls5e ws845">or not. This leads to bugs because of unin<span class="ls2f ws270">tended changes in behavior, as <span class="_ _e"></span>depicted in</span></div><div class="t m0 x35 h15 y45 ff4 fsb fc3 sc0 ls35 ws24">figure 8.2.</div><div class="t m0 x83 h15 y46 ff4 fsb fc3 sc0 ls34 ws3c3"> To analogize, in quantum physics it<span class="ls3b ws425">’s possible for two particles to be <span class="_ _e"></span><span class="ff3 ls44 ws0">entangled</span><span class="ls50 ws9a"> in</span></span></div><div class="t m0 x35 h15 y47 ff4 fsb fc3 sc0 ls34 ws2f4">such a way that changes to one will effect <span class="ls71">the sam<span class="_ _e"></span>e change in the other, regardless of</span></div><div class="t m0 x35 h15 y48 ff4 fsb fc3 sc0 ls71 ws241">how far apart they are in space. This “spooky <span class="ls51 ws545">action at a distance,” as Einstein called it,</span></div><div class="t m0 x35 h15 y49 ff4 fsb fc3 sc0 ls3a ws12e">means that you can’t reliably determine the st<span class="ls1e ws15a">ate of a particle, beca<span class="ls42 ws8c">use that state could</span></span></div><div class="t m0 x35 h15 y4a ff4 fsb fc3 sc0 ls51 ws268">change at any moment because of a change in<span class="_ _0"></span> <span class="ls62 ws846">its twin particle<span class="_ _e"></span>’s state. This is exciting</span></div><div class="t m0 x35 h15 y4b ff4 fsb fc3 sc0 ls38 ws591">for physics, but in software it’s <span class="_ _0"></span>a big dang<span class="ls71 ws2b4">er. By changing one class, you may inadver-</span></div><div class="t m0 x35 h15 y4c ff4 fsb fc3 sc0 ls20 ws847">tently end up changing—or worse, breaki<span class="ls51 ws848">ng—the functionality in another subclass</span></div><div class="t m0 x35 h15 y4d ff4 fsb fc3 sc0 ls51 ws3dc">you were unaware of. It’s like the movie <span class="ff3 ls44 ws6e">Butterf<span class="_ _0"></span>ly Effect<span class="ff4 ls81 ws29b">. (Spoiler alert: It do<span class="_ _e"></span>esn’t go well</span></span></div><div class="t m0 x35 h15 y4e ff4 fsb fc3 sc0 ls38 ws26">for Ashton Kutcher’s character.)</div><div class="t m0 x83 h15 y4f ff4 fsb fc3 sc0 ls79 ws849"> Developers freq<span class="_ _e"></span>uently use <span class="ls30 wsef">inheritance to reuse code, but this pre<span class="_ _e"></span>sents challenges</span></div><div class="t m0 x35 h15 y50 ff4 fsb fc3 sc0 ls21 wsf7">later on. With a deep hierarch<span class="_ _0"></span><span class="ls31 ws25">y, classes at different levels may override <span class="_ _e"></span>or supplement</span></div><div class="t m0 x35 h15 y51 ff4 fsb fc3 sc0 ls38 ws193">their superclasses’ behavior. Before too long<span class="ls35 ws392">, you’ll find yourself traversi<span class="_ _0"></span>ng up and</span></div><div class="t m0 x35 h15 y52 ff4 fsb fc3 sc0 ls1c ws151">down your classes trying to follow the flow of information. I’ve said before that what</div><div class="c x19 y122c w9b h106"><div class="t m0 x17 h5f y122d ff15 fs1c fc12 sc0 ls6 ws0">class Shape</div><div class="t m0 xa7 h5f y122e ff15 fs1c fc12 sc0 ls6 ws0">shape.py</div><div class="t m0 x48 h5f y122f ff15 fs1c fc12 sc0 ls6 ws0">class Quadrilateral(Polygon)</div><div class="t m0 x8c h5f y1230 ff15 fs1c fc12 sc0 ls6 ws0">quadrilateral.py</div><div class="t m0 x140 h5f y1231 ff15 fs1c fc12 sc0 ls6 ws0">class Rectangle(Quadrilateral)</div><div class="t m0 x18 h5f y1232 ff15 fs1c fc12 sc0 ls6 ws0">rectangle.py</div><div class="t m0 x2b h36 y1233 ff11 fs1c fc12 sc0 ls6 ws0">A change to the <span class="ff1e">Shape</span> class could</div><div class="t m0 xa1 h36 y1234 ff11 fs1c fc12 sc0 ls6 ws0">affect <span class="ff1e">Square</span>, four levels away. You might</div><div class="t m0 x27 h36 y1235 ff11 fs1c fc12 sc0 ls6 ws0">not even know about <span class="ff1e">Square</span> when you’re</div><div class="t m0 x10e h36 y1236 ff11 fs1c fc12 sc0 ls6 ws0">working on <span class="ff1e">Shape</span>’s behavior.  </div><div class="t m0 x132 h5f y1237 ff15 fs1c fc12 sc0 ls6 ws0">class Square(Rectangle)</div><div class="t m0 x28 h5f y1238 ff15 fs1c fc12 sc0 ls6 ws0">square.py</div><div class="t m0 x15 h5f y1239 ff15 fs1c fc12 sc0 ls6 ws0">class Polygon(Shape)</div><div class="t m0 xad h5f y123a ff15 fs1c fc12 sc0 ls6 ws0">polygon.py</div><div class="t m0 xa1 h36 y123b ff11 fs1c fc12 sc0 ls6 ws0">This is a correct taxonomy of shapes,</div><div class="t m0 x80 h36 y123c ff11 fs1c fc12 sc0 ls6 ws0">but using it as a class hierarchy</div><div class="t m0 x98 h36 y123d ff11 fs1c fc12 sc0 ls6 ws0">becomes challenging.</div><div class="t m0 x100 h36 y123e ff11 fs1c fc12 sc0 ls6 ws0">Changes to any class along</div><div class="t m0 x13f h36 y123f ff11 fs1c fc12 sc0 ls6 ws0">the way could affect the</div><div class="t m0 xfd h36 y1240 ff11 fs1c fc12 sc0 ls6 ws0">subclasses beneath it.</div><div class="t m0 xc7 h36 y1241 ff11 fs1c fc12 sc0 ls6 ws0">Developers commonly create</div><div class="t m0 x0 h36 y1242 ff11 fs1c fc12 sc0 ls6 ws0">this kind of hierarchy to reuse the</div><div class="t m0 xb7 h36 y1243 ff11 fs1c fc12 sc0 ls6 ws0">code from superclasses. </div></div><div class="c x19 y3f w4 h107"><div class="t m0 x2 h2b y1244 ffb fs18 fcb sc0 ls17 ws43c">How deep inheritance hierarchies can lead to more<span class="_ _0"></span> bugs<span class="_ _c7"></span>Figure 8.2</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
