<div id="pf61" class="pf w0 h0" data-page-no="61"><div class="pc pc61 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg61.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">73<span class="_ _88"></span><span class="ffa">Tools</span></div><div class="t m0 x83 h15 y40 ff4 fsb fc3 sc0 ls51 wsd2"> To see how summing 0–4999 affects the <span class="ls50 ws5b7">outc<span class="_ _0"></span>ome, you can change your command</span></div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls62 ws62">and rerun it:</div><div class="t m0 x35 h3b y50b ffd fs18 fc3 sc0 lsb2 ws0">python<span class="_"> </span>-m<span class="_"> </span>timeit<span class="_"> </span>&quot;total<span class="_"> </span>=<span class="_"> </span>sum(range(5000))&quot;</div><div class="t m0 x35 h3b y50c ffd fs18 fc1 sc0 lsb2 ws0">2000<span class="_"> </span>loops,<span class="_"> </span>best<span class="_"> </span>of<span class="_"> </span>5:<span class="_"> </span>105<span class="_"> </span>usec<span class="_"> </span>per<span class="_"> </span>loop</div><div class="t m0 x35 h15 y466 ff4 fsb fc3 sc0 ls2d ws211">From this, you can conclude that summing <span class="ls2f">the integers 0–499<span class="_ _0"></span>9 takes a little over five</span></div><div class="t m0 x35 h15 y9e4 ff4 fsb fc3 sc0 ls31 ws58">times longer than 0–999.</div><div class="t m0 x83 h15 y3f3 ff4 fsb fc3 sc0 ls30 ws36"> Keep in mind that timeit is really running your code, and<span class="_ _e"></span> real-world execution has</div><div class="t m0 x35 h15 y9e5 ff4 fsb fc3 sc0 ls2f ws36e">small variations due to many va<span class="ls1c ws23a">riables. In addition to the code, things like your battery</span></div><div class="t m0 x35 h15 y9e6 ff4 fsb fc3 sc0 ls3d ws61">level and CPU clock speed can affect the timi<span class="_ _e"></span><span class="ls6b ws63">ng. As s<span class="_ _0"></span>uch, it’s good to run your timi<span class="_ _0"></span>ng</span></div><div class="t m0 x35 h15 yb8 ff4 fsb fc3 sc0 ls38 ws5b8">commands a few times to see how stable the me<span class="ls81 ws5b9">asurement is, and to<span class="_ _e"></span> look for significant</span></div><div class="t m0 x35 h15 y9e7 ff4 fsb fc3 sc0 ls30 ws22e">improvements from that baseline when m<span class="_ _e"></span>aking<span class="ls48 ws252"> changes. So although timeit gives you</span></div><div class="t m0 x35 h15 y9e8 ff4 fsb fc3 sc0 ls30 ws5ba">quantitative measurements, it’s best <span class="_ _e"></span>to use it to compare two different impleme<span class="_ _e"></span>ntations</div><div class="t m0 x35 h15 y9e9 ff4 fsb fc3 sc0 ls42 ws5bb">qualitatively, focusing on the trend. This is where you’ll notice those order-of-</div><div class="t m0 x35 h15 y9ea ff4 fsb fc3 sc0 ls1c ws10">magnitude improvements that noticeably speed up your co<span class="_ _e"></span>de.</div><div class="t m0 x83 h15 y9eb ff4 fsb fc3 sc0 ls25 ws5bc"> The command-line interface for timeit is<span class="ls42 ws20a"> great, but it can be cumbersome when</span></div><div class="t m0 x35 h15 y9ec ff4 fsb fc3 sc0 ls20 ws2dd">you want to test large<span class="_ _e"></span>r or more complex pieces of code. If you need m<span class="_ _e"></span>ore control over</div><div class="t m0 x35 h15 y9ed ff4 fsb fc3 sc0 ls1e ws96">what’s being timed, you can <span class="_ _0"></span>use timeit from <span class="ls36">within your code.<span class="_ _0"></span> If you’d like to time a</span></div><div class="t m0 x35 h15 y9ee ff4 fsb fc3 sc0 ls35 ws506">specific portion of code with<span class="_ _0"></span><span class="ls21 ws3d1">out timing all of the se<span class="_ _0"></span>tup code it requi<span class="_ _0"></span>res, you can sepa-</span></div><div class="t m0 x35 h15 yc4 ff4 fsb fc3 sc0 ls34 ws22">rate the setup step so its <span class="ls38 ws26">execution time isn’t included:</span></div><div class="t m0 x35 h3b y9ef ffd fs18 fc3 sc0 lsb2 ws0">from<span class="_"> </span>timeit<span class="_"> </span>import<span class="_"> </span>timeit</div><div class="t m0 x35 h3b y9f0 ffd fs18 fc3 sc0 lsb2 ws0">setup<span class="_"> </span>=<span class="_"> </span>&apos;from<span class="_"> </span>datetime<span class="_"> </span>import<span class="_"> </span>datetime&apos;</div><div class="t m0 x35 h3b y9f1 ffd fs18 fc3 sc0 lsb2 ws0">statement<span class="_"> </span>=<span class="_"> </span>&apos;datetime.now()&apos;</div><div class="t m0 x35 h3b y9f2 ffd fs18 fc3 sc0 lsb2 ws0">result<span class="_"> </span>=<span class="_"> </span>timeit(setup=setup,<span class="_"> </span>stmt=statement)</div><div class="t m0 x35 h3b y9f3 ffd fs18 fc3 sc0 lsb2 ws0">print(f&apos;Took<span class="_"> </span>an<span class="_"> </span>average<span class="_"> </span>of<span class="_"> </span>{res<span class="fc1">ult}ms&apos;)</span></div><div class="t m0 x19 h26 y9f4 ffc fs15 fc2 sc0 ls6 ws17d">4<span class="_ _0"></span>.<span class="_ _0"></span>4<span class="_ _0"></span>.<span class="_ _0"></span>2</div><div class="c x34 y9f5 w40 h77"><div class="t m0 xfb h14 y9f6 ff12 fs7 fcb sc0 lsd2 ws35c">This code sets the stage </div><div class="t m0 xfb h14 y9f7 ff12 fs7 fcb sc0 ls103 ws0">fo<span class="ff13 ls6">r</span><span class="lsee ws2cf"> the ti</span><span class="ff13 ls6">m<span class="ff12">i</span>n</span><span class="lsd9 ws2ce">g test.</span></div></div><div class="c x6a y9f8 wa h79"><div class="t m0 x43 h14 y9f9 ff12 fs7 fcb sc0 lsee ws30e">This code executes </div><div class="t m0 x43 h14 y9b7 ff12 fs7 fcb sc0 lsed ws0">withi<span class="ff13 ls6">n</span><span class="lsee ws2cf"> the ti</span><span class="ff13 ls6">m<span class="ff12">e</span>r<span class="ff12">.</span></span></div></div><div class="c xcd y9fa w41 ha2"><div class="t m0 xc8 h14 y9fb ff12 fs7 fcb sc0 lsd2 ws0">ti<span class="ff13 ls6">m</span><span class="lsed ws5bd">eit p</span><span class="ff13 ls6">r</span><span class="ls181 ws5be">oduces a ti</span><span class="ff13 ls6">m<span class="ff12">i</span>n</span><span class="lsdd">g </span></div><div class="t m0 xc8 h14 y9fc ff13 fs7 fcb sc0 ls6 ws0">r<span class="ff12 lsfd ws31a">esult, i</span>n<span class="ff12"> </span>m<span class="ff12 lsd5">illiseco</span>n<span class="ff12 lsec">ds.</span></div></div><div class="t m0 x35 h15 y9fd ff4 fsb fcd sc0 ls6 ws0">This </div><div class="t m3 x0 h22 y9fd ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x4 h15 y9fd ff4 fsb fcd sc0 ls6 ws0">will </div><div class="t m3 x0 h22 y9fd ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x15 h15 y9fd ff4 fsb fcd sc0 ls6 ws0">end </div><div class="t m3 x0 h22 y9fd ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 xad h15 y9fd ff4 fsb fcd sc0 ls6 ws0">up </div><div class="t m3 x0 h22 y9fd ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x67 h15 y9fd ff4 fsb fcd sc0 ls6 ws0">timing </div><div class="t m3 x0 h22 y9fd ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x8d h15 y9fd ff4 fsb fcd sc0 ls6 ws0">only </div><div class="t m3 x0 h22 y9fd ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x63 h15 y9fd ff4 fsb fcd sc0 ls6 ws0">the</div><div class="t m3 x0 h22 y9fd ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m4 x85 h24 y9fd ffd fsc fcd sc0 ls6 ws0">dateti<span class="_ _0"></span>me.now(<span class="_ _0"></span>)</div><div class="t m3 x0 h25 y9fd ff8 fsc fcd sc0 ls6 ws0"> </div><div class="t m0 xee h15 y9fd ff4 fsb fcd sc0 ls6 ws0">call </div><div class="t m3 x0 h22 y9fd ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 xe1 h15 y9fd ff4 fsb fcd sc0 ls6 ws0">without </div><div class="t m3 x0 h22 y9fd ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x61 h15 y9fd ff4 fsb fcd sc0 ls6 ws0">timing </div><div class="t m3 x0 h22 y9fd ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 xec h15 y9fd ff4 fsb fcd sc0 ls6 ws0">the</div><div class="t m3 x0 h22 y9fd ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m4 x109 h24 y9fd ffd fsc fcd sc0 ls6 ws0">import</div><div class="t m0 x35 h15 y9fe ff4 fsb fcd sc0 ls6 ws0">needed to make the cal<span class="_ _e"></span>l.</div><div class="t m3 x0 h22 y9ff ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m3 x0 h22 y9ff ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x8a h15 y9ff ff4 fsb fcd sc0 ls6 ws0">Suppose you’d<span class="_ _e"></span> like to prov<span class="_ _e"></span>e that checking</div><div class="t m3 x0 h22 y9ff ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x6d h15 y9ff ff4 fsb fcd sc0 ls6 ws0">whether an<span class="_ _e"></span> item is in a<span class="_ _e"></span> set is faster <span class="_ _e"></span>than</div><div class="t m3 x0 h22 y9ff ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x35 h15 ya00 ff4 fsb fcd sc0 ls6 ws0">checking <span class="_ _e"></span>i<span class="_ _e"></span>f <span class="_ _e"></span>it’s <span class="_ _e"></span>in <span class="_ _f"></span>a <span class="_ _e"></span>list. <span class="_ _f"></span>How <span class="_ _e"></span>would <span class="_ _f"></span>you</div><div class="t m3 x0 h22 ya00 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 xf h15 ya00 ff4 fsb fcd sc0 ls6 ws0">do <span class="_ _e"></span>that <span class="_ _f"></span>using <span class="_ _e"></span>the <span class="_ _f"></span>timeit <span class="_ _e"></span>module? <span class="_ _f"></span>Build <span class="_ _e"></span>your</div><div class="t m3 x0 h22 ya00 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x35 h15 ya01 ff4 fsb fcd sc0 ls6 ws0">inputs usin<span class="_ _e"></span>g</div><div class="t m3 x0 h22 ya01 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m4 x91 h24 ya02 ffd fsc fcd sc0 ls6 ws0">set(r<span class="_ _0"></span>ange(10<span class="_ _0"></span>000))</div><div class="t m3 x0 h25 ya02 ff8 fsc fcd sc0 ls6 ws0"> </div><div class="t m0 x4b h15 ya02 ff4 fsb fcd sc0 ls6 ws0">and</div><div class="t m3 x0 h22 ya02 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m4 x13 h24 ya02 ffd fsc fcd sc0 ls6 ws0">list(r<span class="_ _0"></span>ange(10<span class="_ _0"></span>000))</div><div class="t m0 xcc h15 ya02 ff4 fsb fcd sc0 ls6 ws0">, and <span class="_ _e"></span>time the task <span class="_ _e"></span>of find-</div><div class="t m3 x0 h22 ya02 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x35 h15 ya03 ff4 fsb fcd sc0 ls6 ws0">ing out if</div><div class="t m3 x0 h22 ya03 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m4 xaf h24 ya04 ffd fsc fcd sc0 ls6 ws0">300</div><div class="t m3 x0 h25 ya04 ff8 fsc fcd sc0 ls6 ws0"> </div><div class="t m0 x18 h15 ya04 ff4 fsb fcd sc0 ls6 ws0">is in them. How m<span class="_ _e"></span>uch faster is the set?</div><div class="t m3 x0 h22 ya05 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m3 x0 h22 ya05 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x8a h15 ya05 ff4 fsb fcd sc0 ls6 ws0">The timeit module has saved me from going down a rabbit hole a <span class="_ _0"></span>number of times</div><div class="t m3 x0 h22 ya05 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x35 h15 ya06 ff4 fsb fcd sc0 ls6 ws0">by tellin<span class="_ _e"></span>g me my <span class="_ _e"></span>hypothesis</div><div class="t m3 x0 h22 ya06 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x8f h15 ya06 ff4 fsb fcd sc0 ls6 ws0">about <span class="_ _e"></span>speeding up <span class="_ _e"></span>some code <span class="_ _e"></span>was wrong. <span class="_ _e"></span>It’s a <span class="_ _e"></span>real time-</div><div class="t m0 x35 h15 ya07 ff4 fsb fcd sc0 ls6 ws0">saver (pun absol<span class="_ _e"></span>utely intended).</div><div class="t m0 x35 h26 ya08 ffc fs15 fce sc0 ls6 ws0">CPU profiling</div><div class="t m0 x35 h15 ya09 ff4 fsb fcd sc0 ls6 ws0">When you<span class="_ _e"></span> were using <span class="_ _e"></span>timeit, the <span class="_ _e"></span>module was</div><div class="t m3 x0 h22 ya09 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x50 h1b ya09 ff3 fsb fcd sc0 ls6 ws0">profiling</div><div class="t m3 x0 h22 ya09 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 xa2 h15 ya09 ff4 fsb fcd sc0 ls6 ws0">your code<span class="_ _e"></span>. Profiling mea<span class="_ _e"></span>ns ana-</div><div class="t m3 x0 h22 ya09 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x35 h15 ya0a ff4 fsb fcd sc0 ls6 ws0">lyzing your<span class="_ _e"></span> code as it <span class="_ _e"></span>runs to gath<span class="_ _e"></span>er some metrics ab<span class="_ _e"></span>out its behavior. <span class="_ _e"></span>The timeit mo<span class="_ _e"></span>d-</div><div class="t m0 x35 h15 ya0b ff4 fsb fcd sc0 ls6 ws0">ule <span class="_ _e"></span>mea<span class="_ _e"></span>sured <span class="_ _e"></span>how <span class="_ _e"></span>l<span class="_ _e"></span>ong <span class="_ _e"></span>your <span class="_ _e"></span>c<span class="_ _e"></span>ode <span class="_ _e"></span>took <span class="_ _f"></span>to <span class="_ _e"></span>run <span class="_ _e"></span>in <span class="_ _f"></span>total, <span class="_ _e"></span>but <span class="_ _f"></span>another <span class="_ _e"></span>insightf<span class="_ _e"></span>ul <span class="_ _e"></span>way <span class="_ _e"></span>to</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
