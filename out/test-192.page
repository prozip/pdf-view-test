<div id="pfc0" class="pf w0 h0" data-page-no="c0"><div class="pc pcc0 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgc0.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">168</div><div class="t m0 xb9 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xd3 h2c y1d0 ffb fs19 fcb sc0 lsf6 ws0">HAPTER</div><div class="t m0 xd9 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 9</div><div class="t m0 x1f h2d y80 ffa fs7 fcb sc0 ls6 ws0">Keeping things lightweight</div><div class="t m0 x44 h15 y40 ff4 fsb fc3 sc0 ls2f wsa2">to response formats, and then choosing the <span class="ls20 ws202">right<span class="_ _e"></span> one based on the user’s request, will</span></div><div class="t m0 x44 h15 y41 ff4 fsb fc3 sc0 ls51 ws47">simplify things.</div><div class="t m0 x32 h15 y42 ff4 fsb fc3 sc0 ls20 ws3ea"> Try extracting the different<span class="ls2d ws33c"> header values and response <span class="_ _e"></span>types into a dictionary,</span></div><div class="t m0 x44 h15 y43 ff4 fsb fc3 sc0 ls20 ws2dd">using the default behavior as the fallb<span class="_ _e"></span>ack if<span class="ls42 ws8c"> the user doesn’t request a response format</span></div><div class="t m0 x44 h15 y44 ff4 fsb fc3 sc0 ls38 ws26">(or requests an unknown format). Check your work against the following listing when</div><div class="t m0 x44 h15 y45 ff4 fsb fc3 sc0 ls38 ws26">you’re done.</div><div class="t m0 x44 h3b yf62 ffd fs18 fc3 sc0 lsb2 ws0">...</div><div class="t m0 x44 h3b yf64 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>random_food(request):</div><div class="t m0 xae h3b yf65 ffd fs18 fc3 sc0 lsb2 ws0">food<span class="_"> </span>=<span class="_"> </span>random.choice(FOODS)</div><div class="t m0 xae h3b y14e4 ffd fs18 fc3 sc0 lsb2 ws0">formats<span class="_"> </span>=<span class="_"> </span>{</div><div class="t m0 x97 h3b y14e5 ffd fs18 fc3 sc0 lsb2 ws0">&apos;application/json&apos;:<span class="_"> </span>json.dumps({&apos;food&apos;:<span class="_"> </span>food}),</div><div class="t m0 x97 h3b y14e6 ffd fs18 fc3 sc0 lsb2 ws0">&apos;application/xml&apos;:<span class="_"> </span>f&apos;&lt;response&gt;&lt;food&gt;{food}&lt;/food&gt;&lt;/response&gt;&apos;,</div><div class="t m0 xae h3b y14e7 ffd fs18 fc3 sc0 ls6 ws0">}</div><div class="t m0 xae h3b y14e8 ffd fs18 fc3 sc0 lsb2 ws0">return<span class="_"> </span>formats.get(request.headers.get(&apos;Accept&apos;),<span class="_"> </span>food)</div><div class="t m0 x44 h15 y2d4 ff4 fsb fc3 sc0 lsb3 ws0">B<span class="_ _25"></span>e<span class="_ _1d"></span>l<span class="_ _25"></span>i<span class="_ _1c"></span>e<span class="_ _1c"></span>v<span class="_ _1c"></span>e<span class="_ _1c"></span> i<span class="_ _1c"></span>t<span class="_ _1c"></span> o<span class="_ _1c"></span>r<span class="_ _1c"></span> n<span class="_ _1c"></span>o<span class="_ _1c"></span>t<span class="_ _1c"></span>,<span class="_ _1c"></span> t<span class="_ _1c"></span>h<span class="_ _1c"></span>i<span class="_ _1c"></span>s<span class="_ _1c"></span> n<span class="_ _1c"></span>e<span class="_ _1c"></span>w<span class="_ _1c"></span> s<span class="_ _1c"></span>o<span class="_ _1c"></span>l<span class="_ _1c"></span>u<span class="_ _1c"></span>t<span class="_ _1c"></span>i<span class="_ _1c"></span>o<span class="_ _1c"></span>n<span class="_ _1c"></span> i<span class="_ _1c"></span>s<span class="_ _1c"></span> r<span class="_ _1c"></span>e<span class="_ _1c"></span>d<span class="_ _1c"></span>u<span class="_ _1c"></span>c<span class="_ _1c"></span>e<span class="_ _1c"></span>d<span class="_ _1c"></span> b<span class="_ _1c"></span>a<span class="_ _1c"></span>c<span class="_ _1c"></span>k<span class="_ _1c"></span> t<span class="_ _1c"></span>o<span class="_ _1c"></span> a<span class="_ _1c"></span> c<span class="_ _1c"></span>y<span class="_ _1c"></span>c<span class="_ _1c"></span>l<span class="_ _1c"></span>o<span class="_ _1c"></span>m<span class="_ _1c"></span>a<span class="_ _1c"></span>t<span class="_ _1c"></span>i<span class="_ _1c"></span>c<span class="_ _1c"></span> c<span class="_ _1c"></span>o<span class="_ _1c"></span>m<span class="_ _1c"></span>p<span class="_ _1c"></span>l<span class="_ _1c"></span>e<span class="_ _1c"></span>x<span class="_ _1c"></span>i<span class="_ _1c"></span>t<span class="_ _1c"></span>y<span class="_ _1c"></span> o<span class="_ _1c"></span>f<span class="_ _1c"></span> 1<span class="_ _1c"></span>.</div><div class="t m0 x44 h15 y2d5 ff4 fsb fc3 sc0 ls42 ws33a">And even if you continue adding entries to the </div><div class="t m5 x5f h24 y14e9 ffd fsc fc3 sc0 lsa0 ws0">formats</div><div class="t m0 xcd h15 y2d5 ff4 fsb fc3 sc0 ls2f wsf3"> dictionary, no additional com-</div><div class="t m0 x44 h15 y2d6 ff4 fsb fc3 sc0 ls42 ws32">plexity is added. This is the kind of gain <span class="ls6 ws72">I talked about in chapter 4; you<span class="_ _e"></span>’ve gone from</span></div><div class="t m0 x44 h15 y2d7 ff4 fsb fc3 sc0 ls38 ws26">a linear algorithm to a constant one.</div><div class="t m0 x32 h15 y2d8 ff4 fsb fc3 sc0 ls38 ws253"> Extracting configuration into a map also<span class="ls31 wsb5"> makes code much m<span class="_ _e"></span>ore readable, in my</span></div><div class="t m0 x44 h15 y2d9 ff4 fsb fc3 sc0 ls30 wse3">experience. Trying to sift through a numb<span class="_ _e"></span>er of </div><div class="t m5 x74 h24 y14ea ffd fsc fc3 sc0 ls6 ws0">if</div><div class="t m0 x52 h15 y14eb ff4 fsb fc3 sc0 ls6 ws0">/</div><div class="t m5 x25 h24 y14ea ffd fsc fc3 sc0 lsa0 ws0">elif</div><div class="t m0 x147 h15 y14eb ff4 fsb fc3 sc0 ls62 ws8d1"> conditions <span class="_ _e"></span>is tiresome, even</div><div class="t m0 x44 h15 y2da ff4 fsb fc3 sc0 ls44 ws5ae">when they’re all fairly similar. In contrast<span class="ls2d wsbc">, a dictionary’s keys are generally scannable.</span></div><div class="t m0 x44 h15 y2db ff4 fsb fc3 sc0 ls31 ws25">If you know the key you’re look<span class="ls4b ws204">ing for<span class="_ _e"></span>, it’s quick to spot.</span></div><div class="t m0 x32 h15 y2dc ff4 fsb fc3 sc0 ls4e ws1e3"> Can we do even<span class="_ _e"></span> better?</div><div class="t m0 x42 h26 y14ec ffc fs15 fc2 sc0 ls110 ws42b">9.2.2<span class="_ _5f"> </span>E<span class="_ _e"></span>x<span class="_ _e"></span>tr<span class="_ _e"></span>a<span class="_ _e"></span>c<span class="_ _e"></span>t<span class="_ _e"></span>in<span class="_ _e"></span>g<span class="_ _e"></span> f<span class="_ _e"></span>un<span class="_ _e"></span>c<span class="_ _e"></span>t<span class="_ _e"></span>io<span class="_ _e"></span>n<span class="_ _e"></span>s</div><div class="t m0 x44 h15 y14ed ff4 fsb fc3 sc0 ls44 wsd1">With the growing cyclomatic complexity defe<span class="ls2d ws18b">ated, two other things are still growing in</span></div><div class="t m0 x44 h15 y14ee ff4 fsb fc3 sc0 ls1c ws21">tandem within the </div><div class="t m5 x135 h24 y14ef ffd fsc fc3 sc0 lsa0 ws0">random_food</div><div class="t m0 x56 h15 y14ee ff4 fsb fc3 sc0 lsac ws439"> function:</div><div class="t m0 x86 h29 y14f0 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y14f1 ff4 fsb fc3 sc0 ls20 ws178">The code that knows <span class="ff3 ls42 ws0">what</span><span class="ls71 ws341"> to do (format the response as JSON, XML, and so on)</span></div><div class="t m0 x86 h29 y14f2 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y14f3 ff4 fsb fc3 sc0 ls71 ws25a">The code that knows <span class="ff3">how to decide</span><span class="ls215 ws0"> w<span class="_ _e"></span>h<span class="_ _f"></span>a<span class="_ _f"></span>t<span class="_ _e"></span> t<span class="_ _f"></span>o<span class="_ _e"></span> d<span class="_ _f"></span>o<span class="_ _e"></span> (<span class="_ _f"></span>b<span class="_ _e"></span>a<span class="_ _f"></span>s<span class="_ _e"></span>e<span class="_ _f"></span>d<span class="_ _e"></span> o<span class="_ _f"></span>n<span class="_ _e"></span> t<span class="_ _f"></span>h<span class="_ _e"></span>e<span class="_ _f"></span> </span></div><div class="t m5 x72 h24 y14f3 ffd fsc fc3 sc0 lsa0 ws0">Accept</div><div class="t m0 x99 h15 y14f3 ff4 fsb fc3 sc0 ls31 ws259"> header values)</div><div class="t m0 x44 h15 y14f4 ff4 fsb fc3 sc0 ls20 ws2dd">This is an opportunity to separate concerns. As I’ve advocated a few times in this book,</div><div class="t m0 x44 h15 y14f5 ff4 fsb fc3 sc0 ls44 ws8e">extracting some functions here <span class="_ _0"></span>could be he<span class="ls25 ws7ea">lpful. If you look at each item in the</span></div><div class="t m5 x44 h24 y554 ffd fsc fc3 sc0 lsa0 ws0">formats</div><div class="t m0 x48 h15 y553 ff4 fsb fc3 sc0 ls42 ws1f2"> dictionary, you’ll notice that the value is a function of the </div><div class="t m5 x5c h24 y554 ffd fsc fc3 sc0 lsa0 ws0">food</div><div class="t m0 x7d h15 y553 ff4 fsb fc3 sc0 ls1a1 ws1c9"> variabl<span class="_ _e"></span>e. Each</div><div class="t m0 x44 h15 y555 ff4 fsb fc3 sc0 ls1c ws375">of these values could be <span class="ls38 ws1b8">a function that accepts a </span></div><div class="t m5 x14 h24 y556 ffd fsc fc3 sc0 lsa0 ws0">food</div><div class="t m0 x139 h15 y555 ff4 fsb fc3 sc0 ls38 ws1b8"> argument and returns the</div><div class="t m0 x44 h15 y557 ff4 fsb fc3 sc0 ls20 ws51">formatted response that will go back to the<span class="_ _e"></span> user, as shown in figure 9.3.</div><div class="t m0 x32 h15 y559 ff4 fsb fc3 sc0 ls51 ws11b"> Try changing your </div><div class="t m5 x92 h24 y55a ffd fsc fc3 sc0 lsa0 ws0">random_food</div><div class="t m0 x10b h15 y559 ff4 fsb fc3 sc0 ls42 ws3af"> function to use the<span class="_ _e"></span>se separated response-format</div><div class="t m0 x44 h15 y55b ff4 fsb fc3 sc0 ls50 ws8d2">functions. The <span class="_ _0"></span>dictionary will now map form<span class="_ _0"></span><span class="ls34 ws10e">ats to the function that can return the</span></div><div class="t m0 x44 h15 y14f6 ff4 fsb fc3 sc0 ls34 wsc6">response for that format, and </div><div class="t m5 x69 h24 y55f ffd fsc fc3 sc0 lsa0 ws0">random_food</div><div class="t m0 x3f h15 y560 ff4 fsb fc3 sc0 ls30 wsf9"> will call that function with the </div><div class="t m5 x105 h24 y55f ffd fsc fc3 sc0 lsa0 ws0">food</div><div class="t m0 x112 h15 y560 ff4 fsb fc3 sc0 ls35 ws8d3"> value.</div><div class="t m0 x32 h20 yf83 ffb fs7 fc4 sc0 ls6 ws0">Listing<span class="_"> </span>9.3<span class="_ _55"> </span>An endpoint with extracted configuration</div><div class="c x82 yafb wb3 h131"><div class="t m0 xf9 h14 y14f7 ff12 fs7 fcb sc0 ls170 ws0">Ext<span class="ff13 ls6">r</span><span class="ls173 ws567">acted f</span><span class="ff13 ls6">r<span class="ff12">o</span>m</span><span class="lsed ws4ed"> the p<span class="_ _0"></span><span class="ff13 ls6 ws0">r<span class="ff12 ws317">evious if/elif co</span>n<span class="ff12 lsd5">ditio</span>n<span class="ff12">s</span></span></span></div></div><div class="c x111 y14f8 wb4 h132"><div class="t m0 xfb h14 y14f9 ff12 fs7 fcb sc0 lsff ws315">Gets the <span class="ff13 ls6 ws0">r<span class="ff12 lsda">equested </span>r<span class="ff12 lse0">espo</span>n<span class="ff12 ls10e">se</span></span></div><div class="t m0 x130 h14 y14fa ff12 fs7 fcb sc0 ls103 ws0">fo<span class="ff13">rm</span><span class="ls170 ws885">at if available; othe</span><span class="ff13 ls6">r</span><span class="lsdc ws3df">wise, falls</span></div><div class="t m0 x14d h14 y14fb ff12 fs7 fcb sc0 lsff ws315">back to <span class="ff13 ls6 ws0">r<span class="ff12 ls105">etu</span><span class="ls103">rn</span><span class="ff12">i</span>n</span><span class="lsd3 ws743">g the plai<span class="ff13 ls6 ws0">n<span class="_ _0"></span><span class="ff12 ls10e ws55a"> st<span class="ff13 ls6 ws0">r<span class="ff12">i</span>n<span class="ff12">g</span></span></span></span></span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
