<div id="pf4b" class="pf w0 h0" data-page-no="4b"><div class="pc pc4b w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg4b.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">51<span class="_ _5e"></span><span class="ffa">Programming styles are an abstraction too</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls6f ws4bd">Now the </div><div class="t m5 xaf h24 y3eb ffd fsc fc3 sc0 lsa0 ws0">Greeter</div><div class="t m0 x66 h15 y40 ff4 fsb fc3 sc0 ls3d ws4be"> only knows the information it needs to make a gree<span class="_ _e"></span>ting, without</div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls5e ws4bf">worrying about the details of how to get that <span class="ls2d ws177">information. What’s also nice is that the</span></div><div class="t m5 x35 h24 y66f ffd fsc fc3 sc0 lsa0 ws0">day</div><div class="t m0 x8a h15 y533 ff4 fsb fc3 sc0 ls5f ws4c0"> and </div><div class="t m5 x36 h24 y66f ffd fsc fc3 sc0 lsa0 ws0">part_of_day</div><div class="t m0 xd3 h15 y533 ff4 fsb fc3 sc0 ls31 ws335"> functions can be used elsewher<span class="ls20 ws221">e if needed, without having to</span></div><div class="t m0 x35 h15 y43 ff4 fsb fc3 sc0 ls7d ws12a">reference the </div><div class="t m5 x1d h24 y71c ffd fsc fc3 sc0 lsa0 ws0">Greeter</div><div class="t m0 x3 h15 y43 ff4 fsb fc3 sc0 ls9e ws1f5"> class. That’s <span class="_ _0"></span>two benefits<span class="_ _0"></span> in one!</div><div class="t m0 x83 h15 y44 ff4 fsb fc3 sc0 ls30 ws10b"> Eventually, you might de<span class="_ _e"></span>velop more datetime-related features, at which <span class="_ _e"></span>point it</div><div class="t m0 x35 h15 y45 ff4 fsb fc3 sc0 ls71 ws98">could make sense to refactor all those featur<span class="lsb1 ws4c1">es into their own modu<span class="ls42 wsc4">le or class. I <span class="_ _0"></span>often</span></span></div><div class="t m0 x35 h15 y46 ff4 fsb fc3 sc0 ls5e ws4bf">wait to do this until several functions or <span class="ls31 wsc6">classes present a clear <span class="ls71 ws4c2">relationship, but some</span></span></div><div class="t m0 x35 h15 ye3 ff4 fsb fc3 sc0 ls66 ws69">developers like<span class="_ _0"></span> to do this from the start<span class="_ _0"></span> to be strict about kee<span class="_ _0"></span>ping things separate.<span class="_ _0"></span> </div><div class="t m0 x19 h1f y71d ffc fs13 fc2 sc0 ls148 ws4c3">3<span class="_ _1d"></span>.4<span class="_ _a"> </span>Programming styles are an abstraction too</div><div class="t m0 x35 h15 y4a ff4 fsb fc3 sc0 ls1c ws400">A number of programming styles (<span class="_ _e"></span>or <span class="ff3 ls71 ws0">paradigms</span><span class="ls34 ws2c6">) have become popular over the years,</span></div><div class="t m0 x35 h15 y5ab ff4 fsb fc3 sc0 ls20 ws51">often sprouting out of <span class="_ _e"></span>a partic<span class="ls34 ws22">ular business domain or user<span class="ls35 ws24"> base. Python supports sev-</span></span></div><div class="t m0 x35 h15 y14b ff4 fsb fc3 sc0 ls30 wsef">eral styles, and they are abstractions in <span class="ls38 ws424">their own ways. Remember<span class="ls2d ws344"> that abstraction is</span></span></div><div class="t m0 x35 h15 y4d ff4 fsb fc3 sc0 ls1c ws4c4">the act of storing concepts away so they <span class="ls3a ws91">can be digested easily. Each programming</span></div><div class="t m0 x35 h15 y4e ff4 fsb fc3 sc0 ls66 ws237">style stores<span class="_ _0"></span> information and behavior<span class="_ _0"></span> a bit di<span class="ls3d ws3f6">fferently. No one style is “right,” but some</span></div><div class="t m0 x35 h15 y4f ff4 fsb fc3 sc0 ls2f ws23">are better than others at <span class="ls5f ws59">tackling spec<span class="ls44 ws34">ific probl<span class="_ _0"></span>ems.</span></span></div><div class="t m0 x19 h26 y71e ffc fs15 fc2 sc0 ls149 ws4c5">3<span class="_ _0"></span>.<span class="_ _1d"></span>4.<span class="_ _1d"></span>1<span class="_ _5f"> </span>Procedural prog<span class="_ _0"></span>ramming</div><div class="t m0 x35 h15 y52 ff4 fsb fc3 sc0 ls51 ws12d">I’ve discussed and show<span class="ls71 ws2bd">n some examples of <span class="ff3">procedural programming</span><span class="ls44 ws15c"> in this and previous</span></span></div><div class="t m0 x35 h15 y53 ff4 fsb fc3 sc0 ls42 ws27b">chapters. Procedural software<span class="ws1f2"> prefers to operate using <span class="ff3 ls44 ws6e">procedure calls</span><span class="ls6f ws38e">, which we tend t<span class="_ _e"></span>o</span></span></div><div class="t m0 x35 h15 y54 ff4 fsb fc3 sc0 ls34 ws4c6">call “functions.” These functions aren’t encapsulated into classes, so they often rely</div><div class="t m0 x35 h15 y199 ff4 fsb fc3 sc0 ls3a ws28">only on their inputs and occasionally on so<span class="_ _e"></span>me global state.</div><div class="t m0 x35 h3b y71f ffd fs18 fc3 sc0 lsb2 ws0">NAMES<span class="_"> </span>=<span class="_"> </span>[&apos;Abby&apos;,<span class="_"> </span>&apos;Dave&apos;,<span class="_"> </span>&apos;Keira&apos;]</div><div class="t m0 x35 h3b y720 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>print_greetings():</div><div class="t m0 x87 h3b y404 ffd fs18 fc3 sc0 lsb2 ws0">greeting_pattern<span class="_"> </span>=<span class="_"> </span>&apos;Say<span class="_"> </span>hi<span class="_"> </span>to<span class="_"> </span>{name}!&apos;</div><div class="t m0 x87 h3b y721 ffd fs18 fc3 sc0 lsb2 ws0">nice_person_pattern<span class="_"> </span>=<span class="_"> </span>&apos;{name}<span class="_"> </span>is<span class="_"> </span>a<span class="_"> </span>nice<span class="_"> </span>person!&apos;</div><div class="t m0 x87 h3b y722 ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>name<span class="_"> </span>in<span class="_"> </span>NAMES:</div><div class="t m0 x36 h3b y723 ffd fs18 fc3 sc0 lsb2 ws0">print(greeting_pattern.format(name=name))</div><div class="t m0 x36 h3b y724 ffd fs18 fc1 sc0 lsb2 ws0">print(nice_person_pattern.format(name=name))</div><div class="t m0 x35 h15 y1b1 ff4 fsb fc3 sc0 ls2d ws103">If you’re fairly new to programming, this st<span class="ls44 ws4c7">yle will likely feel famili<span class="_ _0"></span>ar because it’s a</span></div><div class="t m0 x35 h15 y1b2 ff4 fsb fc3 sc0 ls30 wsbd">common jumping-off place. Going from one lo<span class="ls3e ws4a">ng procedure to a pr<span class="ls1c ws10">ocedure that calls</span></span></div><div class="t m0 x35 h15 y1b3 ff4 fsb fc3 sc0 ls5e ws4bf">a few functions tends to feel natural, so it<span class="_ _e"></span>’s<span class="ls3a wsb1"> a good approach to teach first. The bene-</span></div><div class="t m0 x35 h15 y725 ff4 fsb fc3 sc0 ls34 ws11f">fits of procedural programming<span class="ls36 ws25d"> strongly overlap with thos<span class="ws108">e discussed in section 3.1.4</span></span></div><div class="t m0 x35 h15 y209 ff4 fsb fc3 sc0 ls2c ws1c">because procedural progr<span class="_ _0"></span>amming focuses heavily on functions. </div><div class="t m0 x19 h26 y726 ffc fs15 fc2 sc0 lsad ws1be">3<span class="_ _0"></span>.<span class="_ _0"></span>4<span class="_ _0"></span>.<span class="_ _0"></span>2<span class="_ _11"> </span>Functional programming</div><div class="t m0 x35 h15 y1b8 ff4 fsb fc3 sc0 ls34 ws2d3">Functional programming <span class="ff3 ls79 ws0">sounds</span><span class="ls35 ws42f"> like it would be the same as procedural<span class="_ _0"></span> program-</span></div><div class="t m0 x35 h15 y49c ff4 fsb fc3 sc0 ls3a ws0">ming—<span class="ff3 ls1c">function</span><span class="ls47 ws4c8"> is right there in the name! But alth</span><span class="ws1c6">ough it’s true that functional pro-</span></div><div class="t m0 x35 h15 y49d ff4 fsb fc3 sc0 ls25 ws1e4">gramming relies heavily on functions as th<span class="ls48 ws4a5">e form of abstraction, the mental model is</span></div><div class="t m0 x35 h15 y727 ff4 fsb fc3 sc0 ls30 ws36">quite different.</div><div class="c x93 y728 wa h75"><div class="t m0 x43 h14 y42d ff12 fs7 fcb sc0 lsd5 ws2d2">A sta<span class="ff13 ls6 ws0">n<span class="ff12 ls10a">dalo</span>n</span><span class="lsf2 ws38a">e fu<span class="ff13 ls6 ws0">n<span class="ff12 lse4">ctio</span>n</span><span class="ls118 ws3ce"> that </span></span></div><div class="t m0 x43 h14 y42e ff13 fs7 fcb sc0 ls6 ws0">r<span class="ff12 lsda ws311">elies o</span>n<span class="ff12 lsdf ws4c9">ly o</span>n<span class="ff12 lsdc ws2ac"> NAMES</span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
