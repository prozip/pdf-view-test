<div id="pf48" class="pf w0 h0" data-page-no="48"><div class="pc pc48 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgf0.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">48</div><div class="t m0 x8e h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xf2 h2c y1d0 ffb fs19 fcb sc0 ls12b ws0">HAPTER</div><div class="t m0 xc9 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 3</div><div class="t m0 x47 h2d y80 ffa fs7 fcb sc0 ls6 ws0">Abstraction and encapsulation</div><div class="t m0 x32 h15 y40 ff4 fsb fc3 sc0 ls3b ws29"> Which of these pieces do you think would be a</div><div class="t m0 x86 h29 y6c5 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y140 ff4 fsb fc3 sc0 ls30 ws0">Method?</div><div class="t m0 x86 h29 y6c6 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y6c7 ff4 fsb fc3 sc0 ls38 ws0">Class?</div><div class="t m0 x86 h29 y6c8 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y6c9 ff4 fsb fc3 sc0 ls3d ws0">Module?</div><div class="t m0 x86 h29 y6ca ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y6cb ff4 fsb fc3 sc0 ls80 ws0">Package?</div><div class="t m0 x44 h15 y6cc ff4 fsb fc3 sc0 ls42 ws8c">The three smallest pieces—calculating tax, <span class="ls31 ws116">calculating shipping, and subtracting <span class="_ _e"></span>a dis-</span></div><div class="t m0 x44 h15 y6cd ff4 fsb fc3 sc0 ls2e ws1c3">count—would likely be <span class="_ _0"></span>method<span class="ls51 ws108">s inside a class that represents the shopping cart. The</span></div><div class="t m0 x44 h15 ye5 ff4 fsb fc3 sc0 ls1c ws375">e-commerce system seems like it could ha<span class="ls2d ws495">ve enough functionality to be a package</span></div><div class="t m0 x44 h15 y6ce ff4 fsb fc3 sc0 ls42 ws1f2">because the shopping cart is j<span class="_ _e"></span>ust one part <span class="ls7d ws334">of that system. Different m<span class="_ _e"></span>odules within the</span></div><div class="t m0 x44 h15 y6cf ff4 fsb fc3 sc0 ls80 ws496">package could <span class="_ _e"></span>arise depending on how closely <span class="ls30 ws1ef">related the<span class="_ _e"></span>y are to each other. But how</span></div><div class="t m0 x44 h15 y39e ff4 fsb fc3 sc0 ls3b ws70">do they work together if <span class="_ _e"></span>they’re <span class="ls79 wsf6">each surrounded by <span class="_ _e"></span>a castle wall?</span></div><div class="t m0 x44 h26 y6d0 ffc fs15 fc2 sc0 ls144 ws497">Expectations <span class="_ _0"></span>of privacy in Python<span class="_ _59"></span>3<span class="_ _0"></span>.<span class="_ _1d"></span>2.<span class="_ _1d"></span>2</div><div class="t m0 x44 h15 y3a1 ff4 fsb fc3 sc0 ls3b ws29">Many languages formalize the “castle wall” as<span class="_ _e"></span><span class="ls3e ws2d">pect of encap<span class="_ _0"></span>sulation by introducing the</span></div><div class="t m0 x44 h15 y6d1 ff4 fsb fc3 sc0 ls5b ws498">concept o<span class="_ _e"></span>f <span class="ff3 ls30 ws0">privacy</span><span class="ls1c ws10">. Classes can have <span class="ff3 ls42 ws0">private</span> methods and data that can’t be accessed by</span></div><div class="t m0 x44 h15 y6d2 ff4 fsb fc3 sc0 ls38 ws26">anyone but instances of the cla<span class="ls30 ws36">ss. This is in contrast to <span class="ff3 ls3b ws0">public</span><span class="ls44 wseb"> methods and data, which</span></span></div><div class="t m0 x44 h15 y6d3 ff4 fsb fc3 sc0 ls7a ws1fc">are often r<span class="_ _0"></span>eferred to as the <span class="ff3 ls2d ws0">inter<span class="_ _0"></span>face<span class="ff4 ls71 ws98"> of the class because this is how other classes inter-</span></span></div><div class="t m0 x44 h15 y114 ff4 fsb fc3 sc0 ls48 ws39">face with it.</div><div class="t m0 x32 h15 y96 ff4 fsb fc3 sc0 ls3d ws1ac"> Python has no true support for private meth<span class="_ _e"></span><span class="ls2d ws18b">ods or data. Instea<span class="_ _0"></span>d, it follows a philos-</span></div><div class="t m0 x44 h15 y34d ff4 fsb fc3 sc0 ls79 ws3bf">ophy of trusting develo<span class="_ _e"></span>pers to do the ri<span class="ls6c ws2c7">ght thing. A common co<span class="_ _0"></span>nvention does help <span class="_ _0"></span>in</span></div><div class="t m0 x44 h15 y34e ff4 fsb fc3 sc0 ls2d ws18b">this arena, though. Methods and variables in<span class="ls20 ws2dd">tended for use within a class but not from</span></div><div class="t m0 x44 h15 y6d4 ff4 fsb fc3 sc0 ls20 ws82">outside the class are often prefixed with an <span class="ls2c ws499">underscore. This provides a hint to <span class="_ _0"></span>future</span></div><div class="t m0 x44 h15 y41c ff4 fsb fc3 sc0 ls44 ws49a">developers that a particular method<span class="_ _0"></span> or vari<span class="ls2d wsa1">able isn’t intended as part of the publi<span class="_ _0"></span>c</span></div><div class="t m0 x44 h15 y158 ff4 fsb fc3 sc0 ls1c ws94">interface of the class. Third-party packages<span class="ls34 wsb6"> often state loudly in their documentation</span></div><div class="t m0 x44 h15 y159 ff4 fsb fc3 sc0 ls30 ws49b">that such methods are likely<span class="ls3e ws49c"> to change from version to version and should not be</span></div><div class="t m0 x44 h15 y5b2 ff4 fsb fc3 sc0 ls51 ws47">explicitly relied on.</div><div class="t m0 x32 h15 y6d5 ff4 fsb fc3 sc0 ls44 ws114"> In chapter 2, you learned <span class="ls42 ws2a0">about coupling between classe<span class="ls31 ws21c">s, and that loose coupling</span></span></div><div class="t m0 x44 h15 y5b3 ff4 fsb fc3 sc0 ls71 ws138">is the desired state. The more methods an<span class="ls1e ws11a">d data a particular class depend<span class="_ _0"></span>s on from</span></div><div class="t m0 x44 h15 y5b4 ff4 fsb fc3 sc0 ls5e ws14a">another class, the more coup<span class="ls3e ws13c">led they become. This is magnified when a class depends</span></div><div class="t m0 x44 h15 yfd ff4 fsb fc3 sc0 ls48 ws49d">on the <span class="ff3 ls44 ws0">internals</span><span class="ls42 ws49e"> of another class because that <span class="ls1e ws49f">means most of the class can’t be</span></span></div><div class="t m0 x44 h15 y6d6 ff4 fsb fc3 sc0 ls3a ws28">improved in isolation without the risk of breaking other code.</div><div class="t m0 x32 h15 y6d7 ff4 fsb fc3 sc0 ls1f ws4a0"> Abstraction and encapsul<span class="_ _0"></span>ation work toge<span class="ls5e ws34f">ther by <span class="_ _0"></span>grouping related functionality</span></div><div class="t m0 x44 h15 y6d8 ff4 fsb fc3 sc0 ls6c ws6f">together and hidin<span class="_ _0"></span>g the parts of it that do<span class="ls3a ws28">n’t matter to anyone else. This is sometimes</span></div><div class="t m0 x44 h15 y6d9 ff4 fsb fc3 sc0 ls51 ws4a1">called “information hiding,” and it allows <span class="_ _0"></span><span class="ls34 ws10e">the internals of a class (or system in gen-</span></div><div class="t m0 x44 h15 y6da ff4 fsb fc3 sc0 ls51 ws47">eral) to change rapidly with<span class="ls38 ws26">out other code having to change at the same rate. </span></div><div class="t m0 x44 h1f y6db ffc fs13 fc2 sc0 lsf9 ws4a2">T<span class="_ _e"></span>r<span class="_ _e"></span>y i<span class="_ _e"></span>t<span class="_ _e"></span> o<span class="_ _e"></span>u<span class="_ _e"></span>t<span class="_ _5a"></span>3.3</div><div class="t m0 x44 h15 y168 ff4 fsb fc3 sc0 ls71 ws2d4">I’d like you to get some prac<span class="ls2e ws4a3">tice with encapsulation now. Suppose you’re writing code</span></div><div class="t m0 x44 h15 y6dc ff4 fsb fc3 sc0 ls2f ws4a4">to greet new customers to an online stor<span class="ls3a ws91">e. The greeting makes customers feel wel-</span></div><div class="t m0 x44 h15 y6dd ff4 fsb fc3 sc0 ls3a ws2b4">come and offers them an incentive to stic<span class="ls48 ws4a5">k around. Write a greeter module that con-</span></div><div class="t m0 x44 h15 y6de ff4 fsb fc3 sc0 ls34 ws22">tains a single class, </div><div class="t m5 x3a h24 y6df ffd fsc fc3 sc0 lsa0 ws0">Greeter</div><div class="t m0 xb6 h15 y6e0 ff4 fsb fc3 sc0 ls42 ws32">, that has three methods:</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
