<div id="pf75" class="pf w0 h0" data-page-no="75"><div class="pc pc75 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg75.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">93<span class="_ _99"></span><span class="ffa">Unit testing with unittest</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls3e ws4a">a unit test with mocking could look like this:</div><div class="t m0 x35 h3b yc04 ffd fs18 fc3 sc0 lsb2 ws0">import io</div><div class="t m0 x35 h3b yc05 ffd fs18 fc3 sc0 lsb2 ws0">import unittest</div><div class="t m0 x35 h3b yc06 ffd fs18 fc3 sc0 lsb2 ws0">from unittest import mock</div><div class="t m0 x35 h3b yc07 ffd fs18 fc3 sc0 lsb2 ws0">from tax import add_sales_tax</div><div class="t m0 x35 h3b yc08 ffd fs18 fc3 sc0 lsb2 ws0">class SalesTaxTestCase(unittest.TestCase):</div><div class="t m0 x35 h3b yc09 ffd fs18 fc3 sc0 lsb2 ws0">    @mock.patch(&apos;tax.urlopen&apos;)   </div><div class="t m0 x35 h3b yc0a ffd fs18 fc3 sc0 lsb2 ws0">    def test_get_sales_tax_returns_proper_value_from_api(</div><div class="t m0 x35 h3b yc0b ffd fs18 fc3 sc0 lsb2 ws0">            self,</div><div class="t m0 x35 h3b y83f ffd fs18 fc3 sc0 lsb2 ws0">            mock_urlopen   </div><div class="t m0 x35 h3b y840 ffd fs18 fc3 sc0 lsb2 ws0">    ):</div><div class="t m0 x35 h3b yc0c ffd fs18 fc3 sc0 lsb2 ws0">        test_tax_rate = 1.06</div><div class="t m0 x35 h3b yc0d ffd fs18 fc3 sc0 lsb2 ws0">        mock_urlopen.return_value = io.BytesIO(  </div><div class="t m0 x35 h3b yc0e ffd fs18 fc3 sc0 lsb2 ws0">            str(test_tax_rate).encode(&apos;utf-8&apos;)</div><div class="t m0 x35 h3b yc0f ffd fs18 fc3 sc0 lsb2 ws0">        )</div><div class="t m0 x35 h3b yc10 ffd fs18 fc3 sc0 lsb2 ws0">        self.assertEqual(  </div><div class="t m0 x35 h3b y7bc ffd fs18 fc3 sc0 lsb2 ws0">            5 * test_tax_rate,</div><div class="t m0 x35 h3b y3fb ffd fs18 fc3 sc0 lsb2 ws0">            add_sales_tax(5, &apos;USA&apos;, &apos;MI&apos;)</div><div class="t m0 x35 h3b yc11 ffd fs18 fc1 sc0 lsb2 ws0">        )</div><div class="t m0 x35 h15 y34d ff4 fsb fc3 sc0 ls44 ws6e">Testing in this way allows you to declare, “T<span class="ls2f ws5db">he code I control behaves in this way given</span></div><div class="t m0 x35 h15 y34e ff4 fsb fc3 sc0 ls51 ws43">these assumptions,” where the assumptions ar<span class="ls34 ws9f">e created using test <span class="ls1e ws13">doubles. If you have</span></span></div><div class="t m0 x35 h15 y472 ff4 fsb fc3 sc0 ls47 ws4c8">fair confidence that the requests library work<span class="_ _e"></span><span class="ls31 ws200">s as it says it does, you can use test dou-</span></div><div class="t m0 x35 h15 y41c ff4 fsb fc3 sc0 ls47 ws4aa">bles to avoid coupling yourself to it. If you need<span class="_ _e"></span> to use a different HTTP client library</div><div class="t m0 x35 h15 y158 ff4 fsb fc3 sc0 ls47 ws2bf">in the future, or need<span class="ls3d ws1ac"> to<span class="_ _e"></span> change which API you get your tax information from, the test</span></div><div class="t m0 x35 h15 y159 ff4 fsb fc3 sc0 ls3b ws29">will not have to change.</div><div class="t m0 x83 h15 y5b2 ff4 fsb fc3 sc0 ls2d ws344"> It’s possible to overuse test doubles. I’m <span class="lsc5 ws668">most certainly guilty of this fr<span class="_ _0"></span>om time to</span></div><div class="t m0 x35 h15 ycf ff4 fsb fc3 sc0 ls38 ws17e">time. Usually you’ll want to use test doubles <span class="ls80 ws669">to avoid the slow, ex<span class="_ _e"></span>pensive, or destructive</span></div><div class="t m0 x35 h15 y5b3 ff4 fsb fc3 sc0 ls48 ws66a">behaviors mentioned before, b<span class="_ _e"></span>ut <span class="ls34 ws66b">sometimes it’s tempting to <span class="lsbc ws66c">mock your own code<span class="_ _e"></span> to per-</span></span></div><div class="t m0 x35 h15 y5b4 ff4 fsb fc3 sc0 ls30 ws22e">fectly isolate the unit you’re trying to test. This can lead to <span class="ff3 ls36 ws0">brittle</span><span class="ls2d ws1d"> tests that break often</span></div><div class="t m0 x35 h15 yfd ff4 fsb fc3 sc0 ls1f ws66d">when you change your code,<span class="_ _0"></span> in part because <span class="ls20 ws66e">they mirror the structure of the implemen-</span></div><div class="t m0 x35 h15 y6d6 ff4 fsb fc3 sc0 ls42 ws32">tation too closely. Change the implem<span class="_ _e"></span>entation, and you have to change your tests.</div><div class="t m0 x83 h15 ya3 ff4 fsb fc3 sc0 ls6c ws66f"> Try to write tests th<span class="_ _0"></span>at verify what you need<span class="_ _0"></span> but are flexible r<span class="_ _0"></span>egarding changes in</div><div class="t m0 x35 h15 y6d8 ff4 fsb fc3 sc0 ls25 ws7d">the underlying implementation. This is loose coupling, once again. Loose coupling</div><div class="t m0 x35 h15 y6d9 ff4 fsb fc3 sc0 ls3b ws70">applies to test code<span class="_ _e"></span> as much as implementation code. </div><div class="t m0 x19 h26 yc12 ffc fs15 fc2 sc0 ls110 ws670">5.4.6<span class="_ _5f"> </span>T<span class="_ _e"></span>r<span class="_ _e"></span>y<span class="_ _e"></span> it<span class="_ _e"></span> o<span class="_ _e"></span>u<span class="_ _e"></span>t</div><div class="t m0 x35 h15 yc13 ff4 fsb fc3 sc0 ls3e ws671">How would you test the other methods <span class="_ _0"></span>in the </div><div class="t m5 x5e h24 yc13 ffd fsc fc3 sc0 lsa0 ws0">Product</div><div class="t m0 x104 h15 yc13 ff4 fsb fc3 sc0 ls5f ws672"> and </div><div class="t m5 x73 h24 yc13 ffd fsc fc3 sc0 lsa0 ws0">ShoppingCart</div><div class="t m0 x8 h15 yc13 ff4 fsb fc3 sc0 ls1c ws375"> classes?</div><div class="t m0 x35 h15 yc14 ff4 fsb fc3 sc0 ls3a ws5a8">Keeping in mind the recipe for functional <span class="ls3b ws673">tests, try adding additional tests for the</span></div><div class="t m0 x35 h15 y139 ff4 fsb fc3 sc0 ls2d ws3eb">remaining methods. A thorough test suite wi<span class="ls38 ws1a3">l<span class="_ _0"></span>l contain assertions for each method and</span></div><div class="t m0 x35 h15 yc15 ff4 fsb fc3 sc0 ls42 ws1f2">for each different outcome you might expect<span class="ls7a ws556"> <span class="_ _e"></span>fr<span class="_ _0"></span>om the method. You mig<span class="_ _0"></span>ht even find a</span></div><div class="t m0 x35 h15 yc16 ff4 fsb fc3 sc0 ls36 ws137">subtle bug! As a hint, try testing what happe<span class="ls7c ws0">ns w<span class="_ _e"></span>he<span class="_ _e"></span>n y<span class="_ _e"></span>ou<span class="_ _e"></span> re<span class="_ _e"></span>mo<span class="_ _e"></span>ve m<span class="_ _e"></span>or<span class="_ _e"></span>e t<span class="_ _e"></span>hi<span class="_ _e"></span>ng<span class="_ _e"></span>s f<span class="_ _e"></span>rom<span class="_ _e"></span> th<span class="_ _e"></span>e</span></div><div class="t m0 x35 h15 yc17 ff4 fsb fc3 sc0 ls71 wsd4">cart than it contains.</div><div class="c x98 yc18 w4f hb6"><div class="t m0 x131 h14 yc19 ff12 fs7 fcb sc0 lsdc ws0">The <span class="ff13 ls6">m</span><span class="ls10c">ock.patch </span></div><div class="t m0 x131 h14 yc1a ff12 fs7 fcb sc0 lsda ws0">deco<span class="ff13 ls6">r</span><span class="ls10f">ato<span class="ff13 ls6">r<span class="ff12"> </span>m</span><span class="ls102">ocks </span></span></div><div class="t m0 x131 h14 yc1b ff12 fs7 fcb sc0 lsd6 ws3da">the object o<span class="ff13 ls6 ws0">r<span class="ff12"> </span></span></div><div class="t m0 x131 h14 yc1c ff13 fs7 fcb sc0 ls6 ws0">m<span class="ff12 ls125 ws3cc">ethod specified.</span></div></div><div class="c x63 yc1d w50 hb7"><div class="t m0 x126 h14 yc1e ff12 fs7 fcb sc0 ls118 ws674">The test fu<span class="ff13 ls6 ws0">n<span class="ff12 lse4">ctio</span>n<span class="ff12"> <span class="_ _1d"></span><span class="ff13">r<span class="_"> </span><span class="ff12 lsdc ws675">eceives the </span></span></span></span></div><div class="t m0 x126 h14 yc1f ff13 fs7 fcb sc0 ls6 ws0">m<span class="ff12 lsec ws45e">ocked object o</span>r<span class="ff12"> </span>m<span class="ff12 lsd5">ethod.</span></div></div><div class="c x75 yc20 w51 hb8"><div class="t m0 x119 h14 yc21 ff12 fs7 fcb sc0 ls100 ws0">The <span class="ff13 ls6">m</span><span class="lsdc ws2ac">ocked u</span><span class="ff13 ls6">r</span><span class="ls106">lope<span class="ff13 ls6">n<span class="ff12 ws317"> call will </span></span></span></div><div class="t m0 x119 h14 yc22 ff13 fs7 fcb sc0 ls6 ws0">n<span class="ff12 ls140">ow </span>r<span class="ff12 ls105">etu</span><span class="ls103">rn<span class="ff12 lsed ws4ed"> the </span></span>m<span class="ff12 lsdc">ocked </span></div><div class="t m0 x119 h14 yc23 ff13 fs7 fcb sc0 ls6 ws0">r<span class="ff12 ls117">espo</span>n<span class="ff12 lsee ws30e">se with the expected </span></div><div class="t m0 x119 h14 yc24 ff12 fs7 fcb sc0 ls102 ws3cd">test tax <span class="ff13 ls6 ws0">r<span class="ff12 lsd6">ate.</span></span></div></div><div class="c x24 yc25 w52 hb9"><div class="t m0 x32 h14 yc26 ff12 fs7 fcb sc0 ls170 ws0">Asse<span class="ff13 ls6">r</span><span class="lsda ws676">ts that the add_sales_tax </span><span class="ff13 ls6">m</span><span class="lsdc">ethod </span></div><div class="t m0 x32 h14 yc27 ff12 fs7 fcb sc0 lsde ws3cf">calculates the <span class="ff13 ls6 ws0">n</span><span class="lsee ws2cf">ew value f<span class="ff13 ls6 ws0">r<span class="ff12">o</span>m</span><span class="ls105 ws325"> the tax </span></span></div><div class="t m0 x32 h14 yc28 ff13 fs7 fcb sc0 ls6 ws0">r<span class="ff12 ls10f">ate </span>r<span class="ff12 ls105">etu</span><span class="ls123">rn<span class="ff12 lsde ws3cf">ed by the API</span></span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
