<div id="pfe8" class="pf w0 h0" data-page-no="e8"><div class="pc pce8 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgf0.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">208</div><div class="t m0 x3 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xe2 h2c y1d0 ffb fs19 fcb sc0 lsf6 ws0">HAPTER</div><div class="t m0 x101 h2b y1cf ffb fs18 fcb sc0 ls1bb ws730"> 11</div><div class="t m0 xc h2d y80 ffa fs7 fcb sc0 ls6 ws0">Onward and upward</div><div class="t m0 x42 h26 y1e4 ffc fs15 fc2 sc0 lsfa ws2fc">1<span class="_ _0"></span>1<span class="_ _0"></span>.<span class="_ _0"></span>3<span class="_ _0"></span>.<span class="_ _0"></span>2<span class="_ _19"> </span>Addressing application<span class="_ _e"></span> <span class="_ _0"></span>state</div><div class="t m0 x44 h15 y140 ff4 fsb fc3 sc0 ls38 ws30c">A big question in distributed systems is how <span class="ls71 ws1c0">to handle a part of the system crashi<span class="_ _0"></span>ng.</span></div><div class="t m0 x44 h15 y141 ff4 fsb fc3 sc0 ls3b ws9a6">You may be able to live without some piec<span class="_ _e"></span><span class="ls3d ws476">es of the system, carrying on without the</span></div><div class="t m0 x44 h15 y142 ff4 fsb fc3 sc0 ls1c ws400">data they provide. Other pieces of the syst<span class="ls34 ws2c6">em may be necessary but not time-sensitive,</span></div><div class="t m0 x44 h15 y143 ff4 fsb fc3 sc0 ls3a ws26d">so requests to them while they’re down can be stored and deferred unt<span class="_ _e"></span>il they’re back</div><div class="t m0 x44 h15 y144 ff4 fsb fc3 sc0 ls30 wsef">up. Remaining pieces of the sy<span class="ls48 ws31e">stem are critical to operations—<span class="_ _e"></span>the system comes to a</span></div><div class="t m0 x44 h15 y145 ff4 fsb fc3 sc0 ls7a ws2c3">halt withou<span class="_ _0"></span>t them. These are <span class="ff3 ls1e ws16">single points of fai<span class="_ _0"></span>lure<span class="ff4 ls6 ws0">.</span></span></div><div class="t m0 x32 h15 y146 ff4 fsb fc3 sc0 ls20 wsac"> Distributed systems ar<span class="ls3a wsb1">e designed to minimize the sing<span class="ls3b ws578">le points of failure, favoring</span></span></div><div class="t m0 x44 h15 y24e ff3 fsb fc3 sc0 ls30 ws32e">graceful degradation<span class="ff4 ls7a ws9a7">—carrying on without <span class="_ _0"></span>a <span class="ls50 ws9a8">particular action or <span class="ls44 wseb">information. Tools like</span></span></span></div><div class="t m0 x44 h15 yb6 ff4 fsb fc3 sc0 ls20 ws485">Kubernetes (<span class="fcc ls3b ws0">https://kubernetes.io<span class="_ _e"></span>/</span><span class="ls1c ws9a9">) augment the approach to processing failure</span></div><div class="t m0 x44 h15 y8b ff4 fsb fc3 sc0 ls31 ws0">through <span class="_ _f"></span><span class="ff3 ls1e ws2a1">eventual consistency</span><span class="ls48 ws364">, which enables you to define the state you want for your</span></div><div class="t m0 x44 h15 y26c ff4 fsb fc3 sc0 ls71 ws160">system, providing a guarantee that the system<span class="ls7d ws1b5"> will eventually re<span class="_ _e"></span>ach the defined state.</span></div><div class="t m0 x44 h15 y26d ff4 fsb fc3 sc0 ls2f ws23">Pairing graceful degradation with eventual <span class="ls34 ws22">consistency leads to malleable systems that</span></div><div class="t m0 x44 h15 y26e ff4 fsb fc3 sc0 ls34 ws25">go down less often.</div><div class="t m0 x32 h15 y14d ff4 fsb fc3 sc0 ls38 ws472"> Although distributed syste<span class="ls34 ws4c6">ms aren’t new, there have been many recent develop-</span></div><div class="t m0 x44 h15 y14e ff4 fsb fc3 sc0 ls2d wsa1">ments in tooling and philosophy. Kubernet<span class="ls5f ws9aa">es and the ecosystem around it can cer-</span></div><div class="t m0 x44 h15 y417 ff4 fsb fc3 sc0 ls31 ws453">tainly be applied to small systems as you <span class="ls1e ws247">learn, but it shines<span class="ls3e ws9ab"> on larger, complex</span></span></div><div class="t m0 x44 h15 y418 ff4 fsb fc3 sc0 ls3a ws1c6">systems. You may want to start with the principles and techniques and then get some</div><div class="t m0 x44 h15 y18ca ff4 fsb fc3 sc0 ls1f ws14">practice building a few distributed syste<span class="_ _0"></span><span class="ls2d ws1d">ms before moving into<span class="ls20 ws51"> specialized tools. </span></span></div><div class="t m0 x42 h26 y18cb ffc fs15 fc2 sc0 lsad ws1be">1<span class="_ _0"></span>1<span class="_ _0"></span>.<span class="_ _0"></span>3<span class="_ _1d"></span>.3<span class="_ _19"> </span>Terms to start with</div><div class="t m0 x44 h15 yf3 ff4 fsb fc3 sc0 ls47 ws54">You can begin your<span class="_ _e"></span> research into distri<span class="ls31 ws25">buted systems with the <span class="_ _e"></span>following terms:</span></div><div class="t m0 x86 h29 y18cc ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y1a9 ff4 fsb fc3 sc0 ls20 ws17">Distributed systems</div><div class="t m0 x87 h15 y12b ff4 fsb fc3 sc0 ls31 ws58">–<span class="_ _11b"> </span>Fault tolerance</div><div class="t m0 x87 h15 y9c ff4 fsb fc3 sc0 ls2d ws31">–<span class="_ _11b"> </span>Eventual consistency</div><div class="t m0 x87 h15 y742 ff4 fsb fc3 sc0 ls42 ws32">–<span class="_ _11b"> </span>Desired state</div><div class="t m0 x87 h15 ycf ff4 fsb fc3 sc0 ls1f ws0">–<span class="_ _11b"> </span>Concurrency</div><div class="t m0 x87 h15 y5c ff4 fsb fc3 sc0 ls42 ws32">–<span class="_ _11b"> </span>Message queueing</div><div class="t m0 x42 h1f y18cd ffc fs13 fc2 sc0 ls12c ws34e">1<span class="_ _1d"></span>1.<span class="_ _1d"></span>4<span class="_ _12"> </span>Take a Python deep dive</div><div class="t m0 x44 h15 y19d ff4 fsb fc3 sc0 ls3d ws3f6">This may seem obvious, but another area yo<span class="_ _e"></span><span class="ls34 ws9d">u can keep growing in is Python. Although</span></div><div class="t m0 x44 h15 y60 ff4 fsb fc3 sc0 ls42 ws19d">this book used Python in its e<span class="_ _e"></span>xamples to <span class="ls1c ws151">convey ideas about software design, there’s</span></div><div class="t m0 x44 h15 y61 ff4 fsb fc3 sc0 ls42 ws32">much to learn about the features,<span class="_ _e"></span> synt<span class="ls1f ws14">ax, and power of the Python lang<span class="_ _0"></span>uage.</span></div><div class="t m0 x42 h26 y5ad ffc fs15 fc2 sc0 ls21b ws907">11.4.1<span class="_ _fc"> </span>P<span class="_ _e"></span>yt<span class="_ _e"></span>h<span class="_ _e"></span>on<span class="_ _e"></span> c<span class="_ _e"></span>o<span class="_ _e"></span>de<span class="_ _e"></span> s<span class="_ _e"></span>ty<span class="_ _e"></span>l<span class="_ _e"></span>e</div><div class="t m0 x44 h15 y19e ff4 fsb fc3 sc0 ls3a ws23f">As you work more in Python, you’ll eventua<span class="ls5e ws3c9">lly get a sense for the code formatting you</span></div><div class="t m0 x44 h15 y65 ff4 fsb fc3 sc0 ls1e ws145">like. You’ll write your code in that style beca<span class="ls20 ws478">use it will be easier for you to read later</span></div><div class="t m0 x44 h15 y66 ff4 fsb fc3 sc0 ls2f ws5db">on. But when someone else who’s been follo<span class="ls44 wsd1">wing their own style <span class="ls4b ws9ac">reads your code, they</span></span></div><div class="t m0 x44 h15 y5ae ff4 fsb fc3 sc0 ls51 ws1bb">might have a hard time understanding it. PEP 8, the <span class="_ _0"></span>Python Enhancement Proposal</div><div class="t m0 x44 h15 y5af ff4 fsb fc3 sc0 ls71 ws160">for a Python style guide, suggests a standard<span class="ws74"> style for Python code formatting so that</span></div><a class="l" href="https://kubernetes.io/"><div class="d m2" style="border-style:none;position:absolute;left:152.280000px;bottom:480.518000px;width:101.100000px;height:11.220000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
