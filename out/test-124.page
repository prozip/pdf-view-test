<div id="pf7c" class="pf w0 h0" data-page-no="7c"><div class="pc pc7c w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg7c.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">100</div><div class="t m0 xbe h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xa8 h2c y1d0 ffb fs19 fcb sc0 ls185 ws0">HAPTER</div><div class="t m0 x93 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 5</div><div class="t m0 x5d h2d y80 ffa fs7 fcb sc0 ls6 ws0">Testing your software</div><div class="t m0 x44 h26 y1e4 ffc fs15 fc2 sc0 ls177 ws57f">It’s a mindset<span class="_ _a4"></span>5<span class="_ _0"></span>.<span class="_ _0"></span>7<span class="_ _0"></span>.<span class="_ _0"></span>1</div><div class="t m0 x44 h15 y82 ff4 fsb fc3 sc0 ls48 ws39">For me, the real <span class="_ _e"></span>benefit of TDD is the mindset it puts me in. <span class="_ _e"></span>The stereotype of a qual-</div><div class="t m0 x44 h15 ycc2 ff4 fsb fc3 sc0 ls20 ws9b">ity assurance engineer is that they can alwa<span class="ls3a wsa7">ys find something in your code to break.</span></div><div class="t m0 x44 h15 ycc3 ff4 fsb fc3 sc0 ls6 ws660">This is gener<span class="_ _e"></span>ally said with some disdain<span class="_ _e"></span>, <span class="ls42 ws206">but I think it’s remar<span class="_ _0"></span>kable. Enumerating all</span></div><div class="t m0 x44 h15 ycc4 ff4 fsb fc3 sc0 ls1c ws10">the ways a system can blow up is b<span class="_ _e"></span>oth useful and impressive.</div><div class="t m0 x32 h15 ycc5 ff4 fsb fc3 sc0 ls30 wsef"> Netflix takes this to <span class="_ _e"></span>an extreme with th<span class="ls1c ws21d">e idea of chaos engineering. They actively</span></div><div class="t m0 x44 h15 ye1 ff4 fsb fc3 sc0 ls3d ws50f">think about the ways systems can fail, but th<span class="ls3a wsb1">ey also introduce so<span class="ls20 wsac">me am<span class="_ _e"></span>ount of unpre-</span></span></div><div class="t m0 x44 h15 ycc6 ff4 fsb fc3 sc0 ls5e ws14a">dictable failure.</div><div class="t m0 x38 h31 ycc7 ff4 fs1a fc3 sc0 ls6 ws0">2</div><div class="t m0 x17 h15 ycc6 ff4 fsb fc3 sc0 ls3d ws2c"> This leads to innovative ways of respo<span class="_ _e"></span>nding to failure.</div><div class="t m0 x32 h15 ycc8 ff4 fsb fc3 sc0 ls3b ws69b"> As you write tests, try to be a chaos e<span class="_ _e"></span>n<span class="ls48 ws69c">gineer. Deliberately try to think of the</span></div><div class="t m0 x44 h15 ycc9 ff4 fsb fc3 sc0 ls9e ws69d">extremes th<span class="_ _0"></span>at your code can e<span class="_ _0"></span>ndure, and throw<span class="_ _0"></span> them at it. Ther<span class="_ _0"></span>e’s a limit, o<span class="_ _0"></span>f course—</div><div class="t m0 x44 h15 ycca ff4 fsb fc3 sc0 ls30 ws394">it doesn’t make sense for all code to respon<span class="ls36 wsb2">d predictably to all inputs. But in Python,</span></div><div class="t m0 x44 h15 y4b ff4 fsb fc3 sc0 ls80 ws496">the exception system allows your code to re<span class="_ _e"></span><span class="ls1c ws23a">spond in a predictable way to rare or unex-</span></div><div class="t m0 x44 h15 yccb ff4 fsb fc3 sc0 ls81 ws148">pected situat<span class="_ _e"></span>ions. </div><div class="t m0 x44 h26 yccc ffc fs15 fc2 sc0 ls19f ws69e">It’s a philosophy<span class="_ _a5"></span>5<span class="_ _0"></span>.<span class="_ _0"></span>7<span class="_ _0"></span>.<span class="_ _0"></span>2</div><div class="t m0 x44 h15 yccd ff4 fsb fc3 sc0 ls3a ws4b7">TDD has a subculture around it, and the only <span class="ls34 ws13b">opinions stronger than <span class="_ _0"></span>how to do it cor-</span></div><div class="t m0 x44 h15 ycce ff4 fsb fc3 sc0 lsf8 ws69f">rectly are ho<span class="_ _e"></span>w <span class="ff3 ls20 ws0">not<span class="ff4 ls89"> t<span class="_ _1d"></span>o d<span class="_ _1d"></span>o<span class="_ _1d"></span> it<span class="_ _1d"></span> c<span class="_ _0"></span>o<span class="_ _1d"></span>rr<span class="_ _1d"></span>e<span class="_ _0"></span>c<span class="_ _1d"></span>tl<span class="_ _1d"></span>y<span class="_ _0"></span>.<span class="_ _1d"></span> It<span class="_ _1d"></span>’<span class="_ _1d"></span>s a<span class="_ _1d"></span>n<span class="_ _0"></span> a<span class="_ _0"></span>r<span class="_ _1d"></span>t<span class="_ _0"></span> f<span class="_ _0"></span>o<span class="_ _1d"></span>rm<span class="_ _1d"></span> t<span class="_ _0"></span>h<span class="_ _1d"></span>at<span class="_ _1d"></span> p<span class="_ _0"></span>r<span class="_ _1d"></span>od<span class="_ _1d"></span>u<span class="_ _0"></span>c<span class="_ _1d"></span>es<span class="_ _1d"></span> a<span class="_ _0"></span>s<span class="_ _1d"></span> ma<span class="_ _1d"></span>n<span class="_ _0"></span>y<span class="_ _1d"></span> st<span class="_ _1d"></span>y<span class="_ _1d"></span>le<span class="_ _1d"></span>s<span class="_ _0"></span> a<span class="_ _1d"></span>nd</span></span></div><div class="t m0 x44 h15 yccf ff4 fsb fc3 sc0 ls34 ws9d">critics as any other movement. I’ve found it<span class="ls2f wsf3"> useful to learn how different teams <span class="_ _e"></span>handle</span></div><div class="t m0 x44 h15 y125 ff4 fsb fc3 sc0 ls34 wsbe">the testing aspects of their process; once yo<span class="ls42 ws206">u do this, you can identify the pieces you</span></div><div class="t m0 x44 h15 ycd0 ff4 fsb fc3 sc0 ls20 ws51">like and incorporate them into yo<span class="_ _e"></span>ur own work.</div><div class="t m0 x32 h15 ycd1 ff4 fsb fc3 sc0 ls34 ws469"> Some TDD literature advocates making su<span class="ls48 ws4a5">re <span class="_ _e"></span>every line of your code is covered by</span></div><div class="t m0 x44 h15 ycd2 ff4 fsb fc3 sc0 ls104 ws0">t<span class="_ _0"></span>e<span class="_ _1d"></span>st<span class="_ _1d"></span>s.<span class="_ _1d"></span> Al<span class="_ _1d"></span>th<span class="_ _1d"></span>o<span class="_ _0"></span>u<span class="_ _0"></span>g<span class="_ _0"></span>h<span class="_ _0"></span> i<span class="_ _1d"></span>t’<span class="_ _1d"></span>s g<span class="_ _1d"></span>oo<span class="_ _1d"></span>d t<span class="_ _1d"></span>o h<span class="_ _1d"></span>av<span class="_ _1d"></span>e<span class="_ _0"></span> s<span class="_ _0"></span>t<span class="_ _0"></span>r<span class="_ _1d"></span>on<span class="_ _1d"></span>g c<span class="_ _1d"></span>o<span class="ls44 ws3ac">verage of the di<span class="_ _0"></span>fferent cases your code can</span></div><div class="t m0 x44 h15 ycd3 ff4 fsb fc3 sc0 ls36 ws6a">handle, increasing the covera<span class="ws43">ge beyond a certain point can <span class="_ _0"></span>have diminishing returns.</span></div><div class="t m0 x44 h15 y1a9 ff4 fsb fc3 sc0 ls71 ws2d4">Sometimes covering those last few lines with your tests means introducing tighter <span class="_ _e"></span>cou-</div><div class="t m0 x44 h15 ycd4 ff4 fsb fc3 sc0 ls47 ws38">pling between the tests and the implem<span class="ls30 ws36">entation w<span class="_ _e"></span>ith an integration test.</span></div><div class="t m0 x32 h15 ycd5 ff4 fsb fc3 sc0 ls42 ws32"> If you find that testing some<span class="ls20 ws51"> aspect of a function’s beha<span class="ls6c ws6f">vior is awkward or<span class="_ _0"></span> difficult,</span></span></div><div class="t m0 x44 h15 ycd6 ff4 fsb fc3 sc0 ls3d ws357">try to determine if it’s <span class="_ _e"></span>because the code’s <span class="ls2d ws495">concerns aren’t well separated or if it’s</span></div><div class="t m0 x44 h15 ycd7 ff4 fsb fc3 sc0 ls44 wseb">inherently awkward to <span class="ls42 ws27b">test. If awkwardness <span class="_ _0"></span><span class="ff3 ls3e ws0">must<span class="ff4 ls3d ws117"> be incorporated, it’s be<span class="_ _e"></span>tter for it to be</span></span></span></div><div class="t m0 x44 h15 y292 ff4 fsb fc3 sc0 ls5e ws6a0">in the tests than the real code. Don’t<span class="_ _e"></span> refactor code <span class="ff3 ls6b ws0">only</span><span class="ls38 ws9e"> to make testing easier or cover-</span></div><div class="t m0 x44 h15 ycd8 ff4 fsb fc3 sc0 ls42 ws32">age stronger—do it to <span class="ws28">make testing easier <span class="_ _e"></span><span class="ff3 ls80 ws0">and</span><span class="ls30 ws36"> to make the code more coherent. </span></span></div><div class="t m0 x44 h1f ycd9 ffc fs13 fc2 sc0 lsa9 ws0">Summary</div><div class="t m0 x86 h29 ycda ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 ycdb ff4 fsb fc3 sc0 ls1a0 ws6a1">Functional tests make sure <span class="ls1a1 ws6a2">code produces the expected <span class="ls1a2 ws6a3">output from a given input.</span></span></div><div class="t m0 x86 h29 ycdc ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 ycdd ff4 fsb fc3 sc0 ls2d ws301">Testing saves you time in the long run by<span class="ls2e ws4a3"> catch<span class="_ _0"></span>ing bugs and making refactoring</span></div><div class="t m0 x87 h15 y1c2 ff4 fsb fc3 sc0 ls80 wsff">code easier.</div><div class="t m0 x86 h29 ycde ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 ycdf ff4 fsb fc3 sc0 ls1a3 ws6a4">Manual testing isn’t scalable and should <span class="ls6d ws6a5">be used to supplement automate<span class="_ _0"></span>d testing.</span></div><div class="t m0 x86 h29 yce0 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y89d ff4 fsb fc3 sc0 ls1f ws45">Unittest and pytest are two popular unit and integration testing frameworks for</div><div class="t m0 x87 h15 yce1 ff4 fsb fc3 sc0 ls48 ws0">Python.</div><div class="t m0 x86 h29 yce2 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 yce3 ff4 fsb fc3 sc0 lsae ws214">Test-driven devel<span class="_ _0"></span>opment puts the tests fi<span class="_ _0"></span>rst, guiding you to a wo<span class="_ _0"></span>rking imple-</div><div class="t m0 x87 h15 yce4 ff4 fsb fc3 sc0 ls20 ws51">mentation based on the requirem<span class="_ _e"></span>ents.</div><div class="t m0 x42 h32 yce5 ff4 fs1b fcd sc0 ls6 ws0">2</div><div class="t m0 x43 h33 y981 ff4 fs17 fcd sc0 ls6 ws0">To <span class="_ _e"></span>learn <span class="_ _f"></span>more <span class="_ _e"></span>abou<span class="_ _e"></span>t <span class="_ _e"></span>Netflix’s <span class="_ _e"></span>a<span class="_ _e"></span>dvances <span class="_ _e"></span>in <span class="_ _f"></span>the <span class="_ _e"></span>area <span class="_ _e"></span>of</div><div class="t m3 x0 h34 y981 ff8 fs17 fcd sc0 ls6 ws0"> </div><div class="t m0 x6b h33 y981 ff4 fs17 fcd sc0 ls6 ws0">chaos <span class="_ _e"></span>e<span class="_ _e"></span>ngineering, <span class="_ _e"></span>check<span class="_ _e"></span> <span class="_ _e"></span>out <span class="_ _e"></span>the<span class="_ _e"></span>ir <span class="_ _e"></span>collection <span class="_ _e"></span>of<span class="_ _e"></span> <span class="_ _e"></span>blog</div><div class="t m0 x43 h33 y211 ff4 fs17 fcd sc0 ls6 ws0">posts on the sub<span class="_ _e"></span>ject:</div><div class="t m3 x0 h34 y211 ff8 fs17 fcd sc0 ls6 ws0"> </div><div class="t m0 xd8 h33 y211 ff4 fs17 fcf sc0 ls6 ws0">https://med<span class="_ _e"></span>ium.com/netflix-techblog/<span class="_ _e"></span>tagged/chaos-engineerin<span class="_ _e"></span>g<span class="fcd">.</span></div><a class="l" href="https://medium.com/netflix-techblog/tagged/chaos-engineering"><div class="d m2" style="border-style:none;position:absolute;left:137.460000px;bottom:61.718000px;width:245.820000px;height:9.780000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
