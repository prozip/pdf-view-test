<div id="pf74" class="pf w0 h0" data-page-no="74"><div class="pc pc74 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg74.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">92</div><div class="t m0 xbe h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xa8 h2c y1d0 ffb fs19 fcb sc0 ls185 ws0">HAPTER</div><div class="t m0 x93 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 5</div><div class="t m0 x5d h2d y80 ffa fs7 fcb sc0 ls6 ws0">Testing your software</div><div class="t m0 x97 h3b y395 ffd fs18 fc3 sc0 lsb2 ws0">product<span class="_"> </span>=<span class="_"> </span>Product(&apos;shoes&apos;,<span class="_"> </span>&apos;S&apos;,<span class="_"> </span>&apos;blue&apos;)</div><div class="t m0 x97 h3b y397 ffd fs18 fc3 sc0 lsb2 ws0">cart.add_product(product)</div><div class="t m0 x97 h3b y40d ffd fs18 fc3 sc0 lsb2 ws0">cart.remove_product(product)</div><div class="t m0 x97 h3b y484 ffd fs18 fc3 sc0 lsb2 ws0">self.assertDictEqual({},<span class="_"> </span>cart.products)</div><div class="t m0 x44 h15 y340 ff4 fsb fc3 sc0 ls6 ws660">This test call<span class="_ _e"></span>s the cart’s </div><div class="t m5 x3 h24 ybc2 ffd fsc fc3 sc0 lsa0 ws0">__init__</div><div class="t m0 x63 h15 y340 ff4 fsb fc3 sc0 ls47 ws4c8"> method, the product’s </div><div class="t m5 x41 h24 ybc2 ffd fsc fc3 sc0 lsa0 ws0">generate_sku</div><div class="t m0 x106 h15 y340 ff4 fsb fc3 sc0 ls34 wsb6"> method, and</div><div class="t m0 x44 h15 ya3b ff4 fsb fc3 sc0 ls3a ws254">the cart’s </div><div class="t m5 xd8 h24 ybe7 ffd fsc fc3 sc0 lsa0 ws0">add_product</div><div class="t m0 x92 h15 ya3b ff4 fsb fc3 sc0 ls195 ws344"> and </div><div class="t m5 x8d h24 ybe7 ffd fsc fc3 sc0 lsa0 ws0">remove_produ<span class="_ _e"></span>ct</div><div class="t m0 x2b h15 ya3b ff4 fsb fc3 sc0 ls6c ws661"> methods. Ther<span class="_ _0"></span>e’s a lot going on. As you</div><div class="t m0 x44 h15 yb74 ff4 fsb fc3 sc0 ls2f ws23">might expect, integration <span class="ls3d ws2c">tests are often quite a bi<span class="_ _e"></span><span class="ls42 ws32">t longer as a result. </span></span></div><div class="t m0 x42 h26 ybe8 ffc fs15 fc2 sc0 ls110 ws42b">5.4.5<span class="_ _5f"> </span>T<span class="_ _e"></span>e<span class="_ _e"></span>s<span class="_ _e"></span>t d<span class="_ _e"></span>o<span class="_ _e"></span>ub<span class="_ _e"></span>l<span class="_ _e"></span>e<span class="_ _e"></span>s</div><div class="t m0 x44 h15 ya0c ff4 fsb fc3 sc0 ls20 ws202">You’ll often have to write tests for code that interacts with another system, whether it’s</div><div class="t m0 x44 h15 ybe9 ff4 fsb fc3 sc0 ls38 wsc5">a database or an API call. These calls might do<span class="ls31 wsb5"> destructive things to real data, so call-</span></div><div class="t m0 x44 h15 ybea ff4 fsb fc3 sc0 ls30 ws219">ing them for real when you run your tests might have bad conse<span class="_ _e"></span>quences. They may</div><div class="t m0 x44 h15 ybeb ff4 fsb fc3 sc0 ls34 ws10e">also be slow, with the effect<span class="ls20 ws43e"> being magnified if<span class="_ _e"></span> your test suite executes that area of</span></div><div class="t m0 x44 h15 ybe ff4 fsb fc3 sc0 ls42 ws8c">code multiple times. These ot<span class="ls30 ws37d">her systems may not even be un<span class="ls6f ws662">der your control.<span class="_ _e"></span> It often</span></span></div><div class="t m0 x44 h15 ybec ff4 fsb fc3 sc0 ls71 wsd4">makes sense to imitate them in<span class="ls80 ws409">stead of using the real thing<span class="_ _e"></span>.</span></div><div class="t m0 x32 h15 y259 ff4 fsb fc3 sc0 ls48 ws39"> There are several subtly diff<span class="_ _e"></span>erent ways to imitate these systems with <span class="_ _e"></span><span class="ff3 ls1c ws10">test doubles</span><span class="ls6 ws0">:</span></div><div class="t m0 x86 h29 ybed ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y276 ff3 fsb fc3 sc0 ls30 ws0">Faking<span class="_ _f"></span><span class="ff4 ls2d ws15b">—Using a system that behaves a lot like<span class="ls48 ws4e0"> the real one, but avoids expensive</span></span></div><div class="t m0 x87 h15 y3fd ff4 fsb fc3 sc0 ls1c ws10">or destructive actions</div><div class="t m0 x86 h29 ybee ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y34d ff3 fsb fc3 sc0 ls44 ws0">Stubbing<span class="_ _f"></span><span class="ff4 ls42 ws62b">—Using a predetermined value as a response instead of <span class="_ _e"></span>getting one</span></div><div class="t m0 x87 h15 y34e ff4 fsb fc3 sc0 ls42 ws1e0">from a live system</div><div class="t m0 x86 h29 ybef ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y19a ff3 fsb fc3 sc0 lsbc ws0">Mocking<span class="_ _f"></span><span class="ff4 ls71 ws2e0">—Using a system with the same interf<span class="ls2f ws467">ace as the real one, but that also</span></span></div><div class="t m0 x87 h15 y57 ff4 fsb fc3 sc0 ls1b ws40">records inter<span class="_ _e"></span>actions for later inspecti<span class="_ _e"></span>on and assertions</div><div class="t m0 x44 h15 ybf0 ff4 fsb fc3 sc0 ls70 ws663">Faking and stub<span class="_ _e"></span>bing in Python involve writi<span class="_ _e"></span>ng up your own imitation<span class="_ _e"></span>s as functions or</div><div class="t m0 x44 h15 ybf1 ff4 fsb fc3 sc0 ls1f ws4a0">classes and telling your code to use them <span class="_ _0"></span><span class="ls3a ws664">during test execution. Mocking, on the</span></div><div class="t m0 x44 h15 y5ed ff4 fsb fc3 sc0 ls31 ws58">other hand, is most commonly done<span class="ls71 ws83"> using the unittest.mock module.</span></div><div class="t m0 x32 h15 ybf2 ff4 fsb fc3 sc0 ls3e ws162"> Suppose your code calls an API endpoin<span class="ls1b ws665">t to get some tax inform<span class="_ _e"></span>ation for your</span></div><div class="t m0 x44 h15 ybf3 ff4 fsb fc3 sc0 ls4e ws666">product sales. You don’t w<span class="_ _e"></span>ant to really use this endpoint in your test be<span class="_ _e"></span>cause you’ve</div><div class="t m0 x44 h15 ybf4 ff4 fsb fc3 sc0 ls34 ws11f">seen it take a few seconds to respond. On <span class="ls36 ws25d">top of that, it returns <span class="_ _0"></span>dynamic data, so you</span></div><div class="t m0 x44 h15 y160 ff4 fsb fc3 sc0 ls44 ws15c">can’t be sure what value you sh<span class="_ _0"></span><span class="ls34 ws9d">ould make assertions about in<span class="lsac ws667"> the test. If the code loo<span class="_ _0"></span>ks</span></span></div><div class="t m0 x44 h15 y161 ff4 fsb fc3 sc0 ls6d ws3e7">like this:</div><div class="t m0 x44 h3b ybf5 ffd fs18 fc3 sc0 lsb2 ws0">from<span class="_"> </span>urllib.request<span class="_"> </span>import<span class="_"> </span>urlopen</div><div class="t m0 x44 h3b ybf6 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>add_sales_tax(original_amount,<span class="_"> </span>country,<span class="_"> </span>region):</div><div class="t m0 xae h3b ybf7 ffd fs18 fc3 sc0 lsb2 ws0">sales_tax_rate<span class="_"> </span>=</div><div class="t m0 x44 h51 ybf8 ff9 fs15 fc9 sc0 ls11f ws0">➥ </div><div class="t m0 x32 h3b ybf9 ffd fs18 fc3 sc0 lsb2 ws0">urlopen(f&apos;https://tax-api.com/{country}/{region}&apos;).read().decode()</div><div class="t m0 xae h3b ybfa ffd fs18 fc1 sc0 lsb2 ws0">return<span class="_"> </span>original_amount<span class="_"> </span>*<span class="_"> </span>float(sales_tax_rate)</div><div class="c xee ybfb w4e hb5"><div class="t m0 x128 h14 y2ee ff12 fs7 fcb sc0 ls6 ws0">C<span class="ff13">r</span><span class="ls10d ws35b">eates so</span><span class="ff13">m</span><span class="ws317">e s</span><span class="ff13">m</span><span class="lsff ws38b">all blue shoes</span></div></div><div class="c x10e ybfc w4e hb5"><div class="t m0 x128 h14 ybfd ff12 fs7 fcb sc0 lsfd ws310">Adds shoes to the ca<span class="ff13 ls6 ws0">r<span class="ff12">t</span></span></div></div><div class="c x119 ybfe w48 h79"><div class="t m0 x124 h14 ybff ff12 fs7 fcb sc0 ls100 ws0">Re<span class="ff13 ls6">m</span><span class="ls102">oves</span></div><div class="t m0 xb7 h14 yc00 ff12 fs7 fcb sc0 ls10a ws470">shoes f<span class="ff13 ls6 ws0">r<span class="ff12">o</span>m</span></div><div class="t m0 xfb h14 yc01 ff12 fs7 fcb sc0 lsd2 ws38c">the ca<span class="ff13 ls6 ws0">r<span class="ff12">t</span></span></div></div><div class="c x6e yc02 w4e hb5"><div class="t m0 x128 h14 yc03 ff12 fs7 fcb sc0 lsd5 ws2a6">The ca<span class="ff13 ls6 ws0">r</span><span class="lsd2 ws38c">t should be e<span class="ff13 ls6 ws0">m</span><span class="ws0">pty!</span></span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
