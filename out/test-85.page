<div id="pf55" class="pf w0 h0" data-page-no="55"><div class="pc pc55 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg55.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">61<span class="_ _69"></span><span class="ffa">Hurtling through time and space</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls30 ws1ef">As the list grows, the amount <span class="_ _e"></span>of time the <span class="lsab ws1aa">computer has<span class="_ _0"></span> to spend g<span class="_ _0"></span>rows proporti<span class="_ _0"></span>onally.</span></div><div class="t m0 x35 h15 y839 ff4 fsb fc3 sc0 lsbc ws447">Summing 1,00<span class="_ _e"></span>0 integers takes <span class="ff3 ls30 ws0">about</span><span class="ls6b ws527"> half as long as summing 2,000 i<span class="_ _0"></span>ntegers. For some</span></div><div class="t m0 x35 h15 y83a ff4 fsb fc3 sc0 ls42 ws528">number of items, <span class="ff3 ls6 ws0">n</span><span class="ls1c ws529">, these kinds of activities are linear with <span class="ff3 ls6 ws0">n</span><span class="ls48 ws52a"> or,<span class="_ _e"></span> in big O notation, <span class="ff3 ls6 ws0">O<span class="ff4">(</span>n<span class="ff4 ls15f">).</span></span></span></span></div><div class="t m0 x83 h15 y83b ff4 fsb fc3 sc0 ls160 ws0"> Yo<span class="_ _0"></span>u c<span class="_ _0"></span>an<span class="_ _0"></span> sp<span class="_ _0"></span>ot<span class="_ _0"></span> co<span class="_ _0"></span>de<span class="_ _0"></span> th<span class="_ _0"></span>at<span class="_ _0"></span>’s<span class="_ _0"></span> li<span class="_ _0"></span>ke<span class="_ _0"></span>ly<span class="_ _0"></span> to<span class="_ _1d"></span> be <span class="ff3 ls6">O<span class="ff4">(</span>n</span><span class="ls31 wse8">) in Python by finding </span></div><div class="t m5 x78 h24 y83c ffd fsc fc3 sc0 lsa0 ws0">for</div><div class="t m0 xd4 h15 y83d ff4 fsb fc3 sc0 ls2f ws338"> loops. A single</div><div class="t m0 x35 h15 y83e ff4 fsb fc3 sc0 ls6f ws149">loop over a li<span class="_ _e"></span>st, set, or other sequen<span class="_ _e"></span>ce is likely to be lin<span class="_ _e"></span>ear:</div><div class="t m0 x35 h3b y5bc ffd fs18 fc3 sc0 lsb2 ws0">names<span class="_"> </span>=<span class="_"> </span>[&apos;Aliya&apos;,<span class="_"> </span>&apos;Beth&apos;,<span class="_"> </span>&apos;David&apos;,<span class="_"> </span>&apos;Kareem&apos;]</div><div class="t m0 x35 h3b y50e ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>name<span class="_"> </span>in<span class="_"> </span>names:</div><div class="t m0 x87 h3b y510 ffd fs18 fc1 sc0 lsb2 ws0">print(name)</div><div class="t m0 x35 h15 y148 ff4 fsb fc3 sc0 ls6f ws52b">This remains true even if<span class="_ _e"></span> you perf<span class="ls38 ws26">orm multiple steps <span class="ws26a">inside the loop:</span></span></div><div class="t m0 x35 h3b y83f ffd fs18 fc3 sc0 lsb2 ws0">names<span class="_"> </span>=<span class="_"> </span>[&apos;Aliya&apos;,<span class="_"> </span>&apos;Beth&apos;,<span class="_"> </span>&apos;David&apos;,<span class="_"> </span>&apos;Kareem&apos;]</div><div class="t m0 x35 h3b y840 ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>name<span class="_"> </span>in<span class="_"> </span>names:</div><div class="t m0 x87 h3b y841 ffd fs18 fc3 sc0 lsb2 ws0">greeting<span class="_"> </span>=<span class="_"> </span>&apos;Hi,<span class="_"> </span>my<span class="_"> </span>name<span class="_"> </span>is&apos;</div><div class="t m0 x87 h3b y842 ffd fs18 fc1 sc0 lsb2 ws0">print(f&apos;{greeting}<span class="_"> </span>{name}&apos;)</div><div class="t m0 x35 h15 y843 ff4 fsb fc3 sc0 ls7d ws0">It <span class="ff3 ls6b">even</span><span class="ls2f ws23"> remains true if you loop over th<span class="ls3a ws28">e same list a set number of times:</span></span></div><div class="t m0 x35 h3b y844 ffd fs18 fc3 sc0 lsb2 ws0">names<span class="_"> </span>=<span class="_"> </span>[&apos;Aliya&apos;,<span class="_"> </span>&apos;Beth&apos;,<span class="_"> </span>&apos;David&apos;,<span class="_"> </span>&apos;Kareem&apos;]</div><div class="t m0 x35 h3b y845 ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>name<span class="_"> </span>in<span class="_"> </span>names:</div><div class="t m0 x87 h3b y846 ffd fs18 fc3 sc0 lsb2 ws0">print(f&apos;This<span class="_"> </span>is<span class="_"> </span>{name}!&apos;)</div><div class="t m0 x35 h3b y5c6 ffd fs18 fc3 sc0 lsb2 ws0">message<span class="_"> </span>=<span class="_"> </span>&apos;Let\&apos;s<span class="_"> </span>welcome<span class="_"> </span>&apos;</div><div class="t m0 x35 h3b y5c7 ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>name<span class="_"> </span>in<span class="_"> </span>names:</div><div class="t m0 x87 h3b y5c8 ffd fs18 fc3 sc0 lsb2 ws0">message<span class="_"> </span>+=<span class="_"> </span>f&apos;{name}<span class="_"> </span>&apos;</div><div class="t m0 x35 h3b y5c9 ffd fs18 fc1 sc0 lsb2 ws0">print(message)</div><div class="t m0 x35 h15 y373 ff4 fsb fc3 sc0 ls9d ws0">A<span class="_ _1c"></span>l<span class="_ _1c"></span>t<span class="_ _1c"></span>h<span class="_ _1c"></span>o<span class="_ _1d"></span>u<span class="_ _1c"></span>g<span class="_ _1c"></span>h<span class="_ _1c"></span> y<span class="_ _1c"></span>o<span class="_ _1d"></span>u<span class="_ _1c"></span>’<span class="_ _1c"></span>r<span class="_ _1c"></span>e<span class="_ _1c"></span> l<span class="_ _1d"></span>o<span class="_ _1c"></span>o<span class="_ _1c"></span>p<span class="_ _1c"></span>i<span class="_ _1c"></span>n<span class="_ _1d"></span>g<span class="_ _1c"></span> o<span class="_ _1c"></span>v<span class="_ _1c"></span>e<span class="_ _1c"></span>r<span class="_ _1d"></span> t<span class="_ _1c"></span>h<span class="_ _1c"></span>e<span class="_ _1c"></span> l<span class="_ _1c"></span>i<span class="_ _1d"></span>s<span class="_ _1c"></span>t<span class="_ _1c"></span> o<span class="_ _1c"></span>f<span class="_ _1c"></span> n<span class="_ _1d"></span>a<span class="_ _1c"></span><span class="ls5e ws295">mes twice, think about it in te<span class="_ _e"></span>rms of the</span></div><div class="t m0 x35 h15 y847 ff4 fsb fc3 sc0 ls3d ws13d">equation for a line again. The first lo<span class="_ _e"></span>op takes some time, <span class="ff3 ls6 ws0">f</span><span class="ls30 ws52c">, per item, and the second</span></div><div class="t m0 x35 h15 y848 ff4 fsb fc3 sc0 ls71 ws15e">loop takes some time, <span class="ff3 ls6 ws0">g</span><span class="ls42 ws2f3">, per item. The line equat<span class="_ _e"></span>ion would be something like <span class="ff3 ls6 ws0">y</span><span class="lsb1 ws51d"> = <span class="ff3 ls50 ws0">fx<span class="ff4 lsbf"> +</span></span></span></span></div><div class="t m0 x35 h15 y849 ff3 fsb fc3 sc0 ls79 ws0">gx<span class="ff4 lsb1 ws1d3"> + </span><span class="ls6">b<span class="ff4 ls38 ws1f4">, which is equivalent to </span>y<span class="ff4 lsb1 ws1d3"> = (</span>f<span class="ff4 lsb0 ws4c1"> + </span>g<span class="ff4">)</span>x<span class="ff4 lsb1 ws1d3"> + </span>b<span class="ff4 ls5e ws14a">. It’s still a line, even if it’s a steeper o<span class="_ _e"></span>ne.</span></span></div><div class="t m0 x83 h15 y84a ff4 fsb fc3 sc0 ls44 ws53"> This is where the “asymptotic” part of asymptotic analysis comes in. Even though a</div><div class="t m0 x35 h15 y420 ff4 fsb fc3 sc0 ls42 ws37e">particular activity may be <span class="ff3 ls62 ws0">steeply</span><span class="ls51 ws13e"> linear, other, more complex operations can still out-</span></div><div class="t m0 x35 h15 y84b ff4 fsb fc3 sc0 ls34 ws22">pace it if the inputs are sufficient<span class="ls38 ws26">ly many, as shown in figure 4.3. </span></div><div class="c x35 y84c w34 h86"><div class="t ma xc7 h36 y84d ff11 fs1c fc12 sc0 ls6 ws522">Time to process</div><div class="t m0 xe0 h36 y84e ff11 fs1c fc12 sc0 ls6 ws0">Number of inputs to process</div><div class="t m0 x79 h37 y84f ff12 fs1d fc12 sc0 ls6 ws0">An <span class="ff19">0(n)</span> task with some overhead might</div><div class="t m0 x79 h37 y850 ff12 fs1d fc12 sc0 ls6 ws0">be slower than an <span class="ff19">0(n</span></div><div class="t m0 xd9 h87 y851 ff19 fs25 fc12 sc0 ls6 ws0">2</div><div class="t m0 x69 h37 y850 ff19 fs1d fc12 sc0 ls6 ws0">)<span class="ff12"> task with few</span></div><div class="t m0 x79 h37 y852 ff12 fs1d fc12 sc0 ls6 ws0">inputs, but given enough inputs, the <span class="ff19">0(n</span></div><div class="t m0 x12 h87 y853 ff19 fs25 fc12 sc0 ls6 ws0">2</div><div class="t m0 x40 h88 y852 ff19 fs1d fc12 sc0 ls6 ws0">)</div><div class="t m0 x79 h37 y854 ff12 fs1d fc12 sc0 ls6 ws0">task eventually gets even slower—always!</div></div><div class="c x35 y855 w2 h89"><div class="t m0 x2 h2b y856 ffb fs18 fcb sc0 ls29 ws37b">Higher-order complexity at large scales<span class="_ _6b"></span>Figure 4.3</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
