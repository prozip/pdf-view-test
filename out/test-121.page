<div id="pf79" class="pf w0 h0" data-page-no="79"><div class="pc pc79 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg79.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">97<span class="_ _2c"></span><span class="ffa">Testing with pytest</span></div><div class="t m0 x83 h15 y40 ff4 fsb fc3 sc0 ls3e ws2d"> Pytest produces more readable output <span class="_ _0"></span>by<span class="ls48 ws2be"> default, telling you about the system, the</span></div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls31 ws213">number of tests it finds, the <span class="ls38">result of individual tests, and a summary of the overall test</span></div><div class="t m0 x35 h15 y42 ff4 fsb fc3 sc0 ls1c ws0">results:</div><div class="t m0 x35 h3b y569 ffd fs18 fc3 sc0 lsb2 ws0">$<span class="_"> </span>pytest</div><div class="t m0 x35 h3b y485 ffd fs18 fc3 sc0 lsb2 ws0">==========<span class="_"> </span>test<span class="_"> </span>session<span class="_"> </span>starts<span class="_"> </span>==========</div><div class="t m0 x35 h3b y486 ffd fs18 fc3 sc0 lsb2 ws0">platform<span class="_"> </span>darwin<span class="_"> </span>--<span class="_"> </span>Python<span class="_"> </span>3.7.3,<span class="_"> </span>pytest-5.0.1,<span class="_"> </span>py-1.8.0,</div><div class="t m0 x35 h51 y10 ff9 fs15 fc9 sc0 ls11f ws0">➥ </div><div class="t m0 x83 h3b y487 ffd fs18 fc3 sc0 lsb2 ws0">pluggy-0.12.0</div><div class="t m0 x35 h3b y58f ffd fs18 fc3 sc0 lsb2 ws0">rootdir:<span class="_"> </span>/path/to/ecommerce/project</div><div class="t m0 x35 h3b y488 ffd fs18 fc3 sc0 lsb2 ws0">collected<span class="_"> </span>15<span class="_"> </span>items</div><div class="t m0 x35 h3b y591 ffd fs18 fc3 sc0 lsb2 ws0">test_cart.py<span class="_"> </span>............<span class="_ _21"> </span>[<span class="_"> </span>80%]</div><div class="t m0 x2a h3b y592 ffd fs18 fc3 sc0 lsb2 ws0">[<span class="_"> </span>93%]<span class="_ _a0"></span>test_product.py<span class="_"> </span>..</div><div class="t m0 x2a h3b yc49 ffd fs18 fc3 sc0 lsb2 ws0">[100%]<span class="_ _a0"></span>test_tax.py<span class="_"> </span>.</div><div class="t m0 x35 h3b y595 ffd fs18 fc3 sc0 lsb2 ws0">=======<span class="_"> </span>15<span class="_"> </span>passed<span class="_"> </span>in<span class="_"> </span>0.12<span class="_"> </span>seconds<span class="_"> </span>=======</div><div class="t m0 x19 h26 yc6b ffc fs15 fc2 sc0 ls19c ws686">5<span class="_ _0"></span>.<span class="_ _0"></span>5<span class="_ _0"></span>.<span class="_ _0"></span>1<span class="_ _11"> </span>Test organization with pyte<span class="_ _e"></span>st</div><div class="t m0 x35 h15 yeb ff4 fsb fc3 sc0 ls3a ws12e">Pytest does automatic discovery of your tests li<span class="ls4e ws2b2">ke unittest does. It will even discov<span class="_ _e"></span>er any</span></div><div class="t m0 x35 h15 y93 ff4 fsb fc3 sc0 ls1c ws101">unittest tests you have lying around. One key di<span class="ls48 ws687">fference is that proper<span class="ws688"> pytest test classes</span></span></div><div class="t m0 x35 h15 yc6c ff4 fsb fc3 sc0 ls1f ws689">are named </div><div class="t m5 x1c h24 yc6d ffd fsc fc3 sc0 lsa0 ws0">Test*</div><div class="t m0 x3a h15 yc6c ff4 fsb fc3 sc0 ls20 ws68a"> and don’t need to inherit from a base class (like </div><div class="t m5 x5c h24 yc6d ffd fsc fc3 sc0 lsa0 ws0">unittest.Test<span class="_ _e"></span>Case</div><div class="t m0 xb8 h15 yc6c ff4 fsb fc3 sc0 ls6 ws0">)</div><div class="t m0 x35 h15 yc6e ff4 fsb fc3 sc0 lsbc ws41f">to work.</div><div class="t m0 x83 h15 yc6f ff4 fsb fc3 sc0 ls2d ws31"> The command for running test<span class="ls2f ws23">s with pytest is simpler:</span></div><div class="t m0 x35 h3b yc70 ffd fs18 fc3 sc0 lsb2 ws0">pytest</div><div class="t m0 x35 h15 ycb ff4 fsb fc3 sc0 ls20 wsd8">Because pytest doesn’t require you to inherit <span class="_ _e"></span><span class="ls3a wse4">from a base class or use any special meth-</span></div><div class="t m0 x35 h15 y28f ff4 fsb fc3 sc0 ls34 ws4c6">ods, you don’t strictly need to organize your tests into classes. <span class="_ _0"></span>I still recommend it,</div><div class="t m0 x35 h15 y290 ff4 fsb fc3 sc0 ls21 ws2ff">though, because it<span class="_ _0"></span> remains a good organizati<span class="_ _0"></span>on<span class="ls5e ws274">al tool. Pytest will include the test class</span></div><div class="t m0 x35 h15 ybd1 ff4 fsb fc3 sc0 ls36 wsd6">name in failure output and the like, whic<span class="ls3d ws377">h can help you understand where the t<span class="_ _e"></span>ests</span></div><div class="t m0 x35 h15 y292 ff4 fsb fc3 sc0 ls48 ws68b">live and what they’re about. On the whole,<span class="ls2f ws3d4"> pytest tests can be organized similarly to</span></div><div class="t m0 x35 h15 y293 ff4 fsb fc3 sc0 ls4e ws1e3">those for unittest. </div><div class="t m0 x35 h26 yc71 ffc fs15 fc2 sc0 ls19c ws686">Converting unittest tests to pytest<span class="_ _a1"></span>5<span class="_ _0"></span>.<span class="_ _0"></span>5<span class="_ _0"></span>.<span class="_ _0"></span>2</div><div class="t m0 x35 h15 y98b ff4 fsb fc3 sc0 ls2c ws68c">Because pytest will di<span class="_ _0"></span>scover your existing <span class="_ _0"></span><span class="ls20 wsc7">unittest tests, you can incrementally convert</span></div><div class="t m0 x35 h15 y296 ff4 fsb fc3 sc0 ls42 ws3af">your tests to pytest as you wish (and <span class="ff3 ls50 ws0">if</span><span class="ls51 ws1bb"> you wish, I suppose). Fo<span class="ls35 ws30d">r the test suite<span class="_ _0"></span> you’ve</span></span></div><div class="t m0 x35 h15 y297 ff4 fsb fc3 sc0 ls4e ws1e3">written so far, the co<span class="_ _e"></span>nv<span class="ls70 ws7b">ersion looks lik<span class="_ _e"></span>e this:</span></div><div class="t m0 x8b h29 yc72 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 y102 ff4 fsb fc3 sc0 ls4e ws3e">Remove the unittest import from test_product.<span class="_ _e"></span>py.</div><div class="t m0 x8b h29 yc73 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 yc74 ff4 fsb fc3 sc0 ls35 ws68d">Rename the </div><div class="t m5 xd6 h24 yc75 ffd fsc fc3 sc0 lsa0 ws0">ProductTest<span class="_ _e"></span>Case</div><div class="t m0 x6b h15 yc74 ff4 fsb fc3 sc0 ls44 ws8e"> class to </div><div class="t m5 x51 h24 yc75 ffd fsc fc3 sc0 lsa0 ws0">TestProduct</div><div class="t m0 x58 h15 yc74 ff4 fsb fc3 sc0 ls31 ws20f"> and remove the inheri-</div><div class="t m0 x48 h15 yc76 ff4 fsb fc3 sc0 ls3a ws28">tance from </div><div class="t m5 x114 h24 yc77 ffd fsc fc3 sc0 lsa0 ws0">unittest.Tes<span class="_ _e"></span>tCase</div><div class="t m0 x13 h15 yc76 ff4 fsb fc3 sc0 ls6 ws0">.</div><div class="t m0 x8b h29 yc78 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 y43b ff4 fsb fc3 sc0 ls71 ws348">Replace any </div><div class="t m5 x1e h24 y73a ffd fsc fc3 sc0 lsa0 ws68e">self.assertEq<span class="_ _e"></span>ual(expected, actual)</div><div class="t m0 x71 h15 y43b ff4 fsb fc3 sc0 lsac ws68f"> with </div><div class="t m5 xb4 h24 y73a ffd fsc fc3 sc0 lsa0 ws68e">assert actual<span class="_ _e"></span> ==</div><div class="t m5 x48 h24 y73b ffd fsc fc3 sc0 lsa0 ws0">expected</div><div class="t m0 xa7 h15 y73c ff4 fsb fc3 sc0 ls6 ws0">.</div><div class="c x34 yc79 w53 h8c"><div class="t m0 xfb h14 yc7a ff12 fs7 fcb sc0 ls6 ws0">I<span class="ff13">n</span><span class="ls103">fo<span class="ff13">rm</span><span class="ls10d">atio</span></span><span class="ff13">n</span><span class="lsed ws5bd"> about the syste</span><span class="ff13">m</span></div></div><div class="c x1f yc7b w54 h56"><div class="t m0 x12e h14 y68d ff12 fs7 fcb sc0 ls113 ws0">The <span class="ff13 ls6">n<span class="ff12">u</span>m</span><span class="lsec">be<span class="ff13 ls6">r</span><span class="lse4 ws318"> of tests </span></span></div><div class="t m0 x12e h14 y68e ff12 fs7 fcb sc0 lsdc ws2ac">pytest discove<span class="ff13 ls6 ws0">r<span class="ff12">ed</span></span></div></div><div class="c x94 yc7c w55 hbb"><div class="t m0 x119 h14 yc7d ff12 fs7 fcb sc0 ls13c ws46f">The status of each test </div><div class="t m0 x119 h14 yc7e ff12 fs7 fcb sc0 ls6 ws0">f<span class="ff13">r</span>o<span class="ff13">m</span><span class="lsec ws4f0"> each </span><span class="ff13">m</span><span class="ls10c ws3d9">odule, with a</span><span class="ff13">n</span> </div><div class="t m0 x119 h14 yc7f ff12 fs7 fcb sc0 ls140 ws0">ove<span class="ff13 ls6">r</span><span class="lsd6 ws3da">all p</span><span class="ff13 ls6">r</span><span class="ls127">og<span class="ff13 ls6">r</span><span class="ls118 ws690">ess i</span><span class="ff13 ls6">n</span><span class="lsee">dicato<span class="ff13 ls6">r</span></span></span></div></div><div class="c x89 yc80 w10 h43"><div class="t m0 x119 h14 y2f2 ff12 fs7 fcb sc0 ls18d ws691">A su<span class="ff13 ls10e ws0">mm<span class="ff12 ls6">a<span class="ff13">r</span><span class="lsee ws30e">y of the full </span></span></span></div><div class="t m0 x119 h14 y2ee ff12 fs7 fcb sc0 lsee ws2cf">test suite <span class="ff13 ls6 ws0">r<span class="ff12">esults</span></span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
