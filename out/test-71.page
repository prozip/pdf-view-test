<div id="pf47" class="pf w0 h0" data-page-no="47"><div class="pc pc47 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg47.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">47<span class="_ _58"></span><span class="ffa">Encapsulation</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls3b ws1a1">See how the pieces get smaller from left to ri<span class="ls2c ws47a">ght? Trying to build something bi<span class="_ _0"></span>g in one</span></div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls63 ws47b">piece like the le<span class="_ _e"></span>ft side is like packing your<span class="_ _e"></span> whole house in a shipping con<span class="_ _e"></span>tainer. Build-</div><div class="t m0 x35 h15 y42 ff4 fsb fc3 sc0 ls6f ws47c">ing things<span class="_ _e"></span> like the right si<span class="_ _e"></span>de is like organizing <span class="_ _e"></span>each room of your hou<span class="_ _e"></span>se into small</div><div class="t m0 x35 h15 y43 ff4 fsb fc3 sc0 ls2d ws1d">boxes you can carry. Decomposition<span class="_ _0"></span> helps you handle big ideas in small <span class="_ _0"></span>increments. </div><div class="t m0 x19 h1f y6b1 ffc fs13 fc2 sc0 lsf9 ws0">3.2<span class="_ _21"> </span>E<span class="_ _e"></span>n<span class="_ _e"></span>c<span class="_ _e"></span>a<span class="_ _e"></span>p<span class="_ _e"></span>su<span class="_ _e"></span>l<span class="_ _e"></span>a<span class="_ _e"></span>t<span class="_ _e"></span>i<span class="_ _e"></span>on</div><div class="t m0 x35 h15 y46 ff3 fsb fc3 sc0 ls1b ws0">Encapsulation<span class="ff4 ls38 ws1f0"> is the basis for object-oriented <span class="_ _e"></span>pr<span class="ls34 ws1c5">ogramming. It takes decomposition</span></span></div><div class="t m0 x35 h15 ye3 ff4 fsb fc3 sc0 ls70 ws47d">one step further<span class="_ _e"></span>: whereas decomposition gr<span class="_ _e"></span>oups related code into fun<span class="_ _e"></span>ctions, encapsu-</div><div class="t m0 x35 h15 y48 ff4 fsb fc3 sc0 ls66 ws22f">lation gr<span class="_ _0"></span>oups related func<span class="_ _0"></span>tions and data i<span class="_ _0"></span>nto a larger co<span class="_ _0"></span>nstruct. This c<span class="_ _0"></span>onstruct acts as</div><div class="t m0 x35 h15 y49 ff4 fsb fc3 sc0 ls2c ws1c">a barrier (or capsule) to th<span class="_ _0"></span>e outside world.<span class="ls71 ws83"> What constructs are available in <span class="_ _0"></span>Python?</span></div><div class="t m0 x19 h26 y6b2 ffc fs15 fc2 sc0 ls142 ws47e">3<span class="_ _0"></span>.<span class="_ _0"></span>2<span class="_ _0"></span>.<span class="_ _0"></span>1<span class="_ _11"> </span>Encapsulation constructs in Python</div><div class="t m0 x35 h15 y14b ff4 fsb fc3 sc0 ls44 ws47f">Most often, encapsulation in <span class="_ _0"></span>Python is done<span class="ls34 ws2c6"> with a class. In classes, functions become</span></div><div class="t m0 x35 h15 y4d ff3 fsb fc3 sc0 ls35 ws0">methods<span class="ff4 ls34 ws469">; methods are similar to functions, but <span class="ls51 ws1e7">they are contained in a class and often</span></span></div><div class="t m0 x35 h15 y4e ff4 fsb fc3 sc0 lsc5 ws3ab">receive an input<span class="_ _0"></span> that is either an inst<span class="_ _0"></span><span class="ls80 wsff">ance of the class or<span class="_ _e"></span><span class="ls34 ws22"> the class itself.</span></span></div><div class="t m0 x83 h15 y4f ff4 fsb fc3 sc0 lsac ws92"> In Python, <span class="ff3 ls25 ws0">mo<span class="_ _0"></span>dules<span class="ff4 ls1c ws21"> are also a form of encapsulation. Modules are even higher-level</span></span></div><div class="t m0 x35 h15 y2b2 ff4 fsb fc3 sc0 ls42 ws2a0">than classes; they group multiple related classes and functions <span class="ls3d ws97">together. For example,</span></div><div class="t m0 x35 h15 yed ff4 fsb fc3 sc0 ls2f ws480">a module dealing with HTTP interactions<span class="ls3a ws481"> could contain classes for requests and</span></div><div class="t m0 x35 h15 y52 ff4 fsb fc3 sc0 ls31 ws15d">responses, as well as utility <span class="ls66 ws482">functions for pa<span class="_ _0"></span>rsing URLs. Mo<span class="ls36 ws93">st *.py files you encounter</span></span></div><div class="t m0 x35 h15 y53 ff4 fsb fc3 sc0 ls5e ws14a">would be considered module<span class="_ _e"></span>s.</div><div class="t m0 x83 h15 y54 ff4 fsb fc3 sc0 ls71 ws483"> The largest encapsulation available</div><div class="t m0 x35 h15 y199 ff4 fsb fc3 sc0 lsbc ws484">in Python is a <span class="ff3 ls3d ws0">package<span class="ff4 ws97">. Packages encap-</span></span></div><div class="t m0 x35 h15 y19a ff4 fsb fc3 sc0 ls1e ws16">sulate related modules into a directory</div><div class="t m0 x35 h15 y57 ff4 fsb fc3 sc0 ls20 ws485">structure. Packages are often distrib-</div><div class="t m0 x35 h15 y58 ff4 fsb fc3 sc0 ls3d ws486">uted on the Pytho<span class="_ _e"></span>n Package Index</div><div class="t m0 x35 h15 y59 ff4 fsb fc3 sc0 ls2d ws31">(PyPI) for others to install and reuse.</div><div class="t m0 x83 h15 y19b ff4 fsb fc3 sc0 ls70 ws47d"> Take a look at<span class="_ _e"></span> figure 3.5 and notice</div><div class="t m0 x35 h15 y19c ff4 fsb fc3 sc0 ls20 ws487">that the pieces of the shopping cart</div><div class="t m0 x35 h15 y5c ff4 fsb fc3 sc0 ls44 ws488">are decomposed into<span class="ls36 ws489"> distinct activi-</span></div><div class="t m0 x35 h15 y5d ff4 fsb fc3 sc0 ls20 ws48a">ties. They’re also isolated; they don’t</div><div class="t m0 x35 h15 y5e ff4 fsb fc3 sc0 ls81 ws48b">depend on each other to pe<span class="_ _e"></span>rform a</div><div class="t m0 x35 h15 y19d ff4 fsb fc3 sc0 ls3d ws48c">task. Any cooperation between activi-</div><div class="t m0 x35 h15 y60 ff4 fsb fc3 sc0 ls1c ws3e2">ties is coordinated at the higher shop-</div><div class="t m0 x35 h15 y61 ff4 fsb fc3 sc0 ls2d ws48d">ping-cart level. The shopping cart</div><div class="t m0 x35 h15 y62 ff4 fsb fc3 sc0 ls62 ws48e">itself is isolated <span class="ls36 ws6a">inside the e-commerce</span></div><div class="t m0 x35 h15 y63 ff4 fsb fc3 sc0 ls31 ws48f">application; any in<span class="ls71 ws1f1">formation it needs</span></div><div class="t m0 x35 h15 y19e ff4 fsb fc3 sc0 lsf8 ws490">will be passed in<span class="_ _e"></span>to it. You can think<span class="_ _e"></span> of</div><div class="t m0 x35 h15 y65 ff4 fsb fc3 sc0 ls51 wsfb">encapsulated code as having a castle</div><div class="t m0 x35 h15 y66 ff4 fsb fc3 sc0 ls1c ws491">wall around it, where the functions</div><div class="t m0 x35 h15 y6b3 ff4 fsb fc3 sc0 ls2d ws492">and methods are the drawbridge for</div><div class="t m0 x35 h15 y6b4 ff4 fsb fc3 sc0 ls3b ws70">getting in or out.</div><div class="c x2b y6b5 w27 h73"><div class="t m0 xc7 h36 y6b6 ff11 fs1c fc12 sc0 ls6 ws0">E-commerce</div><div class="t m0 xf9 h36 y6b7 ff11 fs1c fc12 sc0 ls6 ws0">system</div><div class="t m0 xbc h36 y6b8 ff11 fs1c fc12 sc0 ls13b ws0">Calculate</div><div class="t m0 x8a h36 y6b9 ff11 fs1c fc12 sc0 ls6 ws0">tax</div><div class="t m0 x87 h36 y6ba ff11 fs1c fc12 sc0 ls13b ws0">Calculate</div><div class="t m0 x82 h36 y6bb ff11 fs1c fc12 sc0 ls13b ws0">shipping</div><div class="t m0 xff h36 y6bc ff11 fs1c fc12 sc0 ls6 ws0">Subtract</div><div class="t m0 xff h36 y6bd ff11 fs1c fc12 sc0 ls13b ws0">discount</div><div class="t m0 xc5 h36 y6be ff11 fs1c fc12 sc0 ls13b ws44e">Shopping cart</div></div><div class="c x64 y6bf w28 h74"><div class="t m0 x100 h2b y6c0 ffb fs18 fcb sc0 ls69 ws493">Figure 3.5<span class="_ _29"> </span>By decomposing a system into small </div><div class="t m0 x100 h2b y6c1 ffb fs18 fcb sc0 ls17 ws494">parts, you can encapsulate behaviors and data into </div><div class="t m0 x100 h2b y6c2 ffb fs18 fcb sc0 ls17 ws43c">isolated pieces. Encapsulation encourages you to </div><div class="t m0 x100 h2b y6c3 ffb fs18 fcb sc0 ls143 ws43c">reduce the responsibilities of any given<span class="_ _0"></span> portion of </div><div class="t m0 x100 h2b y6c4 ffb fs18 fcb sc0 ls69 ws44f">code, helping you avoid complicated dependencies.</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
