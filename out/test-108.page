<div id="pf6c" class="pf w0 h0" data-page-no="6c"><div class="pc pc6c w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg6c.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">84</div><div class="t m0 xbe h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xa8 h2c y1d0 ffb fs19 fcb sc0 ls185 ws0">HAPTER</div><div class="t m0 x93 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 5</div><div class="t m0 x5d h2d y80 ffa fs7 fcb sc0 ls6 ws0">Testing your software</div><div class="t m0 x44 h15 y48a ff4 fsb fc3 sc0 ls48 ws4a5">cause the tests to break, because the tests are too concerned with <span class="ff3 ls30 ws0">how</span><span class="ls42 ws1ba"> the<span class="_ _e"></span> outcome is</span></div><div class="t m0 x44 h15 y48b ff4 fsb fc3 sc0 ls42 ws0">achieved.</div><div class="t m0 x32 h15 y48d ff4 fsb fc3 sc0 ls31 ws25"> Integration tests may take significantly long<span class="ls20 ws51">er to execute<span class="_ _e"></span> than unit tests. They gen-</span></div><div class="t m0 x44 h15 y48e ff4 fsb fc3 sc0 ls20 ws151">erally do more than execute some functi<span class="ws621">ons and check the output; they might use a</span></div><div class="t m0 x44 h15 y48f ff4 fsb fc3 sc0 ls80 ws622">database to create and manipulate re<span class="_ _e"></span>cord<span class="ls3d ws623">s, as an example. The interaction being</span></div><div class="t m0 x44 h15 y490 ff4 fsb fc3 sc0 ls42 ws37e">tested is more complex, so the t<span class="_ _e"></span>ime required to carry it out can grow. For these rea-</div><div class="t m0 x44 h15 y491 ff4 fsb fc3 sc0 ls1c ws21">sons, integration tests are usually fe<span class="ls51 ws47">wer in number than unit tests. </span></div><div class="t m0 x42 h26 yaec ffc fs15 fc2 sc0 ls110 ws42b">5.2.6<span class="_ _5f"> </span>T<span class="_ _e"></span>h<span class="_ _e"></span>e<span class="_ _e"></span> te<span class="_ _e"></span>s<span class="_ _e"></span>ti<span class="_ _e"></span>n<span class="_ _e"></span>g<span class="_ _e"></span> p<span class="_ _e"></span>yr<span class="_ _e"></span>a<span class="_ _e"></span>mi<span class="_ _e"></span>d</div><div class="t m0 x44 h15 yaed ff4 fsb fc3 sc0 ls42 wsde">Now that you’ve seen manual, unit, and inte<span class="ls2d ws1a4">gration testing, let’s recap the interplay</span></div><div class="t m0 x44 h15 yaee ff4 fsb fc3 sc0 ls36 wsb2">between them. The idea of a testing pyramid li<span class="ls2e ws624">ke that in figure 5.4 indicates that you</span></div><div class="t m0 x44 h15 yaef ff4 fsb fc3 sc0 ls2d ws31">should liberally apply functional tests like un<span class="ls48 ws39">it and integration tests,<span class="_ _e"></span> but be more con-</span></div><div class="t m0 x44 h15 yaf0 ff4 fsb fc3 sc0 ls20 ws9b">servative with long, brittle, and manual tests.</div><div class="t m0 x89 h31 yaf1 ff4 fs1a fc3 sc0 ls6 ws0">1</div><div class="t m0 x30 h15 yaf0 ff4 fsb fc3 sc0 ls30 wscf"> Each has merit, and your mileage will</div><div class="c x44 yaf2 w45 haa"><div class="t m0 xc8 h36 yaf3 ff11 fs1c fc12 sc0 ls6 ws0">Database client</div><div class="t m0 x21 h37 yaf4 ff12 fs1d fc12 sc0 ls6 ws0">Integration tests check </div><div class="t m0 x21 h37 yaf5 ff12 fs1d fc12 sc0 ls6 ws0">the result of interactions </div><div class="t m0 x21 h37 yaf6 ff12 fs1d fc12 sc0 ls6 ws0">between many moving parts. </div><div class="t m0 x126 h36 yaf7 ff11 fs1c fc12 sc0 ls6 ws0">Create record</div><div class="t m0 x127 h36 yaf8 ff11 fs1c fc12 sc0 ls6 ws0">Read record</div><div class="t m0 x126 h36 yaf9 ff11 fs1c fc12 sc0 ls6 ws0">Update record</div><div class="t m0 x126 h36 yafa ff11 fs1c fc12 sc0 ls6 ws0">Delete record</div></div><div class="c x44 yafb w2 h99"><div class="t m0 x1e h2b yafc ffb fs18 fcb sc0 ls17 ws43c">Figure 5.3<span class="_ _29"> </span>Integration tests focus </div><div class="t m0 x1e h2b yafd ffb fs18 fcb sc0 lsb2 ws44f">on how operations work together.</div></div><div class="c x44 yafe w46 hab"><div class="t m0 xf6 h36 yaff ff11 fs1c fc12 sc0 ls6 ws0">Manual</div><div class="t m0 xf7 h36 yb00 ff11 fs1c fc12 sc0 ls6 ws0">testing</div><div class="t m0 x19 h36 yb01 ff11 fs1c fc12 sc0 ls6 ws0">Integration testing</div><div class="t m0 xf5 h36 yb02 ff11 fs1c fc12 sc0 ls6 ws0">Unit testing</div><div class="t mb xd3 h37 yb03 ff12 fs1d fc12 sc0 ls6 ws0">Manual testing takes a long time and is</div><div class="t mb xd3 h37 yb04 ff12 fs1d fc12 sc0 ls6 ws0">sensitive to temporary outages, slowness,</div><div class="t mb xd3 h37 yb05 ff12 fs1d fc12 sc0 ls6 ws0">and so on. It has value but should not be</div><div class="t mb xd3 h37 yb06 ff12 fs1d fc12 sc0 ls6 ws0">the basis of a testing strategy<span class="_ _1c"></span>.</div><div class="t mb xd3 h37 yb07 ff12 fs1d fc12 sc0 ls6 ws0">Integration tests run quickly by comparison</div><div class="t mb xd3 h37 yb08 ff12 fs1d fc12 sc0 ls6 ws0">but can still be sensitive to changes in code</div><div class="t mb xd3 h37 yb09 ff12 fs1d fc12 sc0 ls6 ws0">structure and aren’t as fast as unit tests.</div><div class="t mb xd3 h37 yb0a ff12 fs1d fc12 sc0 ls6 ws0">Use plenty of them, but make sure the</div><div class="t mb xd3 h37 yb0b ff12 fs1d fc12 sc0 ls6 ws4f7">units work first.</div><div class="t mb x3 h37 yb0c ff12 fs1d fc12 sc0 ls6 ws0">Y<span class="_ _1c"></span>our sof<span class="_ _e"></span>tware is made up of many units,</div><div class="t mb x3 h37 yb0d ff12 fs1d fc12 sc0 ls6 ws0">and well-written code is generally conducive</div><div class="t mb x3 h37 yb0e ff12 fs1d fc12 sc0 ls6 ws0">to functional testing. Aim to have most of</div><div class="t mb x3 h37 yb0f ff12 fs1d fc12 sc0 ls6 ws0">your code unit tested.</div></div><div class="c x44 yb10 w2 hac"><div class="t m0 x2 h2b yb11 ffb fs18 fcb sc0 ls175 ws572">The testing pyramid<span class="_ _96"></span>Figure 5.4</div></div><div class="t m0 x42 h32 y210 ff4 fs1b fcd sc0 ls6 ws0">1</div><div class="t m0 x43 h33 y211 ff4 fs17 fcd sc0 ls6 ws0">Testing <span class="_ _1d"></span>pyramids<span class="_ _e"></span> <span class="_ _1c"></span>were <span class="_ _1d"></span>firs<span class="_ _e"></span>t <span class="_ _1c"></span>describ<span class="_ _e"></span>ed <span class="_ _1c"></span>by <span class="_ _1d"></span>Mik<span class="_ _e"></span>e <span class="_ _1c"></span>Cohn <span class="_ _1d"></span>in</div><div class="t m3 x0 h34 y211 ff8 fs17 fcd sc0 ls6 ws0"> </div><div class="t m0 x85 had y211 ff3 fs17 fcd sc0 ls6 ws0">Succeeding <span class="_ _1d"></span>with <span class="_ _1d"></span>Agi<span class="_ _e"></span>le</div><div class="t m3 x0 h34 y211 ff8 fs17 fcd sc0 ls6 ws0"> </div><div class="t m0 x53 h33 y211 ff4 fs17 fcd sc0 ls6 ws0">(Addison-Wesle<span class="_ _e"></span>y <span class="_ _1c"></span>Profe<span class="_ _e"></span>ssional, <span class="_ _1c"></span>200<span class="_ _e"></span>9).</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
