<div id="pf98" class="pf w0 h0" data-page-no="98"><div class="pc pc98 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg98.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">128</div><div class="t m0 xb9 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 x16 h2c y1d0 ffb fs19 fcb sc0 lsf6 ws0">HAPTER</div><div class="t m0 x68 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 7</div><div class="t m0 x1f h2d y80 ffa fs7 fcb sc0 ls6 ws0">Extensibility and f<span class="_ _e"></span>lexibility</div><div class="t m0 x32 h15 y40 ff4 fsb fc3 sc0 ls5e ws4bf"> Think about a web browser like Google Ch<span class="ls34 ws2f4">rome or Mozilla Firef<span class="_ _e"></span>ox. You’ve proba-</span></div><div class="t m0 x44 h15 y41 ff4 fsb fc3 sc0 ls20 ws235">bly installed something in one of these b<span class="_ _e"></span>rowsers to block advertisements or to easily</div><div class="t m0 x44 h15 y42 ff4 fsb fc3 sc0 ls71 ws15e">save the article you’re reading to a notes to<span class="ls48 ws2da">ol like Evernote. Firefox calls these install-</span></div><div class="t m0 x44 h15 y43 ff4 fsb fc3 sc0 ls30 ws222">able pieces of software <span class="ff3 ls3b ws0">add-ons</span><span class="ls34 ws4c6">, whereas Chrome calls them <span class="ff3 ls6b ws0">extensions</span><span class="ls36 ws87">, and both are</span></span></div><div class="t m0 x44 h15 y44 ff4 fsb fc3 sc0 ls71 ws7b3">examples of a <span class="ff3 ls38 ws7b4">plugin system</span><span class="ls2d ws7b5">. Plugin systems are implem<span class="ls4b ws7b6">entations of ex<span class="_ _e"></span>tensibility.</span></span></div><div class="t m0 x44 h15 y45 ff4 fsb fc3 sc0 ls42 ws8c">Chrome and Firefox weren’t built with ad blockers or Evernote in mind <span class="ff3 ls25 ws0">specifically</span><span class="ls62 ws390">, but</span></div><div class="t m0 x44 h15 y46 ff4 fsb fc3 sc0 ls1b ws40">they were designed to<span class="_ _e"></span> allow fo<span class="ls31 ws25">r such extensions to be built.</span></div><div class="t m0 x32 h15 y47 ff4 fsb fc3 sc0 ls31 ws4c6"> Massive projects like web browsers succ<span class="ws261">eed when they can cater to the needs of</span></div><div class="t m0 x44 h15 y48 ff4 fsb fc3 sc0 ls31 ws116">hundreds of thousands of users. It would be a massive feat<span class="ls20 ws2dd"> to predict all those needs in</span></div><div class="t m0 x44 h15 y49 ff4 fsb fc3 sc0 ls20 ws38d">advance, so an extensible system allows fo<span class="ls3b ws7b7">r solutions to those nee<span class="_ _e"></span>ds to be built after</span></div><div class="t m0 x44 h15 y4a ff4 fsb fc3 sc0 ls5e ws62d">the product is brought to market. You won’t al<span class="ls42 ws1f2">ways need to b<span class="_ _e"></span>e so forward-looking, but</span></div><div class="t m0 x44 h15 y4b ff4 fsb fc3 sc0 ls34 ws9f">drawing on some of the same concepts <span class="ls1e ws16">wil<span class="_ _0"></span>l help you build better software.</span></div><div class="t m0 x32 h15 y4c ff4 fsb fc3 sc0 ls5e ws14a"> As with many facets of software developm<span class="_ _e"></span>ent, extensibility is a spectrum and some-</div><div class="t m0 x44 h15 y4d ff4 fsb fc3 sc0 ls2f ws40e">thing you’ll iterate on. By practicing concep<span class="lsaf ws0">t<span class="_ _1c"></span>s<span class="_ _1c"></span> l<span class="_ _1c"></span>i<span class="_ _1d"></span>k<span class="_ _1c"></span>e<span class="_ _1d"></span> s<span class="_ _1c"></span>e<span class="_ _1c"></span>p<span class="_ _1d"></span>a<span class="_ _1c"></span>r<span class="_ _1c"></span>a<span class="_ _1d"></span>t<span class="_ _1c"></span>i<span class="_ _1d"></span>o<span class="_ _1c"></span>n<span class="_ _1c"></span> o<span class="_ _1d"></span>f<span class="_ _1c"></span> c<span class="_ _1d"></span>o<span class="_ _1c"></span>n<span class="_ _1c"></span>c<span class="_ _1d"></span>e<span class="_ _1c"></span>r<span class="_ _1c"></span>n<span class="_ _1d"></span>s<span class="_ _1c"></span> a<span class="_ _1d"></span>n<span class="_ _1c"></span>d<span class="_ _1c"></span> l<span class="_ _1d"></span>o<span class="_ _1c"></span>o<span class="_ _1d"></span>s<span class="_ _1c"></span>e</span></div><div class="t m0 x44 h15 y4e ff4 fsb fc3 sc0 ls1b ws7b8">coupling, you ca<span class="_ _e"></span>n improve your code’s extens<span class="ls1e ws145">ibility over time. As the extensibility of</span></div><div class="t m0 x44 h15 y4f ff4 fsb fc3 sc0 ls1f ws382">your code improves, you’ll<span class="_ _0"></span> find that addi<span class="ls34 ws469">ng new features becomes faster because you</span></div><div class="t m0 x44 h15 y50 ff4 fsb fc3 sc0 ls34 ws64d">can focus almost entirely on that new be<span class="ls3d ws7b9">havior without w<span class="_ _e"></span>orrying about how it will</span></div><div class="t m0 x44 h15 y51 ff4 fsb fc3 sc0 ls5e ws4bb">affect the features aro<span class="_ _e"></span>und it<span class="ls34 ws2f2">. This also means you’ll have an easier time maintaining</span></div><div class="t m0 x44 h15 y52 ff4 fsb fc3 sc0 ls20 ws1ca">and testing your code, because features are more isolated and therefore less likely to</div><div class="t m0 x44 h15 y53 ff4 fsb fc3 sc0 ls25 ws1a">introduce tricky bugs because of intermingl<span class="_ _0"></span>ed behavior.</div><div class="t m0 x44 h26 y1072 ffc fs15 fc2 sc0 lsad ws7ba">Adding new behaviors<span class="_ _b6"></span>7<span class="_ _0"></span>.<span class="_ _0"></span>1<span class="_ _0"></span>.<span class="_ _0"></span>1</div><div class="t m0 x44 h15 y19a ff4 fsb fc3 sc0 ls51 ws43">In the last chapter, you wrote the beginning<span class="ws6a">s of the Bark application. You used a mul-</span></div><div class="t m0 x44 h15 y57 ff4 fsb fc3 sc0 ls1c ws266">titier architecture to separa<span class="ls2f ws5db">te the concerns of persisting, manipulating, and displaying</span></div><div class="t m0 x44 h15 y58 ff4 fsb fc3 sc0 ls36 ws7bb">bookmark data. You then built a small set of feat<span class="ls44 ws3b7">ures on top of those layers of abstr<span class="_ _0"></span>action</span></div><div class="t m0 x44 h15 y437 ff4 fsb fc3 sc0 ls51 ws545">to make something useful. What happens wh<span class="ls2d">en you’re ready <span class="_ _0"></span>to add new functionality?</span></div><div class="t m0 x32 h15 y19b ff4 fsb fc3 sc0 ls31 wscd"> In an ideal extensible system, adding <span class="ls36 ws87">new behavior involves<span class="ls3e ws40b"> adding new class<span class="_ _0"></span>es,</span></span></div><div class="t m0 x44 h15 y19c ff4 fsb fc3 sc0 ls66 ws237">methods, functio<span class="_ _0"></span>ns, or data that encapsulate the<span class="_ _0"></span> new behavior without changing ex<span class="_ _0"></span>ist-</div><div class="t m0 x44 h15 y5c ff4 fsb fc3 sc0 ls2e ws4d">ing code (figure 7.1).</div><div class="c x44 y1073 w82 heb"><div class="t m6 xc7 h40 y1074 ff12 fs1f fc12 sc0 ls6 ws0">Extensible code allows you to add</div><div class="t m6 xc7 h40 y1075 ff12 fs1f fc12 sc0 ls6 ws0">a new feature by adding new code.</div><div class="t m6 x10c h40 y1076 ff12 fs1f fc12 sc0 ls6 ws0">Extensible code doesn’t require</div><div class="t m6 x10c h40 y1077 ff12 fs1f fc12 sc0 ls6 ws0">the editing of existing code. </div></div><div class="t m0 x55 h2b y1078 ffb fs18 fc11 sc0 ls6 ws0">Figure 7.1</div><div class="t m3 x0 h3a y1078 ff8 fs18 fc11 sc0 ls6 ws0"> </div><div class="t m0 x71 h2b y1078 ffb fs18 fc11 sc0 ls6 ws0">Adding new</div><div class="t m0 x55 h2b y1079 ffb fs18 fc11 sc0 ls6 ws0">behavior to extensible code</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
