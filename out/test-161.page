<div id="pfa1" class="pf w0 h0" data-page-no="a1"><div class="pc pca1 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bga1.png"/><div class="t m0 xa0 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">137<span class="_ _36"></span><span class="ffa">Solutions for rigidity</span></div><div class="t m0 x83 h15 y40 ff4 fsb fc3 sc0 ls3a wsc3"> The </div><div class="t m5 xd8 h24 y3eb ffd fsc fc3 sc0 lsa0 ws0">Bicycle</div><div class="t m0 x39 h15 y40 ff4 fsb fc3 sc0 ls2d ws1a8"> class doesn’t have much knowledge <span class="ls3b ws618">about (or interest in) the de<span class="_ _e"></span>tails</span></div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls3d ws2bc">of a <span class="ff3 ls6b ws0">specific</span><span class="ls20 ws330"> tire. It only cares that a tire has a <span class="ls38 ws3e6">particular set of information and behav-</span></span></div><div class="t m0 x35 h15 y42 ff4 fsb fc3 sc0 ls6 ws72">ior; otherwise, <span class="_ _e"></span>tires are free to do what the<span class="_ _e"></span>y like.</div><div class="t m0 x83 h15 y43 ff4 fsb fc3 sc0 ls31 ws7fa"> This practice of sharing agreed-upon interfaces (in contrast<span class="ls30 ws77c"> with class-specific</span></div><div class="t m0 x35 h15 y44 ff4 fsb fc3 sc0 ls51 ws545">details) between high- and low-level code wi<span class="ls20 ws2dd">ll give you the freedom to swap implemen-</span></div><div class="t m0 x35 h15 y45 ff4 fsb fc3 sc0 ls42 ws2f3">tations in and out. Remember that in Pyth<span class="ls47 wsca">on the prese<span class="_ _e"></span>nce of duck typing means that</span></div><div class="t m0 x35 h15 y46 ff4 fsb fc3 sc0 ls31 wse8">strict interfaces aren’t required. You deci<span class="ls71 ws483">de which methods and attributes comprise a</span></div><div class="t m0 x35 h15 y47 ff4 fsb fc3 sc0 ls1b ws3ff">particular interface. It’s up to you as a de<span class="_ _e"></span>veloper to make sure your<span class="_ _e"></span> classes adhere to</div><div class="t m0 x35 h15 y48 ff4 fsb fc3 sc0 ls30 ws36">the interfaces their consumers expect<span class="_ _e"></span>.</div><div class="t m0 x83 h15 y49 ff4 fsb fc3 sc0 ls3a ws74"> In Bark, </div><div class="t m5 x37 h24 yf95 ffd fsc fc3 sc0 lsa0 ws0">Command</div><div class="t m0 xb9 h15 y49 ff4 fsb fc3 sc0 ls2f wse2"> classes in the business logic provide an </div><div class="t m5 x123 h24 yf95 ffd fsc fc3 sc0 lsa0 ws0">execute</div><div class="t m0 x106 h15 y49 ff4 fsb fc3 sc0 ls1b7 ws7fb"> metho<span class="_ _0"></span>d as part</div><div class="t m0 x35 h15 y4a ff4 fsb fc3 sc0 ls5e ws7fc">of their interface. The presentation layer <span class="ls20 ws3ea">uses this <span class="_ _e"></span>interface when a user selects an</span></div><div class="t m0 x35 h15 y4b ff4 fsb fc3 sc0 ls34 ws185">option. The implementation of a particular <span class="ls2d ws301">comm<span class="_ _e"></span>and can change as <span class="_ _0"></span>much as it needs</span></div><div class="t m0 x35 h15 y14b ff4 fsb fc3 sc0 ls42 ws19d">to, and no change is re<span class="_ _e"></span>quired in the presen<span class="ls71 ws1c0">tation layer as long as the interface stays</span></div><div class="t m0 x35 h15 y4d ff4 fsb fc3 sc0 ls71 ws74">the same. You would only need <span class="_ _e"></span>to change the presentation layer if, for example, the</div><div class="t m5 x35 h24 y709 ffd fsc fc3 sc0 lsa0 ws0">Command</div><div class="t m0 xd8 h15 y4e ff4 fsb fc3 sc0 ls1e ws16"> classes’ </div><div class="t m5 x7e h24 y709 ffd fsc fc3 sc0 lsa0 ws0">execute</div><div class="t m0 xe7 h15 y4e ff4 fsb fc3 sc0 ls74 ws67b"> methods re<span class="_ _0"></span>quired an <span class="ls34 ws22">additional argument.</span></div><div class="t m0 x83 h15 y4f ff4 fsb fc3 sc0 lsc1 ws0"> Thi<span class="_ _0"></span>s ge<span class="_ _0"></span>ts b<span class="_ _0"></span>ack t<span class="_ _0"></span>o co<span class="_ _0"></span>hes<span class="_ _0"></span>ion<span class="_ _0"></span> as w<span class="_ _0"></span>ell<span class="_ _0"></span>. Co<span class="_ _0"></span>de t<span class="_ _0"></span>hat i<span class="_ _1d"></span>s close<span class="_ _0"></span>ly r<span class="_ _0"></span>ela<span class="_ _0"></span>ted<span class="_ _0"></span> wil<span class="_ _0"></span>l no<span class="_ _0"></span>t ne<span class="_ _0"></span>ed t<span class="_ _0"></span>o re<span class="_ _0"></span>ly</div><div class="t m0 x35 h15 y2b2 ff4 fsb fc3 sc0 ls30 ws7fd">on interfaces; it’s close enou<span class="ls20 ws43e">gh toge<span class="_ _e"></span>ther that inserting an<span class="ls4e ws635"> interface will feel forced.</span></span></div><div class="t m0 x35 h15 yed ff4 fsb fc3 sc0 ls71 ws2e5">On the other hand, code that’s already in different classes <span class="_ _0"></span>or modules has already</div><div class="t m0 x35 h15 y52 ff4 fsb fc3 sc0 ls25 ws7fe">been separated, so using shared interfaces<span class="ls3a ws6b6"> instead of directly<span class="_ _0"></span> reaching into other</span></div><div class="t m0 x35 h15 y53 ff4 fsb fc3 sc0 ls3a ws26e">classes is most likely the way to go. </div><div class="t m0 x19 h26 y1072 ffc fs15 fc2 sc0 ls18c ws615">7<span class="_ _0"></span>.<span class="_ _0"></span>2<span class="_ _0"></span>.<span class="_ _0"></span>3<span class="_ _11"> </span>Fighting entropy: The robustness principle</div><div class="t m0 x35 h15 y19a ff3 fsb fc3 sc0 ls2f ws0">Entropy<span class="ff4 ls42 ws62b"> is the tendency for organization to <span class="_ _e"></span>dissolve into disorganization over time.</span></div><div class="t m0 x35 h15 y57 ff4 fsb fc3 sc0 ls42 wsc3">Code often starts out small, neat, and unde<span class="ls80 ws7ff">rstandable, but it te<span class="_ _e"></span><span class="ls34 ws2c6">nds toward complexity</span></span></div><div class="t m0 x35 h15 y58 ff4 fsb fc3 sc0 ls20 wsc7">over time. One reason this happens is be<span class="ls3b ws4b0">cause code<span class="_ _e"></span> often grows to accommodate dif-</span></div><div class="t m0 x35 h15 y437 ff4 fsb fc3 sc0 ls2f ws23">ferent kinds of inputs.</div><div class="t m0 x83 h15 y19b ff4 fsb fc3 sc0 ls71 ws66b"> The <span class="ff3 lsb0 ws800">robustness principle</span><span class="ls1de ws801">, also known as Postel’s Law, stat<span class="_ _e"></span><span class="ls63 ws802">es: “Be<span class="_ _0"></span> conservative in what you</span></span></div><div class="t m0 x35 h15 y19c ff4 fsb fc3 sc0 lsb0 ws395">do, be liberal in what you accept from others<span class="ls8d ws803">.” The spirit of this statement is that you</span></div><div class="t m0 x35 h15 y5c ff4 fsb fc3 sc0 ls6f ws804">should provide only the behavi<span class="ls5b ws805">or necessary t<span class="_ _0"></span>o achieve the <span class="ls4b ws806">desired outcome, while<span class="_ _0"></span> being</span></span></div><div class="t m0 x35 h15 y5d ff4 fsb fc3 sc0 ls63 ws807">open to imperfect or unexpected input. This<span class="ls72 ws808"> isn’t to say you should accept any input</span></div><div class="t m0 x35 h15 y24b ff4 fsb fc3 sc0 lsbb ws809">under the sun, but being flexible can ease <span class="ls5b ws80a">development for consumers of your code. By</span></div><div class="t m0 x35 h15 y19d ff4 fsb fc3 sc0 ls72 ws80b">mapping a possibly large range of inputs to <span class="_ _e"></span><span class="lsf8 ws641">a known, smaller range of outputs, you can</span></div><div class="t m0 x35 h15 y60 ff4 fsb fc3 sc0 ls8d ws1f9">direct the flow of information toward a more limited, expect<span class="_ _0"></span>ed range (figure 7.6).</div><div class="c x35 y113f w8e hf7"><div class="t m0 x13c h5f y1140 ff15 fs1c fc12 sc0 ls6 ws0">int<span class="_ _bf"> </span>str<span class="_ _c0"> </span>bytes</div><div class="t m0 x10c h5f y1141 ff15 fs1c fc12 sc0 ls6 ws0">int()</div><div class="t m0 xe5 h5f y1142 ff15 fs1c fc12 sc0 ls6 ws0">int</div><div class="t m0 xe6 h5f y1140 ff15 fs1c fc12 sc0 ls6 ws0">float</div><div class="t m0 x91 h37 y1143 ff12 fs1d fc12 sc0 ls6 ws0">int() acts as a</div><div class="t m0 x91 h37 y1144 ff12 fs1d fc12 sc0 ls6 ws0">funnel, channeling</div><div class="t m0 x91 h37 y1145 ff12 fs1d fc12 sc0 ls6 ws0">a number of input</div><div class="t m0 x91 h37 y1146 ff12 fs1d fc12 sc0 ls6 ws0">types into a single</div><div class="t m0 x91 h37 y1147 ff12 fs1d fc12 sc0 ls6 ws0">output type.    </div></div><div class="c x35 y1148 w2 hf8"><div class="t m0 x59 h2b y1149 ffb fs18 fcb sc0 ls16 ws730">Figure 7.6<span class="_ _29"> </span>Reducing entropy </div><div class="t m0 x59 h2b y114a ffb fs18 fcb sc0 ls1c6 ws5e9">when mapping inputs to outputs</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
