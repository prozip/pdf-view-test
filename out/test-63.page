<div id="pf3f" class="pf w0 h0" data-page-no="3f"><div class="pc pc3f w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg3f.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">39<span class="_ _3d"></span><span class="ffa">The hierarchy of separation in Python</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls30 ws0">with </div><div class="t m5 x82 h24 y3eb ffd fsc fc3 sc0 lsa0 ws0">database.que<span class="_ _e"></span>ry.</div><div class="t m0 x23 h15 y40 ff4 fsb fc3 sc0 lsc5 ws3ab">, or you can write </div><div class="t m5 x10 h24 y3eb ffd fsc fc3 sc0 lsa0 ws413">from database imp<span class="_ _e"></span>ort query</div><div class="t m0 xa3 h15 y40 ff4 fsb fc3 sc0 ls80 ws409">. If you’re only</div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls30 ws414">using the database code in a particular mo<span class="ls129 ws415">dule, the la<span class="_ _0"></span>tter might be<span class="_ _0"></span> fine. But if yo<span class="_ _0"></span>u</span></div><div class="t m0 x35 h15 y42 ff4 fsb fc3 sc0 ls3d ws2bc">need to use the new search query code <span class="ff3 ls12a ws0">and</span><span class="ls2d ws211"> the database code in a module, you must</span></div><div class="t m0 x35 h15 y43 ff4 fsb fc3 sc0 ls38 ws26">disambiguate the names, and it <span class="ls20 ws51">helps to maintain the pref<span class="_ _e"></span>ixes:</span></div><div class="t m0 x35 h3b y5bb ffd fs18 fc3 sc0 lsb2 ws0">import<span class="_"> </span>database.query</div><div class="t m0 x35 h3b y5bc ffd fs18 fc1 sc0 lsb2 ws0">import<span class="_"> </span>search.query</div><div class="t m0 x35 h15 y3f3 ff4 fsb fc3 sc0 ls81 ws26f">You could also use the </div><div class="t m5 x3b h24 y5bd ffd fsc fc3 sc0 lsa0 ws0">from</div><div class="t m0 xe4 h15 y3f3 ff4 fsb fc3 sc0 ls2d ws31"> syntax and alias each module:</div><div class="t m0 x35 h3b y5be ffd fs18 fc3 sc0 lsb2 ws0">from<span class="_"> </span>database<span class="_"> </span>import<span class="_"> </span>query<span class="_"> </span>as<span class="_"> </span>db_query</div><div class="t m0 x35 h3b y5bf ffd fs18 fc1 sc0 lsb2 ws0">from<span class="_"> </span>search<span class="_"> </span>import<span class="_"> </span>query<span class="_"> </span>as<span class="_"> </span>search_query</div><div class="t m0 x35 h15 y345 ff4 fsb fc3 sc0 ls3a ws416">Aliases can be too verbose, though, and <span class="ls51 ws417">sometimes downright confusing if they’re</span></div><div class="t m0 x35 h15 y5c0 ff4 fsb fc3 sc0 ls34 ws22">poorly named. Use them sparingly to avoid naming collisions.</div><div class="t m0 x83 h15 y5c1 ff4 fsb fc3 sc0 ls3a ws254"> You can nest packages in a process similar <span class="ls44 ws3ac">to creating an initial package. Create a</span></div><div class="t m0 x35 h15 y5c2 ff4 fsb fc3 sc0 ls30 ws36">directory with an </div><div class="t m5 x66 h24 y5c3 ffd fsc fc3 sc0 lsa0 ws0">__init__.py</div><div class="t m0 x1f h15 y5c2 ff4 fsb fc3 sc0 ls35 ws24"> file, and put modules or packages inside:</div><div class="t m0 x35 h3b y46f ffd fs18 fc3 sc0 ls6 ws0">.</div><div class="t m0 x87 h3b y5c4 ffd fs18 fc3 sc0 lsb2 ws0">math</div><div class="t m0 x36 h3b y5c5 ffd fs18 fc3 sc0 lsb2 ws0">__init__.py</div><div class="t m0 x36 h3b y5c6 ffd fs18 fc3 sc0 lsb2 ws0">statistics</div><div class="t m0 xe6 h3b y5c7 ffd fs18 fc3 sc0 lsb2 ws0">__init__.py</div><div class="t m0 xe6 h3b y5c8 ffd fs18 fc3 sc0 lsb2 ws0">std.py</div><div class="t m0 xe6 h3b y5c9 ffd fs18 fc3 sc0 lsb2 ws0">cdf.py</div><div class="t m0 x36 h3b y401 ffd fs18 fc3 sc0 lsb2 ws0">calculus</div><div class="t m0 xe6 h3b y402 ffd fs18 fc3 sc0 lsb2 ws0">__init__.py</div><div class="t m0 xe6 h3b y5ca ffd fs18 fc3 sc0 lsb2 ws0">integral.py</div><div class="t m0 x36 h3b y5cb ffd fs18 fc1 sc0 lsb2 ws0">...</div><div class="t m0 x35 h15 y1ac ff4 fsb fc3 sc0 ls44 ws114">In this example, all the math code is in th<span class="ls3d wsad">e math package, and each subfield of math-</span></div><div class="t m0 x35 h15 y1ad ff4 fsb fc3 sc0 ls42 ws26e">ematics has its own subp<span class="lsae ws418">ackage that contains mod<span class="_ _0"></span>ules. If you want to look at t<span class="_ _0"></span>he code</span></div><div class="t m0 x35 h15 y1ae ff4 fsb fc3 sc0 ls31 ws419">for calculating an integral, you can make a gu<span class="_ _e"></span><span class="ls3b ws41a">ess that it’s in <span class="_ _0"></span>math<span class="ls31 ws0">/calculus/integral.py.</span></span></div><div class="t m0 x35 h15 y1af ff4 fsb fc3 sc0 ls66 ws41b">This aspect o<span class="_ _0"></span>f packages—being able<span class="_ _0"></span> to navigate t<span class="_ _0"></span>o where code<span class="_ _0"></span> is likely t<span class="_ _0"></span>o live—becomes</div><div class="t m0 x35 h15 y5cc ff4 fsb fc3 sc0 ls34 ws22">invaluable as a project grows in size.</div><div class="t m0 x83 h15 y1b1 ff4 fsb fc3 sc0 ls38 ws26"> Importing the integral module works like be<span class="ls4e ws1e3">fore, with add<span class="_ _e"></span>itional prefixes to get to</span></div><div class="t m0 x35 h15 y1b2 ff4 fsb fc3 sc0 ls3a ws1e0">the module of interest:</div><div class="t m0 x35 h3b y5cd ffd fs18 fc3 sc0 lsb2 ws0">from<span class="_"> </span>math.calculus<span class="_"> </span>import<span class="_"> </span>integral</div><div class="t m0 x35 h3b y499 ffd fs18 fc1 sc0 lsb2 ws0">import<span class="_"> </span>math.calculus.integral</div><div class="t m0 x35 h15 y5ce ff4 fsb fc3 sc0 lsbc ws41c">Note that </div><div class="t m5 xaf h24 y5cf ffd fsc fc3 sc0 lsa0 ws41d">from math import cal<span class="_ _e"></span>culus.integral</div><div class="t m0 x52 h15 y5ce ff4 fsb fc3 sc0 ls25 ws41e"> won’t work; you can only import a full</div><div class="t m0 x35 h15 y5d0 ff4 fsb fc3 sc0 lsbc ws41f">dotted path using </div><div class="t m5 xd1 h24 y5d1 ffd fsc fc3 sc0 lsa0 ws0">import ...</div><div class="t m0 x59 h15 y5d0 ff4 fsb fc3 sc0 ls38 ws26"> or a single name using </div><div class="t m5 xa2 h24 y5d1 ffd fsc fc3 sc0 lsa0 ws413">from ... import ...</div><div class="t m0 xe3 h15 y5d0 ff4 fsb fc3 sc0 ls78 ws0">. </div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
