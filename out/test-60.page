<div id="pf3c" class="pf w0 h0" data-page-no="3c"><div class="pc pc3c w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg3c.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">36</div><div class="t m0 x3 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 x29 h2c y1d0 ffb fs19 fcb sc0 lsf6 ws0">HAPTER</div><div class="t m0 x47 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 2</div><div class="t m0 xca h2d y80 ffa fs7 fcb sc0 ls6 ws0">Separation of concerns</div><div class="t m0 x97 h3b y395 ffd fs18 fc3 sc0 lsb2 ws0">print(f&apos;You<span class="_"> </span>chose<span class="_"> </span>{self.human_choice}&apos;)</div><div class="t m0 x97 h3b y396 ffd fs18 fc3 sc0 lsb2 ws0">print(f&apos;The<span class="_"> </span>computer<span class="_"> </span>chose<span class="_"> </span>{self.computer_choice}&apos;)</div><div class="t m0 xae h3b y40d ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>print_win_lose(self,<span class="_"> </span>human_beats,<span class="_"> </span>human_loses_to):</div><div class="t m0 x97 h3b y483 ffd fs18 fc3 sc0 lsb2 ws0">if<span class="_"> </span>self.computer_choice<span class="_"> </span>==<span class="_"> </span>human_loses_to:</div><div class="t m0 xc3 h3b y484 ffd fs18 fc3 sc0 lsb2 ws0">print(f&apos;Sorry,<span class="_"> </span>{self.computer_choice}<span class="_"> </span>beats<span class="_"> </span>{self.human_choice}&apos;)</div><div class="t m0 x97 h3b y569 ffd fs18 fc3 sc0 lsb2 ws0">elif<span class="_"> </span>self.computer_choice<span class="_"> </span>==<span class="_"> </span>human_beats:</div><div class="t m0 xc3 h3b y56a ffd fs18 fc3 sc0 lsb2 ws0">print(f&apos;Yes,<span class="_"> </span>{self.human_choice}<span class="_"> </span>beats<span class="_"> </span>{self.computer_choice}!&apos;)</div><div class="t m0 xae h3b y487 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>print_result(self):</div><div class="t m0 x97 h3b y58f ffd fs18 fc3 sc0 lsb2 ws0">if<span class="_"> </span>self.human_choice<span class="_"> </span>==<span class="_"> </span>self.computer_choice:</div><div class="t m0 xc3 h3b y590 ffd fs18 fc3 sc0 lsb2 ws0">print(&apos;Draw!&apos;)</div><div class="t m0 x97 h3b y591 ffd fs18 fc3 sc0 lsb2 ws0">if<span class="_"> </span>self.human_choice<span class="_"> </span>==<span class="_"> </span>&apos;rock&apos;:</div><div class="t m0 xc3 h3b y592 ffd fs18 fc3 sc0 lsb2 ws0">self.print_win_lose(&apos;scissors&apos;,<span class="_"> </span>&apos;paper&apos;)</div><div class="t m0 x97 h3b y593 ffd fs18 fc3 sc0 lsb2 ws0">elif<span class="_"> </span>self.human_choice<span class="_"> </span>==<span class="_"> </span>&apos;paper&apos;:</div><div class="t m0 xc3 h3b y594 ffd fs18 fc3 sc0 lsb2 ws0">self.print_win_lose(&apos;rock&apos;,<span class="_"> </span>&apos;scissors&apos;)</div><div class="t m0 x97 h3b y595 ffd fs18 fc3 sc0 lsb2 ws0">elif<span class="_"> </span>self.human_choice<span class="_"> </span>==<span class="_"> </span>&apos;scissors&apos;:</div><div class="t m0 xc3 h3b y596 ffd fs18 fc3 sc0 lsb2 ws0">self.print_win_lose(&apos;paper&apos;,<span class="_"> </span>&apos;rock&apos;)</div><div class="t m0 xae h3b y597 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>simulate(self):</div><div class="t m0 x97 h3b y598 ffd fs18 fc3 sc0 lsb2 ws0">self.print_options()</div><div class="t m0 x97 h3b y599 ffd fs18 fc3 sc0 lsb2 ws0">self.get_human_choice()</div><div class="t m0 x97 h3b y59a ffd fs18 fc3 sc0 lsb2 ws0">self.get_computer_choice()</div><div class="t m0 x97 h3b y59b ffd fs18 fc3 sc0 lsb2 ws0">self.print_choices()</div><div class="t m0 x97 h3b y59c ffd fs18 fc1 sc0 lsb2 ws0">self.print_result()</div><div class="t m0 x44 h15 y34e ff4 fsb fc3 sc0 ls51 wsbf">It took some <span class="ls5b ws3e1">work to add<span class="_ _e"></span> </span></div><div class="t m5 xf1 h24 y59d ffd fsc fc3 sc0 lsa0 ws0">self.</div><div class="t m0 x59 h15 y34e ff4 fsb fc3 sc0 ls1c ws3e2"> to the attribute references throughout the class, but</div><div class="t m0 x44 h15 y472 ff4 fsb fc3 sc0 ls1c ws3e3">much of it is simplified. In particular, <span class="ls2f ws3e4">the methods take fewer arguments, and the</span></div><div class="t m5 x44 h24 y59e ffd fsc fc3 sc0 lsa0 ws0">simulate</div><div class="t m0 xef h15 y41c ff4 fsb fc3 sc0 ls3d ws3e5"> method does little more than glue<span class="ls20 ws363"> the other methods t<span class="_ _e"></span>ogether. Another</span></div><div class="t m0 x44 h15 y158 ff4 fsb fc3 sc0 ls3d ws2bc">great outcome is that the code to simulate <span class="ls38 ws3e6">a game of Rock, Paper, Scissors now looks</span></div><div class="t m0 x44 h15 y159 ff4 fsb fc3 sc0 ls6d ws3e7">like this:</div><div class="t m0 x44 h3b y59f ffd fs18 fc3 sc0 lsb2 ws0">RPS<span class="_"> </span>=<span class="_"> </span>RockPaperScissorsSimulator()</div><div class="t m0 x44 h3b y5a0 ffd fs18 fc1 sc0 lsb2 ws0">RPS.simulate()</div><div class="t m0 x44 h15 y263 ff4 fsb fc3 sc0 ls2d ws11e">Pretty concise, huh? You first decomposed <span class="ls3a ws23f">a bunch of code into functions to<span class="_ _e"></span> separate</span></div><div class="t m0 x44 h15 y5a1 ff4 fsb fc3 sc0 ls38 wsb9">some concerns. You then grou<span class="ls20 ws3e8">ped them into a class to separate a higher-leve<span class="_ _e"></span>l con-</span></div><div class="t m0 x44 h15 y265 ff4 fsb fc3 sc0 ls44 ws3ac">cern. Now it’s easy to call on <span class="_ _0"></span>all the hard<span class="ls51 ws108"> behind-the-scenes work with a short expres-</span></div><div class="t m0 x44 h15 y266 ff4 fsb fc3 sc0 ls34 ws22">sion. This is thanks to carefully selectin<span class="ls47 ws54">g and grou<span class="_ _e"></span>ping related data and behaviors.</span></div><div class="t m0 x32 h15 y267 ff4 fsb fc3 sc0 ls38 ws3e9"> When a class’s methods and attributes are <span class="ls44 ws297">closely related, it is said to have hi<span class="_ _0"></span>gh</span></div><div class="t m0 x44 h15 y268 ff3 fsb fc3 sc0 ls3a ws0">cohesion<span class="ff4 ls34 ws13b">. A class is cohesive if its contents make<span class="ls1c ws17f"> sense together as a whole. We want our</span></span></div><div class="t m0 x44 h15 y5a2 ff4 fsb fc3 sc0 ls38 ws193">classes to have high cohesion because if ev<span class="ls20 ws3ea">erything in a class is closely related, our</span></div><div class="t m0 x44 h15 y26a ff4 fsb fc3 sc0 ls1e ws329">concerns are likely to be well separated. A class with too many co<span class="ls2d ws11e">ncerns has low cohe-</span></div><div class="t m0 x44 h15 yaa ff4 fsb fc3 sc0 ls30 ws1ef">sion because those concerns muddy the inte<span class="_ _e"></span>nt <span class="ls44 ws6e">of the class. Usually <span class="ls2d ws3eb">I end up creating a</span></span></div><div class="t m0 x44 h15 y26b ff4 fsb fc3 sc0 ls2d wsbc">class only when this cohesion is already cl<span class="ls34 wsbb">ear to me; some code already exhibits relat-</span></div><div class="t m0 x44 h15 y5a3 ff4 fsb fc3 sc0 ls34 ws25">edness through the data and behaviors it contains.</div><div class="t m0 x32 h15 y5a4 ff4 fsb fc3 sc0 ls3e ws3ec"> When a class depends on another cl<span class="ls3a ws12e">ass, those classes are said to be <span class="ff3 ws0">coupled</span><span class="wse4">. If a class</span></span></div><div class="t m0 x44 h15 y5a5 ff4 fsb fc3 sc0 ls47 ws3ed">depends on many details of <span class="ls2e wsb7">another class, such that ch<span class="ls20 ws1e6">anging one requires changing</span></span></div><div class="c x4f y5a6 w1d h64"><div class="t m0 x43 h14 y5a7 ff12 fs7 fcb sc0 lsdc ws3df">Methods ca<span class="ff13 ls6 ws0">n<span class="ff12"> </span></span></div><div class="t m0 x43 h14 y5a8 ff13 fs7 fcb sc0 ls6 ws0">r<span class="ff12 lsef ws3a0">ead att</span>r<span class="ff12 lsd6">ibutes </span></div><div class="t m0 x43 h14 y5a9 ff12 fs7 fcb sc0 ls6 ws0">f<span class="ff13">r</span>o<span class="ff13">m</span><span class="ls10f ws3ee"> self.</span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
