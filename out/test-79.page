<div id="pf4f" class="pf w0 h0" data-page-no="4f"><div class="pc pc4f w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg4f.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">55<span class="_ _60"></span><span class="ffa">Typing, inheritance, and polymorphism</span></div><div class="t m0 x35 h15 y78d ff4 fsb fc3 sc0 ls1f ws380">Composition is often done throug<span class="ls34 ws143">h a language feature called an <span class="ff3 ls73 ws0">interfa<span class="_ _e"></span>ce</span><span class="ls21 ws1fe">. Interf<span class="_ _0"></span>aces</span></span></div><div class="t m0 x35 h15 y78e ff4 fsb fc3 sc0 ls3d ws13d">are formal definitions of methods and data <span class="ls38 ws3e6">that a particular class must implement. A</span></div><div class="t m0 x35 h15 y78f ff4 fsb fc3 sc0 ls31 ws2c2">class can implement multiple interfaces to <span class="ls3d ws4be">broadcast that it has the union of those</span></div><div class="t m0 x35 h15 y790 ff4 fsb fc3 sc0 ls1c ws10">interfaces’ behaviors.</div><div class="t m0 x83 h15 y791 ff4 fsb fc3 sc0 ls7d ws4f4"> Python lacks interfaces. Oh no<span class="_ _e"></span>! How ca<span class="ls3e ws34d">n you avoid a deep inheritance hi<span class="_ _0"></span>erarchy?</span></div><div class="t m0 x35 h15 y792 ff4 fsb fc3 sc0 ls71 ws2d4">Fortunately, Python makes this possible th<span class="ls34 ws13b">rough the duck typing system as well as <span class="ff3 lsc2 ws0">mu<span class="_ _e"></span>l-</span></span></div><div class="t m0 x35 h15 y793 ff3 fsb fc3 sc0 ls2d ws4f5">tiple inheritance<span class="ff4">. Whereas many statically typed lang<span class="ls34 ws203">uages allow a class to inherit from</span></span></div><div class="t m0 x35 h15 y794 ff4 fsb fc3 sc0 ls71 ws2e5">only one other class, Python can support <span class="ls44 ws4f6">inheritance from an arbitrary number of</span></div><div class="t m0 x35 h15 y795 ff4 fsb fc3 sc0 ls38 wsaa">classes. Something like an interface can be<span class="ls6f ws3b4"> built using this mechanism, and in P<span class="_ _e"></span>ython</span></div><div class="t m0 x35 h15 y796 ff4 fsb fc3 sc0 ls25 ws1a">it’s often referred to as a <span class="ff3 ls5f ws0">mixin<span class="ff4 ls6">.</span></span></div><div class="t m0 x83 h15 y797 ff4 fsb fc3 sc0 ls3d ws27e"> Suppose you want to create a model for <span class="_ _e"></span>a dog that can speak and roll over. You</div><div class="t m0 x35 h15 y798 ff4 fsb fc3 sc0 ls42 ws32">know you’ll eventually want to model other animals that can also do tricks, so to make</div><div class="t m0 x35 h15 y799 ff4 fsb fc3 sc0 ls2d ws3eb">these behaviors into something like an interface, you can name them with a </div><div class="t m5 x10a h24 y79a ffd fsc fc3 sc0 lsa0 ws0">Mixin</div><div class="t m0 xb0 h15 y799 ff4 fsb fc3 sc0 ls1c ws266"> suf-</div><div class="t m0 x35 h15 y79b ff4 fsb fc3 sc0 ls1c ws266">fix to be clear about your intent. With those <span class="ls6b ws186">behavior mixins in place, you’ll be able to</span></div><div class="t m0 x35 h15 y79c ff4 fsb fc3 sc0 ls34 ws22">make a </div><div class="t m5 x90 h24 y79d ffd fsc fc3 sc0 lsa0 ws0">Dog</div><div class="t m0 xc3 h15 y79c ff4 fsb fc3 sc0 ls42 ws32"> class that can </div><div class="t m5 xc9 h24 y79d ffd fsc fc3 sc0 lsa0 ws0">speak</div><div class="t m0 x63 h15 y79c ff4 fsb fc3 sc0 ls6 ws72"> and </div><div class="t m5 x6a h24 y79d ffd fsc fc3 sc0 lsa0 ws0">roll_over</div><div class="t m0 x51 h15 y79c ff4 fsb fc3 sc0 ls71 wsd4">, as shown in the following listing, with</div><div class="t m0 x35 h15 y79e ff4 fsb fc3 sc0 ls47 ws38">the freedom to let yo<span class="ls1c ws10">ur future animals </span></div><div class="t m5 x4e h24 y79f ffd fsc fc3 sc0 lsa0 ws0">speak</div><div class="t m0 x5f h15 y79e ff4 fsb fc3 sc0 ls20 ws17"> or </div><div class="t m5 x75 h24 y79f ffd fsc fc3 sc0 lsa0 ws0">roll_over</div><div class="t m0 xa6 h15 y79e ff4 fsb fc3 sc0 ls2d ws1d"> using the same approach.</div><div class="t m0 x35 h3b y7a0 ffd fs18 fc3 sc0 lsb2 ws0">class<span class="_"> </span>SpeakMixin:</div><div class="t m0 x87 h3b y7a1 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>speak(self):</div><div class="t m0 x36 h3b y7a2 ffd fs18 fc3 sc0 lsb2 ws0">name<span class="_"> </span>=<span class="_"> </span>self.__class__.__name__.lower()</div><div class="t m0 x17 h20 y7a3 ffb fs7 fc4 sc0 ls6 ws0">Multiple inheritance providing interface-like be<span class="_ _0"></span>havior<span class="_ _61"></span>Listing<span class="_"> </span>3.4</div><div class="c x35 y7a4 w2e h7c"><div class="t m0 xb h36 y7a5 ff11 fs1c fc12 sc0 ls6 ws0">Mammal</div><div class="t m0 xd7 h36 y7a6 ff11 fs1c fc12 sc0 ls6 ws0">?</div><div class="t m0 xc0 h36 y7a7 ff11 fs1c fc12 sc0 ls6 ws0">Quadruped</div><div class="t m0 xf6 h36 y7a8 ff11 fs1c fc12 sc0 ls6 ws0">Canine</div><div class="t m0 x3a h37 y7a9 ff12 fs1d fc12 sc0 ls6 ws4f7">Inheritance can present challenges.</div><div class="t m0 x3a h37 y7aa ff12 fs1d fc12 sc0 ls6 ws0">Not all quadrupeds are mammals,</div><div class="t m0 x3a h37 y7ab ff12 fs1d fc12 sc0 ls6 ws0">so this hierarchy isn’t perfect. Not</div><div class="t m0 x3a h37 y7ac ff12 fs1d fc12 sc0 ls6 ws0">all mammals are quadrupeds, either! </div><div class="t m0 x67 h37 y7ad ff12 fs1d fc12 sc0 ls6 ws0">Keeping traits independent allows them to</div><div class="t m0 x67 h37 y7ae ff12 fs1d fc12 sc0 ls6 ws0">be composed as before with the ability to</div><div class="t m0 x67 h37 y7af ff12 fs1d fc12 sc0 ls6 ws0">compose them in new ways for future objects. </div><div class="t m0 x76 h36 y7b0 ff11 fs1c fc12 sc0 ls6 ws0">Dog</div><div class="t m0 xb7 h36 y7b1 ff11 fs1c fc12 sc0 ls6 ws0">Biped<span class="_ _62"> </span>Mammal<span class="_ _63"> </span>Quadruped<span class="_ _a"> </span>Canine</div><div class="t m0 xc7 h36 y7b2 ff11 fs1c fc12 sc0 ls6 ws0">Kangaroo<span class="_ _64"> </span>Human<span class="_ _65"> </span>Cat<span class="_ _66"> </span>Dog</div></div><div class="c x35 y7b3 w2 h7d"><div class="t m0 x2 h2b y7b4 ffb fs18 fcb sc0 ls69 ws44f">Inheritance versus composition<span class="_ _67"></span>Figure 3.6</div></div><div class="c x40 y7b5 w2f h6f"><div class="t m0 x43 h14 y7b6 ff12 fs7 fcb sc0 ls106 ws0">Speaki<span class="ff13 ls6">n</span><span class="ls150 ws4f8">g behavio</span><span class="ff13 ls6">r</span><span class="ls116 ws4f9"> is </span></div><div class="t m0 x43 h14 y7b7 ff12 fs7 fcb sc0 ls6 ws0">e<span class="ff13">n</span><span class="ls13c ws45b">capsulated i</span><span class="ff13">n</span><span class="lsdc ws2ac"> SpeakMixi</span><span class="ff13">n</span> </div><div class="t m0 x43 h14 y7b8 ff12 fs7 fcb sc0 lsef ws4fa">to show it’s co<span class="ff13 ls6 ws0">m<span class="ff12 lsde">posable.</span></span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
