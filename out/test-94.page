<div id="pf5e" class="pf w0 h0" data-page-no="5e"><div class="pc pc5e w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg5e.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">70</div><div class="t m0 x67 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xb1 h2c y1d0 ffb fs19 fcb sc0 ls158 ws0">HAPTER</div><div class="t m0 xb6 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 4</div><div class="t m0 x101 h2d y80 ffa fs7 fcb sc0 ls6 ws0">Designing for high performance</div><div class="t m0 x44 h3b y397 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>most_frequent(numbers):</div><div class="t m0 xae h3b y40d ffd fs18 fc3 sc0 lsb2 ws0">counts<span class="_"> </span>=<span class="_"> </span>defaultdict(int)</div><div class="t m0 x17 h3b y483 ffd fs18 fc3 sc0 lsb2 ws0">in<span class="_"> </span>numbers:<span class="_ _6f"></span>for<span class="_"> </span>number</div><div class="t m0 x24 h3b y484 ffd fs18 fc3 sc0 lsb2 ws0">1<span class="_ _46"></span>+=<span class="_ _84"></span>counts[number]</div><div class="t m0 xae h3b y485 ffd fs18 fc1 sc0 lsb2 ws0">return<span class="_"> </span>get_number_with_highest_count(counts)</div><div class="t m0 x44 h15 y40e ff4 fsb fc3 sc0 ls3a ws254">Not bad—you saved yourself one <span class="ls3d ws2bc">line of code, and the spirit of the function is a little</span></div><div class="t m0 x44 h15 y40f ff4 fsb fc3 sc0 ls44 ws3ac">more clear. But you can do even better. Py<span class="ls31 ws15d">thon also has a helper<span class="ls38"> for <span class="_ _0"></span>counting things</span></span></div><div class="t m0 x44 h15 y410 ff4 fsb fc3 sc0 ls1c ws21">in a sequence:</div><div class="t m0 x44 h3b y412 ffd fs18 fc3 sc0 lsb2 ws0">from<span class="_"> </span>collections<span class="_"> </span>import<span class="_"> </span>Counter</div><div class="t m0 x44 h3b y46d ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>get_number_with_highest_count(counts):</div><div class="t m0 xae h3b y99d ffd fs18 fc3 sc0 lsb2 ws0">max_count<span class="_"> </span>=<span class="_"> </span>0</div><div class="t m0 xae h3b y99e ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>number,<span class="_"> </span>count<span class="_"> </span>in<span class="_"> </span>counts.items():</div><div class="t m0 x97 h3b y99f ffd fs18 fc3 sc0 lsb2 ws0">if<span class="_"> </span>count<span class="_"> </span>&gt;<span class="_"> </span>max_count:</div><div class="t m0 xc3 h3b y46f ffd fs18 fc3 sc0 lsb2 ws0">max_count<span class="_"> </span>=<span class="_"> </span>count</div><div class="t m0 xc3 h3b y5c4 ffd fs18 fc3 sc0 lsb2 ws0">number_with_highest_count<span class="_"> </span>=<span class="_"> </span>number</div><div class="t m0 xae h3b y5c5 ffd fs18 fc3 sc0 lsb2 ws0">return<span class="_"> </span>number_with_highest_count</div><div class="t m0 x44 h3b y5c8 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>most_frequent(numbers):</div><div class="t m0 xae h3b y5c9 ffd fs18 fc3 sc0 lsb2 ws0">counts<span class="_"> </span>=<span class="_"> </span>Counter(numbers)</div><div class="t m0 xae h3b y401 ffd fs18 fc1 sc0 lsb2 ws0">return<span class="_"> </span>get_number_with_highest_count(counts)</div><div class="t m0 x44 h15 y350 ff4 fsb fc3 sc0 ls38 ws3fd">You’ve saved a few more line<span class="ls3a ws547">s, and now the spirit of </span></div><div class="t m5 xee h24 y4fb ffd fsc fc3 sc0 lsa0 ws0">most_freque<span class="_ _e"></span>nt</div><div class="t m0 x6 h15 y350 ff4 fsb fc3 sc0 ls38 ws3fd"> is quite clear:</div><div class="t m0 x44 h15 y351 ff4 fsb fc3 sc0 ls20 ws59d">count the unique numbers, and return <span class="_ _e"></span>th<span class="ls34 ws59e">e one with the highest count. But what</span></div><div class="t m0 x44 h15 y4fc ff4 fsb fc3 sc0 ls30 ws0">about </div><div class="t m5 x87 h24 y9a0 ffd fsc fc3 sc0 lsa0 ws0">get_number_w<span class="_ _e"></span>ith_highest_count</div><div class="t m0 x64 h15 y4fc ff4 fsb fc3 sc0 ls36 ws2d9">? It’s finding the maxi<span class="ls2f ws1ed">mum value in a dictio-</span></div><div class="t m0 x44 h15 y41e ff4 fsb fc3 sc0 ls31 ws305">nary that maps numbers to <span class="lsc5 ws59f">their coun<span class="_ _0"></span>ts. Python provides<span class="ls3d ws3d3"> two tools that can simplify</span></span></div><div class="t m0 x44 h15 y420 ff4 fsb fc3 sc0 ls3b ws70">this function too.</div><div class="t m0 x32 h15 y9a1 ff4 fsb fc3 sc0 ls1c ws4c4"> The first is </div><div class="t m5 x38 h24 y9a2 ffd fsc fc3 sc0 lsa0 ws0">max</div><div class="t m0 x3a h15 y9a1 ff4 fsb fc3 sc0 ls78 ws0">. </div><div class="t m5 x67 h24 y9a2 ffd fsc fc3 sc0 lsa0 ws0">max</div><div class="t m0 x3 h15 y9a1 ff4 fsb fc3 sc0 ls38 ws193"> accepts an iterable (lists, se<span class="ls3b ws503">ts, dictionaries, and so on) and</span></div><div class="t m0 x44 h15 y15e ff4 fsb fc3 sc0 ls79 wsf6">returns the maxim<span class="_ _e"></span>um value from that it<span class="ls1b ws40">erab<span class="_ _e"></span>le. In the case of a dictionary,<span class="_ _e"></span> </span></div><div class="t m5 x105 h24 y9a3 ffd fsc fc3 sc0 lsa0 ws0">max</div><div class="t m0 x10a h15 y15e ff4 fsb fc3 sc0 ls78 ws0"> returns</div><div class="t m0 x44 h15 y422 ff4 fsb fc3 sc0 ls2d ws5a0">the maximum value of the <span class="ff3 ls5e ws0">keys</span><span class="ls47 ws2d5"> <span class="_ _0"></span>by default. The keys of the </span></div><div class="t m5 x9c h24 y9a4 ffd fsc fc3 sc0 lsa0 ws0">counts</div><div class="t m0 x117 h15 y422 ff4 fsb fc3 sc0 ls3b ws265"> dictionary are the</div><div class="t m0 x44 h15 y9a5 ff4 fsb fc3 sc0 ls3b ws22b">numbers themselves, no<span class="_ _e"></span>t the counts. </div><div class="t m5 x85 h24 y9a6 ffd fsc fc3 sc0 ls6 ws0">max</div><div class="t m0 xd h15 y9a5 ff4 fsb fc3 sc0 ls3a ws5a1"> accepts a second argument, </div><div class="t m5 x6 h24 y9a6 ffd fsc fc3 sc0 lsa0 ws0">key</div><div class="t m0 x105 h15 y9a5 ff4 fsb fc3 sc0 ls6c ws5a2">, which is a</div><div class="t m0 x44 h15 y9a7 ff4 fsb fc3 sc0 ls5e ws57">function that tells </div><div class="t m5 x39 h24 y9a8 ffd fsc fc3 sc0 lsa0 ws0">max</div><div class="t m0 xb1 h15 y9a7 ff4 fsb fc3 sc0 ls79 wsf6"> what part of the <span class="_ _e"></span>iterable to use.</div><div class="t m0 x32 h15 y424 ff4 fsb fc3 sc0 ls51 ws43"> Python will only pass one argument to </div><div class="t m5 x27 h24 y9a9 ffd fsc fc3 sc0 ls6 ws0">key</div><div class="t m0 x10e h15 y424 ff4 fsb fc3 sc0 ls48 ws2be">: the value from the iterable. In the case</div><div class="t m0 x44 h15 y425 ff4 fsb fc3 sc0 ls31 ws58">of dictionaries, Python iterates over th<span class="ls5e ws3c9">eir keys, so the function passed to the </span></div><div class="t m5 xec h24 y9aa ffd fsc fc3 sc0 lsa0 ws0">key</div><div class="t m0 x2c h15 y425 ff4 fsb fc3 sc0 ls1f ws45"> argu-</div><div class="t m0 x44 h15 y427 ff4 fsb fc3 sc0 ls2e ws4a3">ment for </div><div class="t m5 xef h24 y9ab ffd fsc fc3 sc0 ls6 ws0">max</div><div class="t m0 x1c h15 y427 ff4 fsb fc3 sc0 ls42 ws32"> will only get the numbers but not their counts. You need to tell </div><div class="t m5 x9a h24 y9ab ffd fsc fc3 sc0 lsa0 ws0">key</div><div class="t m0 x109 h15 y427 ff4 fsb fc3 sc0 ls129 ws5a3"> that,</div><div class="t m0 x44 h15 y428 ff4 fsb fc3 sc0 ls38 ws256">when given a number, it should index the </div><div class="t m5 x65 h24 y9ac ffd fsc fc3 sc0 lsa0 ws0">counts</div><div class="t m0 x51 h15 y428 ff4 fsb fc3 sc0 ls6 ws5a4"> dictionary at that number to get the</div><div class="t m0 x44 h15 y429 ff4 fsb fc3 sc0 ls30 ws414">count value. Writing a separate funct<span class="_ _e"></span>ion in the module won’t work because </div><div class="t m5 xfc h24 y9ad ffd fsc fc3 sc0 lsa0 ws0">counts</div><div class="t m0 x44 h15 y42a ff4 fsb fc3 sc0 ls71 wsd4">won’t be available at all in its name<span class="ls51 ws47">space. How can you get around this?</span></div><div class="t m0 x32 h15 y9ae ff4 fsb fc3 sc0 ls1f ws29a"> In functional progr<span class="_ _0"></span>amming, it’s common<span class="ls3a ws1c6"> to pass functions as arguments <span class="_ _0"></span>to other</span></div><div class="t m0 x44 h15 y9af ff4 fsb fc3 sc0 ls3a ws4b7">functions, and sometimes thos<span class="ls34 ws13b">e passed functions are short and clear enough that they</span></div><div class="t m0 x44 h15 y9b0 ff4 fsb fc3 sc0 ls3a ws19f">don’t need names. Unlike most of the fu<span class="ls5e ws58f">nctions you’ve probably written in Python,</span></div><div class="c x68 y7c5 w9 h79"><div class="t m0 x43 h14 y7c6 ff12 fs7 fcb sc0 lsd2 ws38c">The cou<span class="ff13 ls6 ws0">n</span><span class="ls12f ws4b2">ts a<span class="ff13 ls6 ws0">r<span class="ff12 ws317">e i</span>n<span class="ff12 ls106">tege</span>r</span><span class="ls124 ws5a5">s, so the </span></span></div><div class="t m0 x43 h14 y7c7 ff12 fs7 fcb sc0 lsfd ws5a6">default type of each value i<span class="ff13 ls6 ws0">n</span><span class="ls105 ws565"> the </span></div><div class="t m0 x43 h14 y7c8 ff12 fs7 fcb sc0 ls105 ws325">defaultdict should be i<span class="ff13 ls6 ws0">n<span class="ff12 lsd2">t.</span></span></div></div><div class="c x10d y9b1 w3e ha0"><div class="t m0 x42 h14 y8b5 ff12 fs7 fcb sc0 lsd2 ws35c">The default value fo<span class="ff13 ls6 ws0">r<span class="ff12 lse1"> i</span>n</span><span class="ls10c ws3d9">t is 0, so </span></div><div class="t m0 x42 h14 y8b6 ff12 fs7 fcb sc0 lsd4 ws4ee">the fi<span class="ff13 ls6 ws0">r</span><span class="lsd6 ws2a7">st ti<span class="ff13 ls6 ws0">m</span><span class="ls10a ws470">e we see a <span class="ff13 ls6 ws0">n<span class="ff12">u</span>m<span class="ff12 lsec">be</span>r<span class="ff12 lse2">, </span></span></span></span></div><div class="t m0 x42 h14 y8b7 ff12 fs7 fcb sc0 ls88 ws314">its cou<span class="ff13 ls6 ws0">n</span><span class="lsda ws2aa">t will be 0 + </span></div><div class="t m0 x20 h92 y9b2 ff14 fs24 fcb sc0 ls6 ws0">1</div><div class="t m0 xd8 h14 y8b7 ff12 fs7 fcb sc0 ls88 ws314"> = </div><div class="t m0 x1c h92 y9b2 ff14 fs24 fcb sc0 ls6 ws0">1</div><div class="t m0 xac h14 y8b7 ff12 fs7 fcb sc0 ls6 ws0">.</div></div><div class="c x6b y9b3 w3f h43"><div class="t m0 xea h14 y2f2 ff12 fs7 fcb sc0 ls146 ws0">Cou<span class="ff13 ls6">n</span><span class="lsd2">te<span class="ff13 ls6">r</span><span class="lsfc ws5a7"> is also i</span><span class="ff13 ls6">n</span><span class="lsda ws2aa"> the </span></span></div><div class="t m0 xea h14 y9b4 ff12 fs7 fcb sc0 lsed ws0">collectio<span class="ff13 ls6">n</span><span class="ls10e">s <span class="ff13 ls6">m</span><span class="lsda">odule.</span></span></div></div><div class="c xa1 y9b5 wa h79"><div class="t m0 x43 h14 y9b6 ff12 fs7 fcb sc0 lsd5 ws0">Acts <span class="ff13 ls6">n<span class="ff12">ea</span>r</span><span class="lsfd ws310">ly ide</span><span class="ff13 ls6">n</span><span class="lsd2 ws35c">tically to the dict </span></div><div class="t m0 x43 h14 y9b7 ff12 fs7 fcb sc0 ls105 ws327">of cou<span class="ff13 ls6 ws0">n</span><span class="ls10d ws35b">ts you <span class="ff13 ls6 ws0">m<span class="ff12 ls10a">ade </span>m<span class="ff12">a</span>n<span class="ff12 lsda">ually</span></span></span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
