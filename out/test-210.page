<div id="pfd2" class="pf w0 h0" data-page-no="d2"><div class="pc pcd2 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgd2.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">186</div><div class="t m0 x92 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xd3 h2c y1d0 ffb fs19 fcb sc0 ls158 ws0">HAPTER</div><div class="t m0 xe4 h2b y1cf ffb fs18 fcb sc0 ls1bb ws730"> 10</div><div class="t m0 x2a h2d y80 ffa fs7 fcb sc0 ls6 ws0">Achieving loose coupling</div><div class="t m0 x44 h1f y16c0 ffc fs13 fc2 sc0 ls225 ws93f">C<span class="_ _e"></span>o<span class="_ _e"></span>up<span class="_ _e"></span>l<span class="_ _e"></span>i<span class="_ _e"></span>n<span class="_ _e"></span>g<span class="_ _e"></span> in<span class="_ _e"></span> B<span class="_ _e"></span>a<span class="_ _e"></span>r<span class="_ _e"></span>k<span class="_ _10c"></span>10.3</div><div class="t m0 x44 h15 y260 ff4 fsb fc3 sc0 ls2d ws1a8">You can separate concerns and encapsulate <span class="ls20 ws40a">behaviors all you like, but those concerns</span></div><div class="t m0 x44 h15 y261 ff4 fsb fc3 sc0 lsb3 ws0">i<span class="_ _25"></span>n<span class="_ _1c"></span>e<span class="_ _1d"></span>v<span class="_ _25"></span>i<span class="_ _1c"></span>t<span class="_ _1c"></span>a<span class="_ _1c"></span>b<span class="_ _1c"></span>l<span class="_ _1c"></span>y<span class="_ _1c"></span> n<span class="_ _1c"></span>e<span class="_ _1c"></span>e<span class="_ _1c"></span>d<span class="_ _1c"></span> t<span class="_ _1c"></span>o<span class="_ _1c"></span> i<span class="_ _1c"></span>n<span class="_ _1c"></span>t<span class="_ _1c"></span>e<span class="_ _1c"></span>r<span class="_ _1c"></span>a<span class="_ _1c"></span>c<span class="_ _1c"></span>t<span class="_ _1c"></span> w<span class="_ _1c"></span>i<span class="_ _1c"></span>t<span class="_ _1c"></span>h<span class="_ _1c"></span> e<span class="_ _1c"></span>a<span class="_ _1c"></span>c<span class="_ _1c"></span>h<span class="_ _1c"></span> o<span class="_ _1d"></span>t<span class="_ _25"></span>h<span class="_ _1c"></span>e<span class="_ _1c"></span>r<span class="_ _1c"></span>.<span class="_ _1c"></span> C<span class="_ _1c"></span>o<span class="_ _1c"></span>u<span class="_ _1c"></span>p<span class="_ _1c"></span>l<span class="_ _1c"></span>i<span class="_ _1c"></span>n<span class="_ _1c"></span>g<span class="_ _1c"></span> i<span class="_ _1c"></span>s<span class="_ _1c"></span> a<span class="_ _1c"></span> n<span class="_ _1c"></span>e<span class="_ _1c"></span>c<span class="_ _1c"></span>e<span class="_ _1c"></span>s<span class="_ _1c"></span>s<span class="_ _1c"></span>a<span class="_ _1c"></span>r<span class="_ _1c"></span>y<span class="_ _1c"></span> p<span class="_ _1c"></span>a<span class="_ _1c"></span>r<span class="_ _1c"></span>t<span class="_ _1c"></span> o<span class="_ _1c"></span>f<span class="_ _1c"></span> <span class="_ _e"></span>s<span class="_ _25"></span>o<span class="_ _1c"></span>f<span class="_ _1c"></span>t<span class="_ _1c"></span>w<span class="_ _1c"></span>a<span class="_ _1c"></span>r<span class="_ _1c"></span>e</div><div class="t m0 x44 h15 y262 ff4 fsb fc3 sc0 ls48 ws68b">development, but it doesn’t <span class="_ _e"></span>have to be <span class="ff3 ls42 ws0">tight</span><span class="ls36 ws158"> coupling. Now that you’re familiar with</span></div><div class="t m0 x44 h15 y118 ff4 fsb fc3 sc0 ls2f wsf3">some of the signs of tight coup<span class="ls7d ws5e8">ling, it<span class="_ _e"></span>’s time to look at te<span class="ls1f ws1ab">chniques for reducing it while</span></span></div><div class="t m0 x44 h15 ya0 ff4 fsb fc3 sc0 ls1b ws940">keeping your c<span class="_ _e"></span>ode in working order. Some <span class="_ _e"></span>of<span class="ls5e ws2db"> these will be familiar to <span class="_ _e"></span>you, and you’ll</span></div><div class="t m0 x44 h15 y263 ff4 fsb fc3 sc0 ls34 ws9f">see how they can be further a<span class="ls1f ws14">ppl<span class="_ _0"></span>ied to the Bark application.</span></div><div class="t m0 x32 h15 y264 ff4 fsb fc3 sc0 ls81 ws941"> Remember the mult<span class="_ _e"></span>itier architecture yo<span class="_ _e"></span><span class="ls3e ws942">u used <span class="_ _0"></span>for Bark, shown again in figure</span></div><div class="t m0 x44 h15 y265 ff4 fsb fc3 sc0 ls3a ws1e0">10.6. Each tier has a distinct set of concerns:</div><div class="t m0 x86 h29 y16c1 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y16c2 ff4 fsb fc3 sc0 ls1c ws29d">The presentation layer shows information to, and gets information from, the</div><div class="t m0 x87 h15 y163 ff4 fsb fc3 sc0 ls79 ws0">user.</div><div class="t m0 x86 h29 y16c3 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y298 ff4 fsb fc3 sc0 ls36 ws22c">The business logic layer contains the “smar<span class="_ _0"></span>ts” of the application—the logic</div><div class="t m0 x87 h15 y166 ff4 fsb fc3 sc0 ls30 ws36">related to the task at hand.</div><div class="t m0 x86 h29 y16c4 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y1b7 ff4 fsb fc3 sc0 ls9e ws285">The persistence laye<span class="_ _0"></span>r stores data for the<span class="_ _0"></span> application, to b<span class="_ _0"></span>e reused later on.</div><div class="t m0 x44 h15 y66 ff4 fsb fc3 sc0 ls3d ws2c">You hooked the presentation layer t<span class="_ _e"></span>o the <span class="ls36 ws35">business logic layer using the command pat-</span></div><div class="t m0 x44 h15 y16c5 ff4 fsb fc3 sc0 ls71 ws2e5">tern. Each option in the menu triggers<span class="ls2f ws3f7"> a corresponding command in the business</span></div><div class="t m0 x44 h15 y16c6 ff4 fsb fc3 sc0 ls3e ws859">logic, through that command’s </div><div class="t m5 x11 h24 yd9 ffd fsc fc3 sc0 lsa0 ws0">execute</div><div class="t m0 xd h15 yd9 ff4 fsb fc3 sc0 ls1e ws67e"> method. The set of commands with their</div><div class="t m0 x44 h15 y16a8 ff4 fsb fc3 sc0 ls3a ws0">shared </div><div class="t m5 x140 h24 y16c7 ffd fsc fc3 sc0 lsa0 ws0">execute</div><div class="t m0 x38 h15 y16c8 ff4 fsb fc3 sc0 ls30 wsbd"> abstraction are a great example of loose coupling.</div><div class="c x42 y16c9 wce h14c"><div class="t m0 xbb h14d y16ca ff15 fs35 fc12 sc0 ls6 ws0">requests.get(</div><div class="t m0 xbb h14d y16cb ff15 fs35 fc12 sc0 ls6 ws0">    &apos;https://www.google.com&apos;</div><div class="t m0 xbb h14d y16cc ff15 fs35 fc12 sc0 ls6 ws0">)</div><div class="t m0 xb7 h14e y16cd ff1b fs36 fc12 sc0 ls6 ws0">1<span class="ff12">. Y<span class="_ _1c"></span>ou can use </span></div><div class="t m0 x136 h14f y16ce ff1e fs37 fc12 sc0 ls6 ws0">requests</div><div class="t m0 xb7 h14e y16cf ff12 fs36 fc12 sc0 ls6 ws0">   as an abstraction for</div><div class="t m0 xb7 h14e y16d0 ff12 fs36 fc12 sc0 ls6 ws0">   making HTTP requests.</div><div class="t m0 x3d h14e y16d1 ff12 fs36 fc12 sc0 ls6 ws0">2. Usually<span class="_ _1c"></span>, </div><div class="t m0 x7e h14f y16d2 ff1e fs37 fc12 sc0 ls6 ws0">requests</div><div class="t m0 x3d h14e y16d3 ff12 fs36 fc12 sc0 ls6 ws0">    handles all the details</div><div class="t m0 x3d h14e y16cd ff12 fs36 fc12 sc0 ls6 ws0">    of making an HTTP </div><div class="t m0 x116 h14f y16ce ff1e fs37 fc12 sc0 ls6 ws0">GET</div><div class="t m0 x3d h14e y16cf ff12 fs36 fc12 sc0 ls6 ws0">    request and returns the</div><div class="t m0 x3d h14e y16d0 ff12 fs36 fc12 sc0 ls6 ws0">    response to you.</div><div class="t m0 x20 h14d y16d4 ff15 fs35 fc12 sc0 ls6 ws0">&lt;!DOCTYPE html&gt;</div><div class="t m0 x20 h14d y16d5 ff15 fs35 fc12 sc0 ls6 ws0">&lt;html&gt;</div><div class="t m0 x20 h14d y16d6 ff15 fs35 fc12 sc0 ls226 ws0">...</div><div class="t m0 x20 h14d y16d7 ff15 fs35 fc12 sc0 ls226 ws0">&lt;/html&gt;</div><div class="t m0 x116 h14d y16d8 ff15 fs35 fc12 sc0 ls6 ws0">requests.get(</div><div class="t m0 x116 h14d y16d9 ff15 fs35 fc12 sc0 ls6 ws0">    &apos;https://www.google.com&apos;</div><div class="t m0 x116 h14d y16da ff15 fs35 fc12 sc0 ls6 ws0">)</div><div class="t m0 x147 h14d y16db ff15 fs35 fc12 sc0 ls6 ws0">ConnectionTimeout</div><div class="t m0 xc2 h150 y16dc ff11 fs38 fc12 sc0 ls6 ws0">Requests</div><div class="t m0 xbc h150 y16dd ff11 fs38 fc12 sc0 ls227 ws0">Google</div><div class="t m0 x75 h150 y16dc ff11 fs38 fc12 sc0 ls227 ws0">Requests</div><div class="t m0 x5e h150 y16dd ff11 fs38 fc12 sc0 ls227 ws0">Google</div><div class="t m0 xd1 h14e y16de ff12 fs36 fc12 sc0 ls6 ws0">3. Sometimes the request</div><div class="t m0 xd1 h14e y16df ff12 fs36 fc12 sc0 ls6 ws0">    fails, which could be </div><div class="t m0 xd1 h14e y16e0 ff12 fs36 fc12 sc0 ls6 ws0">    because of a variety of </div><div class="t m0 xd1 h14e y16e1 ff12 fs36 fc12 sc0 ls6 ws0">    network issues.</div><div class="t m0 x89 h14e y16e2 ff12 fs36 fc12 sc0 ls228 ws0">4. </div><div class="t m0 x50 h14f y16e3 ff1e fs37 fc12 sc0 ls6 ws0">requests</div><div class="t m0 x60 h14e y16e2 ff12 fs36 fc12 sc0 ls6 ws0"> leaks the details</div><div class="t m0 x89 h14e y16e4 ff12 fs36 fc12 sc0 ls6 ws0">    of HTTP networking failures</div><div class="t m0 x89 h14e y16e5 ff12 fs36 fc12 sc0 ls6 ws0">    in the form of specific types</div><div class="t m0 x89 h14e y16e6 ff12 fs36 fc12 sc0 ls6 ws0">    of exceptions to handle.</div></div><div class="c x42 y16e7 w4 h151"><div class="t m0 xea h2b y16e8 ffb fs18 fcb sc0 ls69 ws44f">Abstractions occasionally leak<span class="_ _10d"></span>Figure 10.5<span class="_ _10e"> </span><span class="ls29 ws37b"> the details they’re trying to hide.</span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
