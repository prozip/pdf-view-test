<div id="pf5a" class="pf w0 h0" data-page-no="5a"><div class="pc pc5a w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg5a.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">66</div><div class="t m0 x67 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xb1 h2c y1d0 ffb fs19 fcb sc0 ls158 ws0">HAPTER</div><div class="t m0 xb6 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 4</div><div class="t m0 x101 h2d y80 ffa fs7 fcb sc0 ls6 ws0">Designing for high performance</div><div class="t m0 x44 h15 y40 ff4 fsb fc3 sc0 ls81 ws0">Enter <span class="_ _e"></span><span class="ff3 ls129">generators</span><span class="ls30 wsef">. Generators are constructs in Python<span class="ls38 ws424"> that produce a single value at a</span></span></div><div class="t m0 x44 h15 y41 ff4 fsb fc3 sc0 ls20 ws3ea">time, pausing until the next value is reques<span class="_ _e"></span><span class="ls1e ws55d">ted (figure 4.5). Thi<span class="_ _0"></span>s acts a lot like the</span></div><div class="t m0 x44 h15 y42 ff4 fsb fc3 sc0 ls31 wsc6">approach you used earlier to read a file line<span class="ls42 ws2f3">-by-line. By yielding one value at a time, a</span></div><div class="t m0 x44 h15 y43 ff4 fsb fc3 sc0 ls38 ws26">generator avoids storing all values it produces in memory at once.</div><div class="t m0 x44 h15 y48f ff4 fsb fc3 sc0 ls2e ws55e">If you’ve used the </div><div class="t m5 x7e h24 y90c ffd fsc fc3 sc0 lsa0 ws0">range</div><div class="t m0 x23 h15 y48f ff4 fsb fc3 sc0 ls71 ws1cb"> function in Python before, you’ve <span class="_ _e"></span>already used a generator.</div><div class="t m5 x44 h24 y90d ffd fsc fc3 sc0 lsa0 ws0">range</div><div class="t m0 x8b h15 y90e ff4 fsb fc3 sc0 ls71 ws14f"> accepts arguments that specify the <span class="ls2e ws55f">bounds of the range you’d li<span class="_ _0"></span>ke. If </span></div><div class="t m5 x2c h24 y90d ffd fsc fc3 sc0 lsa0 ws0">range</div><div class="t m0 x44 h15 y90f ff4 fsb fc3 sc0 ls3d ws2c">stored all the numbers of the <span class="ls51 ws47">range in <span class="_ _e"></span>memory, code like </span></div><div class="t m5 x41 h24 y910 ffd fsc fc3 sc0 lsa0 ws0">range(100_000<span class="_ _e"></span>_000)</div><div class="t m0 xa4 h15 y90f ff4 fsb fc3 sc0 ls21 wsf7"> would</div><div class="t m0 x44 h15 yc6 ff4 fsb fc3 sc0 ls1c ws42a">eat up your available memory<span class="ls42"> in short order. <span class="_ _e"></span>Instead, </span></div><div class="t m5 x53 h24 y492 ffd fsc fc3 sc0 lsa0 ws0">range</div><div class="t m0 x4a h15 yc6 ff4 fsb fc3 sc0 ls7a ws560"> stores only the <span class="ff3 ls3d ws0">bounds</span><span class="ls16f ws561"> of</span></div><div class="t m0 x44 h15 y911 ff4 fsb fc3 sc0 ls51 ws47">the range and produces values fr<span class="ls3a ws28">om it one at a time. But <span class="_ _e"></span>how?</span></div><div class="t m0 x32 h15 y912 ff4 fsb fc3 sc0 ls48 ws31e"> To use space efficiently, generators make<span class="_ _e"></span> use of the </div><div class="t m5 x60 h24 y913 ffd fsc fc3 sc0 lsa0 ws0">yield</div><div class="t m0 x58 h15 y912 ff4 fsb fc3 sc0 ls1c ws94"> Python keyword. After</div><div class="t m0 x44 h15 y494 ff4 fsb fc3 sc0 lsc5 ws42e">producing a value, t<span class="_ _0"></span>hey yield execut<span class="_ _0"></span>ion back to the calli<span class="_ _0"></span>ng code. So </div><div class="t m5 x7d h24 y914 ffd fsc fc3 sc0 lsa0 ws0">yield</div><div class="t m0 xab h15 y494 ff4 fsb fc3 sc0 ls3a ws91"> yields a</div><div class="t m0 x44 h15 y915 ff4 fsb fc3 sc0 ls20 ws51">value and then yields execution.</div><div class="t m0 x32 h15 y916 ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m5 x86 h24 y917 ffd fsc fc3 sc0 lsa0 ws0">yield</div><div class="t m0 xef h15 y916 ff4 fsb fc3 sc0 ls42 ws562"> works a lot like Python’s </div><div class="t m5 xd0 h24 y917 ffd fsc fc3 sc0 lsa0 ws0">return</div><div class="t m0 x7b h15 y916 ff4 fsb fc3 sc0 ls38 ws3fd"> statement, except that you can perform</div><div class="t m0 x44 h15 y262 ff4 fsb fc3 sc0 ls31 ws0">operations <span class="_ _f"></span><span class="ff3 ls30">after</span><span class="ls2f ws3b0"> you yield a value. This can be used to set up for the next value you</span></div><div class="t m0 x44 h15 y918 ff4 fsb fc3 sc0 ls4e ws563">want to produce.<span class="_ _e"></span> The following <span class="ls1e ws6d">listing shows approximately how </span></div><div class="t m5 x2f h24 y919 ffd fsc fc3 sc0 lsa0 ws0">range</div><div class="t m0 x99 h15 y918 ff4 fsb fc3 sc0 ls42 ws1f2"> behaves under</div><div class="t m0 x44 h15 y91a ff4 fsb fc3 sc0 ls5e ws3c9">the hood. Note the use of the </div><div class="t m5 x46 h24 y91a ffd fsc fc3 sc0 lsa0 ws0">yield</div><div class="t m0 x10b h15 y91a ff4 fsb fc3 sc0 ls5e ws3c9"> keyword and the increment of the </div><div class="t m5 x106 h24 y91a ffd fsc fc3 sc0 lsa0 ws0">current</div><div class="t m0 x2c h15 y91a ff4 fsb fc3 sc0 ls3a ws23f"> value</div><div class="t m0 x44 h15 y263 ff3 fsb fc3 sc0 ls30 ws0">after<span class="ff4 ls6"> </span></div><div class="t m5 xae h24 y91b ffd fsc fc3 sc0 lsa0 ws0">yield</div><div class="t m0 x3d h15 y263 ff4 fsb fc3 sc0 ls6f ws52b"> is used.</div><div class="t m0 x44 h3b y91c ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>range(*args):</div><div class="t m0 xae h3b y91d ffd fs18 fc3 sc0 lsb2 ws0">if<span class="_"> </span>len(args)<span class="_"> </span>==<span class="_"> </span>1:</div><div class="t m0 x97 h3b y91e ffd fs18 fc3 sc0 lsb2 ws0">start<span class="_"> </span>=<span class="_"> </span>0</div><div class="t m0 x97 h3b y91f ffd fs18 fc3 sc0 lsb2 ws0">stop<span class="_"> </span>=<span class="_"> </span>args[0]</div><div class="t m0 xae h3b y920 ffd fs18 fc3 sc0 lsb2 ws0">else:</div><div class="t m0 x97 h3b y921 ffd fs18 fc3 sc0 lsb2 ws0">start<span class="_"> </span>=<span class="_"> </span>args[0]</div><div class="t m0 x97 h3b y922 ffd fs18 fc3 sc0 lsb2 ws0">stop<span class="_"> </span>=<span class="_"> </span>args[1]</div><div class="t m0 xae h3b y923 ffd fs18 fc3 sc0 lsb2 ws0">current<span class="_"> </span>=<span class="_"> </span>start</div><div class="t m0 xae h3b y924 ffd fs18 fc3 sc0 lsb2 ws0">while<span class="_"> </span>current<span class="_"> </span>&lt;<span class="_"> </span>stop:</div><div class="t m0 x38 h3b y925 ffd fs18 fc3 sc0 lsb2 ws0">current<span class="_ _73"></span>yield</div><div class="t m0 x8e h3b y926 ffd fs18 fc3 sc0 lsb2 ws0">1<span class="_ _46"></span>+=<span class="_ _74"></span>current</div><div class="t m0 x37 h20 y927 ffb fs7 fc4 sc0 ls6 ws0">Using<span class="_ _4e"></span>Listing<span class="_"> </span>4.2</div><div class="t m0 x67 h62 y928 ff16 fs21 fc4 sc0 ls128 ws0">yield</div><div class="t m0 xe7 h20 y927 ffb fs7 fc4 sc0 ls6 ws0"> to pause and prepare</div><div class="c x44 y3d2 w3c h97"><div class="t m0 xf3 h36 y929 ff11 fs1c fc12 sc0 ls6 ws0">1<span class="_ _75"> </span>2<span class="_ _75"> </span>3<span class="_ _75"> </span>4<span class="_ _75"> </span>5</div><div class="t m6 x114 h40 y92a ff12 fs1f fc12 sc0 ls6 ws0">A list stores all its contents </div><div class="t m6 x114 h40 y92b ff12 fs1f fc12 sc0 ls6 ws0">in memory at one time.</div><div class="t m6 x66 h40 y92c ff12 fs1f fc12 sc0 ls6 ws0">A generator produces a single item</div><div class="t m6 x66 h40 y92d ff12 fs1f fc12 sc0 ls6 ws0">in memory at a time and knows how</div><div class="t m6 x66 h40 y92e ff12 fs1f fc12 sc0 ls6 ws0">to produce the subsequent items.</div><div class="t m0 xf3 h36 y92f ff11 fs1c fc12 sc0 ls6 ws0">1<span class="_ _75"> </span>2<span class="_ _75"> </span>3<span class="_ _75"> </span>4<span class="_ _75"> </span>5</div><div class="t m0 xc6 h36 y930 ff11 fs1c fc12 sc0 ls6 ws0">3<span class="_ _75"> </span>4<span class="_ _75"> </span>5</div><div class="t m0 x4 h98 y931 ff11 fs27 fc12 sc0 ls6 ws0">...</div><div class="t m0 x11a h36 y932 ff11 fs1c fc12 sc0 ls6 ws0">2<span class="_ _75"> </span>3<span class="_ _75"> </span>4<span class="_ _75"> </span>5</div></div><div class="c x44 y933 w2 h99"><div class="t m0 x68 h2b y934 ffb fs18 fcb sc0 ls17 ws43c">Figure 4.5<span class="_ _29"> </span>Saving space with generators</div></div><div class="c x45 y935 w2c h43"><div class="t m0 xc8 h14 y4aa ff12 fs7 fcb sc0 ls88 ws0">Pa<span class="ff13 ls6">r</span><span class="ls170 ws564">ses a</span><span class="ff13 ls6">r</span><span class="lsdd">gu<span class="ff13 ls6">m<span class="ff12">e</span>n</span><span class="ls105 ws565">ts to dete</span><span class="ff13 ls123">rm</span><span class="ls6">i<span class="ff13">n</span>e </span></span></div><div class="t m0 xc8 h14 y936 ff12 fs7 fcb sc0 ls124 ws0">bou<span class="ff13 ls6">n</span><span class="lsdc ws2ac">ds of the </span><span class="ff13 ls6">r<span class="ff12">a</span>n</span><span class="lse1">ge</span></div></div><div class="c xf1 y937 w2b h76"><div class="t m0 x43 h14 y938 ff12 fs7 fcb sc0 lsd2 ws35c">yields each value </div><div class="t m0 x43 h14 y939 ff12 fs7 fcb sc0 ls13d ws0">(o<span class="ff13 ls6">n</span><span class="ls171 ws459">e at a ti</span><span class="ff13 ls6">m<span class="ff12">e)</span></span></div></div><div class="c x68 y28e w9 h79"><div class="t m0 x43 h14 y8ad ff12 fs7 fcb sc0 ls88 ws0">Pe<span class="ff13 ls6">r</span><span class="ls123">fo<span class="ff13">rm</span><span class="ls172 ws566">s the </span><span class="ff13 ls6">n</span><span class="ls11a">ecessa<span class="ff13 ls6">r</span><span class="ls16d">y </span></span></span></div><div class="t m0 x43 h14 y8ae ff12 fs7 fcb sc0 ls173 ws567">setup fo<span class="ff13 ls6 ws0">r</span><span class="lsda ws2aa"> the <span class="ff13 ls6 ws0">n</span><span class="ls88 ws314">ext value</span></span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
