<div id="pf25" class="pf w0 h0" data-page-no="25"><div class="pc pc25 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg25.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">13<span class="_ _36"></span><span class="ffa">Design is democratic</span></div><div class="t m0 x83 h15 y40 ff4 fsb fc3 sc0 ls66 ws237"> It’s to your benef<span class="_ _0"></span>it to get i<span class="_ _0"></span>nput from ot<span class="_ _0"></span>her developers,<span class="_ _0"></span> especially at <span class="_ _0"></span>the early stages.</div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls20 wsac">There’s rarely one way of doing something,<span class="_ _e"></span><span class="ls2f ws270"> so learning many approaches, along with</span></div><div class="t m0 x35 h15 y42 ff4 fsb fc3 sc0 ls2c ws1c">their pros and cons, will empower you to make<span class="_ _0"></span><span class="ls71 ws83"> educated choices, or at least to choose</span></div><div class="t m0 x35 h15 y43 ff4 fsb fc3 sc0 ls36 wsab">what feels best if all other thi<span class="_ _0"></span>ngs are equa<span class="ls71 ws15e">l. Some approaches will make sense for one</span></div><div class="t m0 x35 h15 y44 ff4 fsb fc3 sc0 ls5e ws14a">use case but not for another,<span class="_ _e"></span> so knowing <span class="ls6b ws63">several will increase <span class="_ _0"></span>your productivity.</span></div><div class="t m0 x83 h15 y45 ff4 fsb fc3 sc0 lsc6 ws0"> I<span class="_ _1f"></span>f<span class="_ _1f"></span> y<span class="_ _1f"></span>o<span class="_ _20"></span>u<span class="_ _1f"></span> d<span class="_ _1f"></span>o<span class="_ _1f"></span>n<span class="_ _20"></span>’<span class="_ _1f"></span>t<span class="_ _1f"></span> h<span class="_ _1f"></span>a<span class="_ _1f"></span>v<span class="_ _20"></span>e<span class="_ _1f"></span> t<span class="_ _1f"></span>h<span class="_ _1f"></span>e<span class="_ _20"></span> p<span class="_ _1f"></span>r<span class="_ _1f"></span>i<span class="_ _1f"></span>v<span class="_ _20"></span>i<span class="_ _1f"></span>l<span class="_ _1f"></span>e<span class="_ _1f"></span>g<span class="_ _1f"></span>e<span class="_ _20"></span> o<span class="_ _1f"></span>f<span class="_ _1f"></span> w<span class="_ _20"></span>o<span class="_ _1f"></span>r<span class="_ _1f"></span>k<span class="_ _1f"></span>i<span class="_ _1f"></span>n<span class="_ _20"></span>g<span class="_ _1f"></span> w<span class="_ _1f"></span>i<span class="_ _1f"></span>t<span class="_ _20"></span>h<span class="_ _1f"></span> a<span class="_ _1f"></span>n<span class="_ _20"></span> a<span class="_ _1f"></span>c<span class="_ _1f"></span>t<span class="_ _1f"></span>i<span class="_ _1f"></span>v<span class="_ _20"></span>e<span class="_ _1f"></span> t<span class="_ _1f"></span>e<span class="_ _1f"></span>a<span class="_ _20"></span>m<span class="_ _1f"></span> o<span class="_ _1f"></span>f<span class="_ _1f"></span> d<span class="_ _20"></span>e<span class="_ _1f"></span>v<span class="_ _1f"></span>e<span class="_ _1f"></span>l<span class="_ _20"></span>o<span class="_ _1f"></span>p<span class="_ _1f"></span>e<span class="_ _1f"></span>r<span class="_ _20"></span>s<span class="_ _1f"></span>,</div><div class="t m0 x35 h15 y46 ff4 fsb fc3 sc0 ls36 ws1b9">examining some open source <span class="ls5e ws271">projects is another way to get so<span class="_ _e"></span>me exposure to the</span></div><div class="t m0 x35 h15 y47 ff4 fsb fc3 sc0 ls20 ws272">collaborative nature of software. Look <span class="ls71 ws273">for discussions where developers disagreed</span></div><div class="t m0 x35 h15 y48 ff4 fsb fc3 sc0 ls51 ws12d">(constructively!) about how to achieve some <span class="ls2d">ta<span class="_ _0"></span>sk, and see what kinds of considerations</span></div><div class="t m0 x35 h15 y49 ff4 fsb fc3 sc0 ls5e ws274">came into play on the way to a resolution.<span class="_ _e"></span> <span class="ls66 ws275">The tho<span class="_ _0"></span>ught process that<span class="ls34 ws185"> leads to a solution</span></span></div><div class="t m0 x35 h15 y4a ff4 fsb fc3 sc0 ls5e ws274">is often more important than the specific <span class="_ _e"></span>so<span class="ls47 ws276">lution the developers choo<span class="_ _e"></span>se. This kind of</span></div><div class="t m0 x35 h15 y4b ff4 fsb fc3 sc0 ls25 ws277">reasoning and discussion capability wi<span class="_ _0"></span>ll get you through more difficulties than knowing</div><div class="t m0 x35 h15 y4c ff4 fsb fc3 sc0 ls62 ws278">a specific algo<span class="_ _e"></span>rithm.</div><div class="t m0 x19 h26 y2b1 ffc fs15 fc2 sc0 lsc7 ws279">1<span class="_ _0"></span>.<span class="_ _0"></span>7<span class="_ _0"></span>.<span class="_ _0"></span>1<span class="_ _11"> </span>Presen<span class="_ _e"></span>ce of mind</div><div class="t m0 x35 h15 y4f ff4 fsb fc3 sc0 ls20 ws251">It’s easy to get carried away when writing software. Think about a time when you were</div><div class="t m0 x35 h15 y2b2 ff4 fsb fc3 sc0 ls4e ws27a">excited to get something done. You were prob<span class="_ _e"></span><span class="ls42 ws27b">ably anxious to see your <span class="_ _0"></span>code work, and</span></div><div class="t m0 x35 h15 yed ff4 fsb fc3 sc0 ls4e ws27c">it’s often difficult in that situation to sit <span class="_ _e"></span><span class="ls38 ws166">still and be <span class="_ _0"></span>deliberate about writing perfect</span></div><div class="t m0 x35 h15 y52 ff4 fsb fc3 sc0 lsbb ws0">code.</div><div class="t m0 x83 h15 y53 ff4 fsb fc3 sc0 ls2d ws27d"> When working with a small script or do<span class="ls3d ws27e">ing some exploratory <span class="lsbc ws27f">work, a quick feed-</span></span></div><div class="t m0 x35 h15 y54 ff4 fsb fc3 sc0 ls44 ws280">back cycle can be valuable in staying pro<span class="ls1f ws281">ductive. <span class="_ _0"></span>I often do this kind of wor<span class="_ _0"></span>k in</span></div><div class="t m0 x35 h15 y199 ff4 fsb fc3 sc0 ls30 ws0">Python’s <span class="ff3 ls20 ws17">read-eval-print loop</span><span class="lsc8 wsec"> (REPL).</span></div><div class="t m0 x35 h15 y2b3 ff4 fsb fc3 sc0 ls20 ws1e6">The example in listing 1.1 shows how you mi<span class="ls3e ws282">ght work through transformi<span class="_ _0"></span>ng a dictio-</span></div><div class="t m0 x35 h15 y236 ff4 fsb fc3 sc0 lsc9 ws0">n<span class="_ _1d"></span>a<span class="_ _1d"></span>r<span class="_ _1d"></span>y<span class="_ _1c"></span> o<span class="_ _0"></span>f<span class="_ _1c"></span> d<span class="_ _1d"></span>a<span class="_ _1d"></span>t<span class="_ _1d"></span>a<span class="_ _1d"></span>.<span class="_ _1d"></span> G<span class="_ _1d"></span>i<span class="_ _1d"></span>v<span class="_ _1d"></span>e<span class="_ _1d"></span>n<span class="_ _1d"></span> a<span class="_ _1d"></span> d<span class="_ _1d"></span>i<span class="_ _1d"></span>c<span class="_ _1d"></span>t<span class="_ _1d"></span>i<span class="_ _1d"></span>o<span class="_ _1d"></span>n<span class="_ _1d"></span>a<span class="_ _1d"></span>r<span class="_ _1d"></span>y<span class="_ _1d"></span> t<span class="_ _1d"></span>h<span class="_ _1d"></span>a<span class="_ _1d"></span>t<span class="_ _1d"></span> m<span class="_ _1d"></span>a<span class="_ _1d"></span>p<span class="_ _1d"></span>s<span class="_ _1d"></span> s<span class="_ _1d"></span>t<span class="_ _1d"></span>a<span class="_ _1d"></span>t<span class="_ _1c"></span>e<span class="_ _0"></span>s<span class="_ _1c"></span> i<span class="_ _1d"></span>n<span class="_ _1d"></span> t<span class="_ _1d"></span>h<span class="_ _1d"></span>e<span class="_ _1d"></span> U<span class="_ _1d"></span>n<span class="_ _1d"></span>i<span class="_ _1d"></span>t<span class="_ _1d"></span>e<span class="_ _1d"></span>d<span class="_ _1d"></span> S<span class="_ _1d"></span>t<span class="_ _1d"></span>a<span class="_ _1d"></span>t<span class="_ _1d"></span>e<span class="_ _1d"></span>s<span class="_ _1d"></span> t<span class="_ _1d"></span>o<span class="_ _1d"></span> t<span class="_ _1d"></span>h<span class="_ _1d"></span>e<span class="_ _1d"></span>i<span class="_ _1d"></span>r<span class="_ _1d"></span> c<span class="_ _1d"></span>a<span class="_ _1d"></span>p<span class="_ _1d"></span>i<span class="_ _1d"></span>t<span class="_ _1d"></span>a<span class="_ _1d"></span>l</div><div class="t m0 x35 h15 y1d4 ff4 fsb fc3 sc0 ls36 ws283">cities, you want to produce a list of all <span class="ls3a ws284">capital cities in alphabetical order. The</span></div><div class="t m0 x35 h15 y1d5 ff4 fsb fc3 sc0 ls36 ws6a">approach is something like this:</div><div class="t m0 x8a h3d y2b4 ffb fs1e fca sc0 ls6 ws0">1</div><div class="t m0 x48 h15 y2b5 ff4 fsb fc3 sc0 ls9e ws285">Get the city value<span class="_ _0"></span>s from the dictionary.</div><div class="t m0 x8a h3d y2b6 ffb fs1e fca sc0 ls6 ws0">2</div><div class="t m0 x48 h15 y2b7 ff4 fsb fc3 sc0 ls6 ws72">Sort the city values.</div><div class="c x35 y2b8 w2 h3c"><div class="t m0 xb7 h2f y1da ffb fs15 fc2 sc0 lsb4 ws286">The REPL</div><div class="t m0 xb7 h30 y2b9 fff fsc fc3 sc0 lsca ws287">The REPL—prono<span class="_ _e"></span>unced REH-pull—is what’s h<span class="_ _e"></span>iding behind the </div><div class="t m5 xf h24 y2b9 ffd fsc fc3 sc0 lsa0 ws0">&gt;&gt;&gt;</div><div class="t m0 x6c h30 y2b9 fff fsc fc3 sc0 lscb ws288"> when you type</div><div class="t m5 xb7 h24 y2ba ffd fsc fc3 sc0 lsa0 ws0">python</div><div class="t m0 xbd h30 y2ba fff fsc fc3 sc0 ls98 ws289"> at the terminal. It <span class="ff10 ls9a ws0">reads</span><span class="lscc ws28a"> what you<span class="_ _e"></span> type, <span class="ff10 ls6 ws0">evaluates</span><span class="ls9a ws28b"> it, <span class="ff10 lscd ws0">prints</span><span class="lscb ws28c"> th<span class="_ _e"></span>e result, and</span></span></span></div><div class="t m0 xb7 h30 y2bb fff fsc fc3 sc0 ls90 ws28d">waits for it all to happen again (the<span class="_ _e"></span> <span class="ff10 lscb ws0">loop</span><span class="lsce ws28e">). Many<span class="_ _0"></span> languages prov<span class="_ _0"></span>ide a REPL so devel-</span></div><div class="t m0 xb7 h30 y2bc fff fsc fc3 sc0 ls98 ws28f">opers can interactively te<span class="_ _e"></span>st a few lines of code.</div><div class="t m0 xb7 h30 y2bd fff fsc fc3 sc0 lscf ws290">But beware: at some<span class="_ _0"></span> point, the back and forth<span class="_ _0"></span> of writing a quick line of code and s<span class="_ _0"></span>ee-</div><div class="t m0 xb7 h30 y2be fff fsc fc3 sc0 ls93 ws291">ing how it changes the pr<span class="_ _0"></span>ogram’s output become<span class="_ _0"></span>s tedious. You’ll wa<span class="_ _0"></span>nt to write length-</div><div class="t m0 xb7 h30 y2bf fff fsc fc3 sc0 lsd0 ws292">ier or longer-lived code in a file and run it with the interpreter. Each perso<span class="_ _e"></span>n has a</div><div class="t m0 xb7 h30 y2c0 fff fsc fc3 sc0 ls98 ws173">different threshold; I usually hit mine whe<span class="_ _e"></span>n I want to reuse a line of code I previously</div><div class="t m0 xb7 h30 y2c1 fff fsc fc3 sc0 lsd1 ws293">wrote, and it<span class="_ _0"></span>’s 15 lines ba<span class="_ _0"></span>ck in my history<span class="_ _0"></span>.</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
