<div id="pfcd" class="pf w0 h0" data-page-no="cd"><div class="pc pccd w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgcd.png"/><div class="t m0 xa0 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">181<span class="_ _f7"></span><span class="ffa">Defining coupling</span></div><div class="t m0 x87 h3b y395 ffd fs18 fc3 sc0 lsb2 ws0">...</div><div class="t m0 x87 h3b y396 ffd fs18 fc3 sc0 lsb2 ws0">search_query<span class="_"> </span>=<span class="_"> </span>remove_quotes(search_query)</div><div class="t m0 x87 h3b y397 ffd fs18 fc1 sc0 lsb2 ws0">...</div><div class="t m0 x35 h15 y464 ff4 fsb fc3 sc0 ls1ec ws918">Read on to understand what <span class="ff3 ls21c ws0">loose</span><span class="ls1ed ws919">  coupling is and how it can he<span class="lse7 ws91a">lp you in situations like this. </span></span></div><div class="t m0 x19 h26 y1641 ffc fs15 fc2 sc0 ls21b ws907">10.1.3<span class="_ _fc"> </span>L<span class="_ _e"></span>oo<span class="_ _e"></span>s<span class="_ _e"></span>e<span class="_ _e"></span> co<span class="_ _e"></span>u<span class="_ _e"></span>pl<span class="_ _e"></span>i<span class="_ _e"></span>n<span class="_ _e"></span>g</div><div class="t m0 x35 h15 y9e4 ff3 fsb fc3 sc0 ls36 ws25d">Loose coupling<span class="ff4 ls1c ws42a"> is the ability of two pieces of code to interact to accomplish a task <span class="_ _e"></span>with-</span></div><div class="t m0 x35 h15 y3f3 ff4 fsb fc3 sc0 ls3a ws1cf">out either relying heavily on the details of the other. This is often achieved through</div><div class="t m0 x35 h15 y9e5 ff4 fsb fc3 sc0 ls2f ws3d4">the use of shared abstractions. You learned <span class="ls42 wsde">about interfaces in earlier chapters, and</span></div><div class="t m0 x35 h15 y9e6 ff4 fsb fc3 sc0 ls51 ws47">you used a shared abstraction in Ba<span class="ls30 ws36">rk to achieve the command pattern.</span></div><div class="t m0 x83 h15 yb8 ff4 fsb fc3 sc0 ls42 ws1ba"> Loosely coupled code implements and uses<span class="_ _e"></span><span class="ls1c"> interfaces; at the extreme end, it uses</span></div><div class="t m0 x35 h15 y9e7 ff3 fsb fc3 sc0 ls6 ws0">only<span class="ff4 ls6c ws7ae"> interfaces for interc<span class="_ _0"></span>ommunication. Pyth<span class="_ _0"></span>on’s dynamic typing allo<span class="_ _0"></span>ws us to relax</span></div><div class="t m0 x35 h15 y9e8 ff4 fsb fc3 sc0 ls42 ws32">this a bit, but there’s a philosophy here<span class="ls79 wsf6"> I’d<span class="_ _e"></span> really like to emphasi<span class="_ _e"></span>ze to you.</span></div><div class="t m0 x83 h15 y9e9 ff4 fsb fc3 sc0 ls6c ws7c9"> If you begin to<span class="_ _0"></span> think about the<span class="_ _0"></span> intercom<span class="ls2d ws344">munication between pieces of your code</span></div><div class="t m0 x35 h15 y9ea ff4 fsb fc3 sc0 ls3d ws357">in terms of the <span class="ff3 ls44 ws0">messages</span><span class="ls30 ws58c"> that objects send to <span class="_ _e"></span>each other (figure 10.2), rather than</span></div><div class="t m0 x35 h15 y9eb ff4 fsb fc3 sc0 ls2d ws3f2">focusing on the objects themse<span class="ls1c ws37a">lves, you’ll begin to<span class="_ _e"></span> identify cleaner abstractions and</span></div><div class="t m0 x35 h15 y9ec ff4 fsb fc3 sc0 ls2d ws492">stronger cohesion. What are messages? <span class="ls34 ws4f2">Messages are the questions you ask of an</span></div><div class="t m0 x35 h15 y9ed ff4 fsb fc3 sc0 ls7a ws2c3">object or the<span class="_ _0"></span> things you tell it to<span class="_ _0"></span> do.</div><div class="c x51 y1642 w5f h13e"><div class="t m0 x12e h14 y9c3 ff12 fs7 fcb sc0 ls6 ws317">Calls the <span class="ff13 ws0">n</span><span class="ls17f ws917">ew fu</span><span class="ff13 ws0">n<span class="ff12 lsf2">ctio</span>n<span class="ff12"> </span></span></div><div class="t m0 x12e h14 y9c4 ff12 fs7 fcb sc0 ls6 ws0">a<span class="ff13">n</span><span class="lse0">ywhe</span><span class="ff13">r</span><span class="lsfc ws5a7">e you </span><span class="ff13">n</span>o<span class="ff13 ls123">rm</span><span class="ls125">alize </span></div><div class="t m0 x12e h14 y7c8 ff12 fs7 fcb sc0 ls10c ws0">que<span class="ff13 ls6">r</span><span class="lsf2">ies</span></div></div><div class="c x12c y1643 wc8 h13f"><div class="t m0 x11c h5f y1644 ff15 fs1c fc12 sc0 ls6 ws0">ProductA</div><div class="t m0 x8a h5f y1645 ff15 fs1c fc12 sc0 ls6 ws0">User</div><div class="t m0 x8e h5f y1644 ff15 fs1c fc12 sc0 ls6 ws0">Cart</div><div class="t m0 x66 h5f y1646 ff15 fs1c fc12 sc0 ls6 ws0">Logger</div><div class="t m0 x18 h36 y1647 ff11 fs1c fc12 sc0 ls6 ws0">“What’s in</div><div class="t m0 x1d h36 y1648 ff11 fs1c fc12 sc0 ls6 ws0">my cart?”</div><div class="t m0 x11d h36 y1649 ff11 fs1c fc12 sc0 ls6 ws0">“What’s the current price?”</div><div class="t m0 xe7 h12b y164a ff1b fs2c fc12 sc0 ls6 ws0">1</div><div class="t m0 x8d h37 y164b ff12 fs1d fc12 sc0 ls6 ws0">. Some messages are queries to get a</div><div class="t m0 xe7 h37 y164c ff12 fs1d fc12 sc0 ls6 ws0">    value from an object. In Python, these</div><div class="t m0 xe7 h37 y164d ff12 fs1d fc12 sc0 ls6 ws0">    are attribute accesses or methods that</div><div class="t m0 xe7 h37 y164e ff12 fs1d fc12 sc0 ls6 ws0">    return a value but don’t affect any data.</div><div class="t m0 x56 h12b y164f ff1b fs2c fc12 sc0 ls6 ws0">2. </div><div class="t m0 x2a h37 y1650 ff12 fs1d fc12 sc0 ls6 ws0">Other messages are commands</div><div class="t m0 x56 h37 y1651 ff12 fs1d fc12 sc0 ls6 ws0">    that typically pass some data and</div><div class="t m0 x56 h37 y1652 ff12 fs1d fc12 sc0 ls6 ws0">    cause a change or action to occur<span class="_ _1c"></span>.</div><div class="t m0 x3c h36 y1653 ff11 fs1c fc12 sc0 ls6 ws0">“Add product A,</div><div class="t m0 x82 h36 y1654 ff11 fs1c fc12 sc0 ls6 ws0">please.”</div><div class="t m0 x56 h5f y1655 ff15 fs1c fc12 sc0 ls6 ws0">&quot;Log this message, please!&quot;</div><div class="t m0 x56 h5f y1656 ff15 fs1c fc12 sc0 ls6 ws0">{</div><div class="t m0 x56 h5f y1657 ff15 fs1c fc12 sc0 ls6 ws0">     &quot;event_type&quot;: “purchase&quot;,</div><div class="t m0 x56 h5f y1658 ff15 fs1c fc12 sc0 ls6 ws0">     &quot;user_id&quot;: &quot;15478&quot;</div><div class="t m0 x56 h5f y1659 ff15 fs1c fc12 sc0 ls6 ws0">}</div><div class="t m0 x0 h12b y165a ff1b fs2c fc12 sc0 ls6 ws0">3. </div><div class="t m0 x118 h37 y165b ff12 fs1d fc12 sc0 ls6 ws0">Thinking about interconnections</div><div class="t m0 x130 h37 y165c ff12 fs1d fc12 sc0 ls6 ws0">   between classes as messages helps</div><div class="t m0 x130 h37 y165d ff12 fs1d fc12 sc0 ls6 ws0">   you understand whether the queries</div><div class="t m0 x130 h37 y165e ff12 fs1d fc12 sc0 ls6 ws0">   and commands make sense for a</div><div class="t m0 x130 h37 y165f ff12 fs1d fc12 sc0 ls6 ws0">   given object. T<span class="_ _1d"></span>elling the cart to add</div><div class="t m0 x130 h37 y1660 ff12 fs1d fc12 sc0 ls6 ws0">   a product feels natural, but telling</div><div class="t m0 x130 h37 y1661 ff12 fs1d fc12 sc0 ls6 ws0">   a product to add itself to the cart</div><div class="t m0 x130 h37 y1662 ff12 fs1d fc12 sc0 ls6 ws0">   might feel awkward.</div><div class="t m0 xc4 h5f y1663 ff15 fs1c fc12 sc0 ls6 ws0">&quot;Log this message, please!&quot;</div><div class="t m0 xc4 h5f y1664 ff15 fs1c fc12 sc0 ls6 ws0">{</div><div class="t m0 xc4 h5f y1665 ff15 fs1c fc12 sc0 ls6 ws0">     &quot;event_type&quot;: &quot;new_user&quot;,</div><div class="t m0 xc4 h5f y1666 ff15 fs1c fc12 sc0 ls6 ws0">     &quot;user_id&quot;: &quot;15478&quot;</div><div class="t m0 xc4 h5f y1667 ff15 fs1c fc12 sc0 ls6 ws0">}</div><div class="t m0 x14d h36 y1668 ff11 fs1c fc12 sc0 ls6 ws0">“What’s the current price?”</div></div><div class="c x12c y3f wc9 h140"><div class="t m0 xea h2b y1669 ffb fs18 fcb sc0 lsb2 ws255">Imagining interconnections between cl<span class="_ _104"></span>Figure 10.2<span class="_ _105"> </span><span class="ls143 ws655">asses as the messages they send<span class="_ _0"></span> and receive</span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
