<div id="pf63" class="pf w0 h0" data-page-no="63"><div class="pc pc63 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg63.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">75<span class="_ _5b"></span><span class="ffa">Try it out</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls7a ws5c6">Over a large nu<span class="_ _0"></span>mber of calls<span class="_ _0"></span>, you can expect<span class="ls30 wsef"> a function that takes 0–10 milliseconds</span></div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls31 ws2c2">to take about 5 milliseconds on average (</div><div class="t m5 x10d h24 y532 ffd fsc fc3 sc0 lsa0 ws0">percall</div><div class="t m0 xe8 h15 y41 ff4 fsb fc3 sc0 ls5f ws5c7">). Calling it 1000 times (</div><div class="t m5 xa4 h24 y532 ffd fsc fc3 sc0 lsa0 ws0">ncalls</div><div class="t m0 x57 h15 y41 ff4 fsb fc3 sc0 ls15f ws0">),</div><div class="t m0 x35 h15 y533 ff4 fsb fc3 sc0 ls42 ws1d1">you can expect it to take about 5 seconds overall (</div><div class="t m5 x10f h24 y66f ffd fsc fc3 sc0 lsa0 ws0">cumtime</div><div class="t m0 x103 h15 y533 ff4 fsb fc3 sc0 ls34 wsbb">). Run cProfile on the pro-</div><div class="t m0 x35 h15 y43 ff4 fsb fc3 sc0 ls3a ws1cf">gram to see if it meets your<span class="ls47 ws2d5"> expectations. You will see a lot of output, but sorting by</span></div><div class="t m0 x35 h15 y44 ff4 fsb fc3 sc0 ls34 ws22">cumulative time means </div><div class="t m5 x29 h24 y9b8 ffd fsc fc3 sc0 lsa0 ws0">an_expensive_<span class="_ _e"></span>function</div><div class="t m0 x113 h15 y44 ff4 fsb fc3 sc0 ls4b ws204"> calls will b<span class="_ _e"></span>e near the top:</div><div class="t m0 x35 h3b y246 ffd fs18 fc3 sc0 lsb2 ws0">$<span class="_"> </span>python<span class="_"> </span>-m<span class="_"> </span>cProfile<span class="_"> </span>--sort<span class="_"> </span>cumtime<span class="_"> </span>cpu_profiling.py</div><div class="t m0 x15 h3b y247 ffd fs18 fc3 sc0 lsb2 ws0">5138<span class="_"> </span>function<span class="_"> </span>calls<span class="_"> </span>(5095<span class="_"> </span>primitive<span class="_"> </span>calls)<span class="_"> </span>in<span class="_"> </span>5.644<span class="_"> </span>seconds</div><div class="t m0 x8a h3b y369 ffd fs18 fc3 sc0 lsb2 ws0">Ordered<span class="_"> </span>by:<span class="_"> </span>cumulative<span class="_"> </span>time</div><div class="t m0 x12 h3b ya24 ffd fs18 fc3 sc0 lsb2 ws0">percall<span class="_"> </span>filename:lineno(function)<span class="_ _26"></span>cumtime<span class="_ _6d"></span>percall<span class="_ _6d"></span>tottime<span class="_ _43"></span>ncalls</div><div class="t m0 x30 h3b ya25 ffd fs18 fc3 sc0 lsb2 ws0">5.644<span class="_"> </span>{built-in<span class="_"> </span>method<span class="_"> </span>builtins.exec}<span class="_ _8a"></span>5.644<span class="_ _8b"></span>0.000<span class="_ _8b"></span>0.000<span class="_ _83"></span>4/1</div><div class="t m0 x30 h3b ya26 ffd fs18 fc3 sc0 lsb2 ws0">5.644<span class="_"> </span>cpu_profiling.py:1(&lt;module&gt;)<span class="_ _8c"></span>5.644<span class="_ _8b"></span>0.002<span class="_ _8b"></span>0.002<span class="_ _74"></span>1</div><div class="t m0 x4 h3b ya27 ffd fs18 fc3 sc0 lsb2 ws0">1000<span class="_ _21"> </span>0.003<span class="_ _8d"> </span>0.000<span class="_ _8d"> </span>5.<span class="_ _0"></span>625<span class="_ _8d"> </span>0.006<span class="_"> </span>cpu_profiling.py:5</div><div class="t m0 x35 h51 y432 ff9 fs15 fc9 sc0 ls11f ws0">➥ </div><div class="t m0 x83 h3b ya28 ffd fs18 fc3 sc0 lsb2 ws0">(an_expensive_function)</div><div class="t m0 x30 h3b ya29 ffd fs18 fc3 sc0 lsb2 ws0">0.006<span class="_"> </span>{built-in<span class="_"> </span>method<span class="_"> </span>time.sleep}<span class="_ _8c"></span>5.622<span class="_ _8b"></span>0.006<span class="_ _8b"></span>5.622<span class="_ _73"></span>1000</div><div class="t m0 x4 h3b ya2a ffd fs18 fc1 sc0 lsb2 ws0">...</div><div class="t m0 x35 h15 y6d2 ff4 fsb fc3 sc0 ls2d wsbc">In this run, </div><div class="t m5 x8c h24 ya2b ffd fsc fc3 sc0 lsa0 ws0">an_expensiv<span class="_ _e"></span>e_function</div><div class="t m0 x121 h15 y6d2 ff4 fsb fc3 sc0 ls36 wsb2"> took an average of abou<span class="ls35 ws3ca">t 6 milliseconds per call</span></div><div class="t m0 x35 h15 y6d3 ff4 fsb fc3 sc0 ls4e ws5c8">over the span of 1000 calls, leading to<span class="_ _e"></span> a <span class="ls31 ws3f9">cumulative 5.625 seconds spent inside that</span></div><div class="t m0 x35 h15 y114 ff4 fsb fc3 sc0 ls20 ws0">function.</div><div class="t m0 x83 h15 y96 ff4 fsb fc3 sc0 ls38 ws591"> When looking at the output <span class="ls3e ws282">of cProfile, you’ll want to search for calls with a high</span></div><div class="t m5 x35 h24 ya2c ffd fsc fc3 sc0 lsa0 ws0">percall</div><div class="t m0 xd8 h15 y34d ff4 fsb fc3 sc0 ls3a ws12e"> value or a big jump in </div><div class="t m5 x11 h24 ya2c ffd fsc fc3 sc0 lsa0 ws0">cumtime</div><div class="t m0 xd h15 y34d ff4 fsb fc3 sc0 ls42 ws8c">. These characteristics mean the call takes up a</div><div class="t m0 x35 h15 y34e ff4 fsb fc3 sc0 ls6 ws5c9">good chunk o<span class="_ _e"></span>f your program’s execution <span class="_ _e"></span><span class="ls2c ws5ca">time. Speeding up a slow fu<span class="_ _0"></span>nction can</span></div><div class="t m0 x35 h15 y472 ff4 fsb fc3 sc0 lsb1 ws5cb">improve the pro<span class="_ _0"></span>gram speed a fa<span class="ls5b ws5cc">ir amount, and c<span class="_ _e"></span>utting the <span class="ls34 wsb6">execution time of a func-</span></span></div><div class="t m0 x35 h15 y41c ff4 fsb fc3 sc0 ls1c ws10">tion that’s called thousands of <span class="ls1f ws45">times can be a really big win. </span></div><div class="t m0 x19 h1f ya2d ffc fs13 fc2 sc0 lsf9 ws4a2">4.5<span class="_ _21"> </span>T<span class="_ _e"></span>r<span class="_ _e"></span>y<span class="_ _e"></span> i<span class="_ _e"></span>t<span class="_ _e"></span> o<span class="_ _e"></span>ut</div><div class="t m0 x35 h15 y5b2 ff4 fsb fc3 sc0 ls3a wse4">Consider the following code<span class="ls44 ws15c">. It contains a function, </span></div><div class="t m5 xf8 h24 ya2e ffd fsc fc3 sc0 lsa0 ws0">sort_expensiv<span class="_ _e"></span>e</div><div class="t m0 x62 h15 y5b2 ff4 fsb fc3 sc0 ls48 ws77">, that has to sort a</div><div class="t m0 x35 h15 ycf ff4 fsb fc3 sc0 ls2c ws5cd">list of 1000 integers<span class="_ _0"></span> in the range 0–<span class="ls3e ws5ce">999,999. It also contains a func<span class="_ _0"></span>tion, </span></div><div class="t m5 x107 h24 ya2f ffd fsc fc3 sc0 lsa0 ws0">sort_cheap</div><div class="t m0 x122 h15 ycf ff4 fsb fc3 sc0 ls6 ws0">,</div><div class="t m0 x35 h15 y5b3 ff4 fsb fc3 sc0 ls20 ws51">that only has to sort a list <span class="_ _e"></span>of 10 integers in the range 0–999.</div><div class="t m0 x83 h15 y5b4 ff4 fsb fc3 sc0 ls3b ws5cf"> Sorting algori<span class="_ _e"></span>thms are generally more expensi<span class="_ _e"></span>ve than <span class="ff3 ls6 ws0">O</span><span class="ls5e ws5d0">(1), so the </span></div><div class="t m5 x7d h24 ya30 ffd fsc fc3 sc0 lsa0 ws0">sort_expensiv<span class="_ _e"></span>e</div><div class="t m0 x35 h15 yfd ff4 fsb fc3 sc0 ls1f ws5d1">function will take longer than </div><div class="t m5 xc h24 ya31 ffd fsc fc3 sc0 lsa0 ws0">sort_cheap</div><div class="t m0 x98 h15 yfd ff4 fsb fc3 sc0 ls2d ws5d2">. If you only ran each function once,</div><div class="t m5 x35 h24 ya32 ffd fsc fc3 sc0 lsa0 ws0">sort_cheap</div><div class="t m0 xac h15 ya33 ff4 fsb fc3 sc0 ls38 wsc5"> would surely win. But if you need <span class="_ _0"></span>to run </div><div class="t m5 x6e h24 ya32 ffd fsc fc3 sc0 lsa0 ws0">sort_cheap</div><div class="t m0 x115 h15 ya33 ff4 fsb fc3 sc0 ls6b ws5d3"> 1,000 times, i<span class="_ _0"></span>t’s less</div><div class="t m0 x35 h15 ya3 ff4 fsb fc3 sc0 ls44 ws34">clear which operation will be fastest.</div><div class="t m0 x35 h3b ya34 ffd fs18 fc3 sc0 lsb2 ws0">import<span class="_"> </span>random</div><div class="t m0 x35 h3b ya35 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>sort_expensive():</div><div class="t m0 x87 h3b ya36 ffd fs18 fc3 sc0 lsb2 ws0">the_list<span class="_"> </span>=<span class="_"> </span>random.sample(range(1_000_000),<span class="_"> </span>1_000)</div><div class="t m0 x87 h3b ya37 ffd fs18 fc3 sc0 lsb2 ws0">the_list.sort()</div><div class="t m0 x87 h3b ya38 ffd fs18 fc3 sc0 lsb2 ws0">sort_cheap():<span class="_ _84"></span>def</div><div class="t m0 x4c h3b ya39 ffd fs18 fc3 sc0 lsb2 ws0">10)<span class="_ _41"></span>random.sample(range(1_000),<span class="_ _8e"></span>=<span class="_ _74"></span>the_list</div><div class="t m0 x87 h3b ya3a ffd fs18 fc3 sc0 lsb2 ws0">the_list.sort()</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
