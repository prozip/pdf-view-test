<div id="pf32" class="pf w0 h0" data-page-no="32"><div class="pc pc32 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg32.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">26</div><div class="t m0 x3 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 x29 h2c y1d0 ffb fs19 fcb sc0 lsf6 ws0">HAPTER</div><div class="t m0 x47 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 2</div><div class="t m0 xca h2d y80 ffa fs7 fcb sc0 ls6 ws0">Separation of concerns</div><div class="t m0 x44 h15 y40 ff4 fsb fc3 sc0 ls66 ws35e">If they all c<span class="_ _0"></span>heck authentic<span class="_ _0"></span>ation and fetch <span class="_ _0"></span>information abou<span class="_ _0"></span>t that user t<span class="_ _0"></span>hemselves,</div><div class="t m0 x44 h15 y41 ff4 fsb fc3 sc0 ls2e wsf8">they’ll all need to be updated when the de<span class="_ _0"></span><span class="ls71 ws15e">tails about authentication change. That’s a</span></div><div class="t m0 x44 h15 y42 ff4 fsb fc3 sc0 lsbc ws35f">lot of work, and<span class="_ _e"></span> if one function is missed,<span class="ls38 ws193"> it may start doing unexpected things or</span></div><div class="t m0 x44 h15 y43 ff4 fsb fc3 sc0 ls25 ws1a">stop working altogether.</div><div class="t m0 x32 h15 y44 ff4 fsb fc3 sc0 ls34 ws13b"> Just as namespacing has a hierarchy of gr<span class="ls3e ws360">anularity in Python, so too does the wider</span></div><div class="t m0 x44 h15 y45 ff4 fsb fc3 sc0 ls1e ws96">approach to separation of concerns. Ther<span class="ls3d ws2c0">e are no steadfast rules ab<span class="_ _e"></span>out how deep or</span></div><div class="t m0 x44 h15 y46 ff4 fsb fc3 sc0 ls2d ws1d">shallow to make this hierarchy; sometimes it <span class="ls31 ws58">makes sense to <span class="_ _0"></span>call a <span class="lsab ws361">function th<span class="_ _0"></span>at calls a</span></span></div><div class="t m0 x44 h15 y47 ff4 fsb fc3 sc0 ls5e ws362">function that calls a function. Remember th<span class="ls1e ws2b8">at the goal of separating concerns is to</span></div><div class="t m0 x44 h15 y48 ff4 fsb fc3 sc0 ls3a ws28">group like activities together and <span class="ls34 ws22">keep dissimilar acti<span class="ls4e ws1e3">vit<span class="_ _e"></span>ies isolated.</span></span></div><div class="t m0 x32 h15 y49 ff4 fsb fc3 sc0 ls1e ws258"> The next sections cover the structural<span class="_ _0"></span> <span class="ls42 ws1e5">tools Python programs use to organize and</span></div><div class="t m0 x44 h15 y4a ff4 fsb fc3 sc0 ls20 ws363">keep concerns separate. If you f<span class="_ _e"></span>eel good<span class="ls51 ws34a"> about functions and classes, you can skip</span></div><div class="t m0 x44 h15 y4b ff4 fsb fc3 sc0 ls3e ws4a">ahead to section 2.2.3.</div><div class="t m0 x44 h26 y432 ffc fs15 fc2 sc0 ls110 ws0">F<span class="_ _e"></span>un<span class="_ _e"></span>c<span class="_ _e"></span>t<span class="_ _e"></span>io<span class="_ _e"></span>n<span class="_ _e"></span>s<span class="_ _3f"></span>2.2.1</div><div class="t m0 x44 h15 y4e ff4 fsb fc3 sc0 ls48 ws364">If you’re not too com<span class="_ _e"></span>fortable with <span class="ff3 ls5b ws0">functions</span><span class="ls3d ws31d">, think b<span class="_ _e"></span>ack to math class. Mathematical</span></div><div class="t m0 x44 h15 y4f ff4 fsb fc3 sc0 ls2f ws135">functions are formulas, notated (in non-Python syntax) like </div><div class="t m5 x71 h24 y433 ffd fsc fc3 sc0 lsa0 ws365">f(x) = x^2 +<span class="_ _e"></span> 3</div><div class="t m0 xda h15 y4f ff4 fsb fc3 sc0 ls6c ws366">, that</div><div class="t m0 x44 h15 y2b2 ff4 fsb fc3 sc0 ls31 wse8">map inputs to outputs. Inputting </div><div class="t m5 x63 h24 y434 ffd fsc fc3 sc0 ls6 ws321">x = 5</div><div class="t m0 x6b h15 y2b2 ff4 fsb fc3 sc0 ls2c wse6"> returns </div><div class="t m5 x6d h24 y434 ffd fsc fc3 sc0 lsa0 ws367">f(5) = 5^2 + 3 = 25 + 3 = 28</div><div class="t m0 xdb h15 y2b2 ff4 fsb fc3 sc0 lsae ws368">. In</div><div class="t m0 x44 h15 yed ff4 fsb fc3 sc0 ls34 ws2f2">software, functions play the same role. Give<span class="ls42 ws19d">n a set of input variab<span class="ls6f ws369">les, a fun<span class="_ _e"></span>ction per-</span></span></div><div class="t m0 x44 h15 y52 ff4 fsb fc3 sc0 ls71 ws83">forms some calculation or transf<span class="ls51 ws47">ormation and returns a result.</span></div><div class="t m0 x32 h15 y53 ff4 fsb fc3 sc0 ls80 ws36a"> This way of thinki<span class="_ _e"></span>ng about functions lead<span class="ls30 ws13f">s naturally to the idea that<span class="_ _e"></span> functions in</span></div><div class="t m0 x44 h15 y54 ff4 fsb fc3 sc0 ls71 ws1cb">software should generally be short. If a <span class="ls5e ws36b">function become<span class="_ _e"></span>s too long or does too many</span></div><div class="t m0 x44 h15 y199 ff4 fsb fc3 sc0 ls20 wsac">things, it can be difficult to characte<span class="_ _e"></span><span class="ls42 ws1d1">rize and therefore difficult to name. </span></div><div class="t m5 xaa h24 y435 ffd fsc fc3 sc0 lsa0 ws36c">f(x) = x^2</div><div class="t m5 x44 h24 y436 ffd fsc fc3 sc0 lsa0 ws36d">+ 3</div><div class="t m0 xbc h15 y19a ff4 fsb fc3 sc0 ls2f ws36e"> is a quadratic function of </div><div class="t m5 xd9 h24 y436 ffd fsc fc3 sc0 ls6 ws0">x</div><div class="t m0 x8f h15 y19a ff4 fsb fc3 sc0 ls2d ws18b">, whereas </div><div class="t m5 x31 h24 y436 ffd fsc fc3 sc0 lsa0 ws36d">f(x) = x^5 + 17x<span class="_ _e"></span> ^ 9 - 2x + 7</div><div class="t m0 xdc h15 y19a ff4 fsb fc3 sc0 ls31 ws213"> is more dif-</div><div class="t m0 x44 h15 y57 ff4 fsb fc3 sc0 ls48 ws192">ficult to name. In software<span class="_ _e"></span>, mixing too ma<span class="ls44 ws36f">ny concepts leads to a nebulous mass of</span></div><div class="t m0 x44 h15 y58 ff4 fsb fc3 sc0 ls47 ws54">code that can’t be <span class="_ _e"></span>named easily.</div><div class="t m0 x32 h15 y437 ff4 fsb fc3 sc0 ls3a ws1e0"> Small functions are one of the first tools to reach for when trying to break up your</div><div class="t m0 x44 h15 y19b ff4 fsb fc3 sc0 ls5e ws14a">code. A function wraps a few lines of <span class="_ _e"></span>code <span class="ls1e ws16">and gives them a clear name for later refer-</span></div><div class="t m0 x44 h15 y19c ff4 fsb fc3 sc0 ls1e ws370">ence. Creating a function not only makes it<span class="_ _0"></span><span class="ls2d ws371"> clearer what’s happening, but lets you</span></div><div class="t m0 x44 h15 y5c ff4 fsb fc3 sc0 ls48 ws31e">reuse the code as needed. Python it<span class="ls30 wse3">self does this: if you’ve used </span></div><div class="t m5 xdd h24 y438 ffd fsc fc3 sc0 lsa0 ws0">open()</div><div class="t m0 xde h15 y5c ff4 fsb fc3 sc0 ls48 ws31e"> to read a file</div><div class="t m0 x44 h15 y5d ff4 fsb fc3 sc0 ls2d ws0">or </div><div class="t m5 x32 h24 y439 ffd fsc fc3 sc0 lsa0 ws0">len()</div><div class="t m0 x97 h15 yfb ff4 fsb fc3 sc0 ls5f ws372"> to get the length of<span class="_ _0"></span> a list, you’ve made <span class="_ _0"></span>use of functionality P<span class="_ _0"></span>ython deemed</div><div class="t m0 x44 h15 y24b ff4 fsb fc3 sc0 ls60 ws5a">important<span class="_ _e"></span> enough to wr<span class="ls44 ws34">ap and give a name.</span></div><div class="t m0 x32 h15 y19d ff4 fsb fc3 sc0 lsab ws373"> The process of<span class="_ _0"></span> breaking a prob<span class="_ _0"></span>lem into<span class="ls1e ws96"> small, manageable pieces is call<span class="_ _0"></span>ed <span class="ff3 ls6c ws0">decom-</span></span></div><div class="t m0 x44 h15 y60 ff3 fsb fc3 sc0 ls44 ws0">position<span class="ff4 ls31 ws335">. Imagine a mushroom breaking down a <span class="ls3d ws31d">fallen tree. It turns the wood, made</span></span></div><div class="t m0 x44 h15 y61 ff4 fsb fc3 sc0 ls70 ws374">of complex molecu<span class="_ _e"></span>les, into<span class="ls1c ws375"> more fundamental material<span class="ls31 ws376">s like nitrogen and carbon</span></span></div><div class="t m0 x44 h15 y2ad ff4 fsb fc3 sc0 ls3a ws1cf">dioxide. These then get recycled <span class="_ _e"></span>back into the ecosystem. Your code can be decom-</div><div class="t m0 x44 h15 y24c ff4 fsb fc3 sc0 ls3d ws377">posed into functions that get recycled back <span class="_ _e"></span><span class="ls31 ws378">into your software’s ecosystem, as shown</span></div><div class="t m0 x44 h15 y19e ff4 fsb fc3 sc0 ls50 ws379">in figure 2.2.</div><div class="t m0 x32 h15 y65 ff4 fsb fc3 sc0 ls20 ws1bc"> Suppose you’re creating a fan site fo<span class="ls30 ws222">r th<span class="_ _e"></span>e Three Stooges (an American comedy</span></div><div class="t m0 x44 h15 y66 ff4 fsb fc3 sc0 ls48 ws0">troupe</div><div class="t m0 x82 h31 y43a ff4 fs1a fc3 sc0 ls6 ws0">3</div><div class="t m0 x4 h15 y43b ff4 fsb fc3 sc0 ls36 ws2e8">). To build the home page, you need<span class="_ _0"></span> <span class="ls1c ws37a">to introduce the stooges: Larry, Curly,</span></div><div class="t m0 x44 h15 y43c ff4 fsb fc3 sc0 ls42 ws27b">and Moe. Given the list of <span class="_ _e"></span>names and the titl<span class="ls7d ws334">e of the act, the code<span class="ls31 ws300"> should produce <span class="_ _e"></span>the</span></span></div><div class="t m0 x42 h32 y210 ff4 fs1b fcf sc0 ls6 ws0">3</div><div class="t m0 x43 h33 y211 ff4 fs17 fcf sc0 ls6 ws0">https://e<span class="_ _e"></span>n.wikipedia.org/wiki/The_Th<span class="_ _e"></span>ree_Stooges</div><a class="l" href="https://en.wikipedia.org/wiki/The_Three_Stooges"><div class="d m2" style="border-style:none;position:absolute;left:60.120000px;bottom:62.378000px;width:405.000000px;height:10.440000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
