<div id="pfaf" class="pf w0 h0" data-page-no="af"><div class="pc pcaf w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgaf.png"/><div class="t m0 xa0 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">151<span class="_ _ab"></span><span class="ffa">Inheritance in Python</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls30 ws222">The basic way to check the type of <span class="ls5e ws362">an object is to use the built-in </span></div><div class="t m5 x99 h24 y3eb ffd fsc fc3 sc0 lsa0 ws0">type()</div><div class="t m0 x10a h15 y40 ff4 fsb fc3 sc0 ls2d wsa1"> function.</div><div class="t m5 x35 h24 y532 ffd fsc fc3 sc0 lsa0 ws0">type(some_obj<span class="_ _e"></span>ect)</div><div class="t m0 xd6 h15 y41 ff4 fsb fc3 sc0 ls36 ws35"> will tell you which class that<span class="ls3a ws28"> object is an instance of:</span></div><div class="t m0 x35 h3b y50b ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>type(42)</div><div class="t m0 x35 h3b y50c ffd fs18 fc3 sc0 lsb2 ws0">&lt;class<span class="_"> </span>&apos;int&apos;&gt;</div><div class="t m0 x35 h3b y50d ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>type({&apos;dessert&apos;:<span class="_"> </span>&apos;cookie&apos;,<span class="_"> </span>&apos;flavor&apos;:<span class="_"> </span>&apos;chocolate<span class="_"> </span>chip&apos;})</div><div class="t m0 x35 h3b yee1 ffd fs18 fc1 sc0 lsb2 ws0">&lt;class<span class="_"> </span>&apos;dict&apos;&gt;</div><div class="t m0 x35 h15 y110 ff4 fsb fc3 sc0 ls18b ws0">A<span class="_ _1d"></span>l<span class="_ _0"></span>t<span class="_ _1d"></span>h<span class="_ _0"></span>o<span class="_ _1d"></span>ug<span class="_ _1c"></span>h t<span class="_ _1c"></span>hi<span class="_ _1c"></span>s i<span class="_ _1c"></span>s<span class="_ _0"></span> u<span class="_ _1d"></span>s<span class="_ _0"></span>e<span class="_ _1d"></span>fu<span class="_ _1d"></span>l<span class="_ _1d"></span>,<span class="_ _0"></span> y<span class="_ _1d"></span>o<span class="_ _0"></span>u<span class="_ _1d"></span>’<span class="_ _0"></span>l<span class="_ _1d"></span>l<span class="_ _0"></span> a<span class="_ _1d"></span>l<span class="_ _0"></span>s<span class="_ _1d"></span>o<span class="_ _0"></span> f<span class="_ _1d"></span>r<span class="_ _0"></span>e<span class="_ _1d"></span>q<span class="_ _0"></span>u<span class="_ _1d"></span>e<span class="_ _0"></span>n<span class="_ _1d"></span>t<span class="_ _0"></span>l<span class="_ _1d"></span>y<span class="_ _0"></span> w<span class="_ _1d"></span>a<span class="_ _0"></span>n<span class="_ _1d"></span>t<span class="_ _0"></span> t<span class="_ _1d"></span>o<span class="_ _0"></span> k<span class="_ _1d"></span>n<span class="_ _0"></span>o<span class="_ _1d"></span>w<span class="_ _0"></span> i<span class="_ _1d"></span>f<span class="_ _0"></span> a<span class="_ _1d"></span>n<span class="_ _0"></span> o<span class="_ _1d"></span>b<span class="_ _0"></span>j<span class="_ _1d"></span>e<span class="_ _0"></span>c<span class="_ _1d"></span>t <span class="_ _0"></span>i<span class="_ _1d"></span>s<span class="_ _0"></span> a<span class="_ _1d"></span>n<span class="_ _0"></span> i<span class="_ _1d"></span>n<span class="_ _0"></span>s<span class="_ _1d"></span>t<span class="_ _0"></span>a<span class="_ _1d"></span>n<span class="_ _0"></span>c<span class="_ _1d"></span>e</div><div class="t m0 x35 h15 yad4 ff4 fsb fc3 sc0 ls38 ws30c">of a particular class or any of it<span class="ls3a ws1cf">s subclasses. Python provides the </span></div><div class="t m5 x81 h24 yfaa ffd fsc fc3 sc0 lsa0 ws0">isinstance()</div><div class="t m0 x11f h15 yad4 ff4 fsb fc3 sc0 ls20 ws235"> func-</div><div class="t m0 x35 h15 yee2 ff4 fsb fc3 sc0 ls71 wsd4">tion for this purpose:</div><div class="t m0 x35 h3b y12c9 ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>isinstance(42,<span class="_"> </span>int)</div><div class="t m0 x35 h3b y12ca ffd fs18 fc3 sc0 lsb2 ws0">True</div><div class="t m0 x35 h3b y12cb ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>isinstance(FancyTire(),<span class="_"> </span>Tire)</div><div class="t m0 x35 h3b y56f ffd fs18 fc1 sc0 lsb2 ws0">True</div><div class="t m0 x35 h15 ybe ff4 fsb fc3 sc0 ls51 ws1e7">Lastly, if you only need to know whether a <span class="ls31 ws15d">class is <span class="_ _0"></span>a subclass of another, Python gives</span></div><div class="t m0 x35 h15 ybec ff4 fsb fc3 sc0 ls6b ws6d6">you the </div><div class="t m5 xd8 h24 y12cc ffd fsc fc3 sc0 lsa0 ws0">issubclass</div><div class="t m0 xd6 h15 ybec ff4 fsb fc3 sc0 ls34 ws22"> function:</div><div class="t m0 x35 h3b y10f3 ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>issubclass(int,<span class="_"> </span>int)</div><div class="t m0 x35 h3b y10f4 ffd fs18 fc3 sc0 lsb2 ws0">True</div><div class="t m0 x35 h3b y12cd ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>issubclass(FancyTire,<span class="_"> </span>Tire)</div><div class="t m0 x35 h3b y12ce ffd fs18 fc3 sc0 lsb2 ws0">True</div><div class="t m0 x35 h3b y12cf ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>issubclass(dict,<span class="_"> </span>float)</div><div class="t m0 x35 h3b y12d0 ffd fs18 fc1 sc0 lsb2 ws0">False</div><div class="t m0 x83 h49 y12d1 ffb fs17 fc2 sc0 lsf7 ws0">NOTE</div><div class="t m5 xaf h24 y12d2 ffd fsc fc3 sc0 lsa0 ws0">issubclass</div><div class="t m0 xba h15 y1fd ff4 fsb fc3 sc0 ls34 ws6b7"> is somewhat confusingly na<span class="ls3d ws7a5">med. Because it considers a</span></div><div class="t m0 x83 h15 yf5 ff4 fsb fc3 sc0 ls38 ws9e">class to be a subclass of itself, it will return </div><div class="t m5 x5f h24 y12d3 ffd fsc fc3 sc0 lsa0 ws0">True</div><div class="t m0 x55 h15 yf5 ff4 fsb fc3 sc0 ls3a wse4"> even if the two classes you pro-</div><div class="t m0 x83 h15 yf7 ff4 fsb fc3 sc0 ls31 ws25">vide are in fact the same class.</div><div class="t m0 x35 h15 y15b ff4 fsb fc3 sc0 ls36 ws76">These tools can come in handy in real code<span class="ls48 ws157"> occasionally, <span class="_ _0"></span>but their presence is often</span></div><div class="t m0 x35 h15 y9e ff4 fsb fc3 sc0 ls44 ws1ea">a red flag, because changing behavior based on the data type is precisely what sub-</div><div class="t m0 x35 h15 yae9 ff4 fsb fc3 sc0 ls3b ws503">classes of behavior are for. These built-in<span class="ls5e ws2c1"> funct<span class="_ _e"></span>ions are good for inspecting objects</span></div><div class="t m0 x35 h15 yd32 ff4 fsb fc3 sc0 ls1c ws208">from the outside, but Python also provides<span class="ls36 ws2e4"> useful features fo<span class="ls42 ws614">r handling inheritance</span></span></div><div class="t m0 x35 h15 yd33 ff3 fsb fc3 sc0 ls2f ws0">within<span class="ff4 ls2d ws31"> classes. </span></div><div class="t m0 x19 h26 y12d4 ffc fs15 fc2 sc0 ls1f7 ws782">8<span class="_ _0"></span>.<span class="_ _0"></span>3<span class="_ _0"></span>.<span class="_ _0"></span>2<span class="_ _11"> </span>Superclass access</div><div class="t m0 x35 h15 y11d ff4 fsb fc3 sc0 ls25 ws6d1">Suppose you’re creating a subclass and you need to sp<span class="_ _0"></span>ecialize its behavior in a way</div><div class="t m0 x35 h15 y11e ff4 fsb fc3 sc0 ls38 ws17e">that depends on its superclass’s original be<span class="ls21 ws86f">havior. How can<span class="_ _0"></span> you do that in Python? You</span></div><div class="t m0 x35 h15 y11f ff4 fsb fc3 sc0 ls30 ws49b">can use the built-in </div><div class="t m5 x92 h24 y12d5 ffd fsc fc3 sc0 lsa0 ws0">super()</div><div class="t m0 x47 h15 y11f ff4 fsb fc3 sc0 ls71 ws2e5"> function, as shown in the <span class="ls42 ws1f7">follow<span class="_ _e"></span>ing listing, which for-</span></div><div class="t m0 x35 h15 ya8 ff4 fsb fc3 sc0 ls2f ws23">wards any method or attribute accesses to the superclass.</div><div class="t m0 x35 h3b y586 ffd fs18 fc3 sc0 lsb2 ws0">class<span class="_"> </span>Teller:</div><div class="t m0 x87 h3b y12d6 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>deposit(self,<span class="_"> </span>amount,<span class="_"> </span>account):</div><div class="t m0 x36 h3b y12d7 ffd fs18 fc3 sc0 lsb2 ws0">account.deposit(amount)</div><div class="t m0 x17 h20 y12d8 ffb fs7 fc4 sc0 ls6 ws0">Using<span class="_ _4e"></span>Listing<span class="_"> </span>8.2<span class="_ _dd"> </span><span class="ff16 fs21 ls128">super()</span> to access superclass behavior</div><div class="c x141 y12d9 wa h10f"><div class="t m0 x12e h14 y9c3 ff12 fs7 fcb sc0 ls6 ws0">A<span class="ff13">n</span><span class="lsff ws38b">y classes you </span><span class="ff13">r</span><span class="ls140">efe</span><span class="ff13">r</span>e<span class="ff13">n</span>ce </div><div class="t m0 x12e h14 y9c4 ff12 fs7 fcb sc0 ls10c ws0">will <span class="ff13 ls6">n<span class="ff12 ws3a5">eed to be i</span>m</span><span class="lsec">po<span class="ff13 ls6">r</span><span class="lsd5">ted </span></span></div><div class="t m0 x12e h14 y12da ff12 fs7 fcb sc0 ls6 ws0">i<span class="ff13">n</span><span class="ls19e ws3ce">to the<span class="_ _e"></span> </span><span class="ff13">n</span>a<span class="ff13">m</span>espace.</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
