<div id="pf6d" class="pf w0 h0" data-page-no="6d"><div class="pc pc6d w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg6d.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">85<span class="_ _22"></span><span class="ffa">Functional testing approaches</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls7d ws12a">depend on the ap<span class="_ _e"></span>plication and <span class="ls48 ws39">the resources at your disposal, <span class="_ _e"></span>but it’s a decent rule of</span></div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls20 ws51">thumb about where to invest time.</div><div class="t m0 x83 h15 y42 ff4 fsb fc3 sc0 lsbf ws0"> Yo<span class="_ _1d"></span>u’<span class="_ _0"></span>ll<span class="_ _1d"></span> get<span class="_ _1d"></span> the<span class="_ _1d"></span> mos<span class="_ _1d"></span>t ba<span class="_ _1d"></span>ng<span class="_ _0"></span> fo<span class="_ _1d"></span>r yo<span class="_ _1d"></span>ur b<span class="_ _1d"></span>uck<span class="_ _1d"></span> by m<span class="_ _1d"></span>ak<span class="_ _0"></span>in<span class="_ _1d"></span>g su<span class="_ _1d"></span>re t<span class="_ _1d"></span>he<span class="_ _0"></span> li<span class="_ _0"></span>t<span class="_ _0"></span>tl<span class="_ _1d"></span>e pi<span class="_ _1d"></span>ec<span class="_ _0"></span>es<span class="_ _1d"></span> of s<span class="_ _1d"></span>of<span class="_ _0"></span>tw<span class="_ _1d"></span>are</div><div class="t m0 x35 h15 y43 ff4 fsb fc3 sc0 ls36 wsb2">are all working, then making sure they all <span class="ls9e ws625">work together<span class="_ _0"></span>. Again, auto<span class="_ _0"></span>mating this pro-</span></div><div class="t m0 x35 h15 y44 ff4 fsb fc3 sc0 ls47 ws2ba">cess will empower yo<span class="_ _e"></span>u to use the time you’ve free<span class="_ _e"></span>d up to think of new ways yo<span class="_ _e"></span>ur soft-</div><div class="t m0 x35 h15 y45 ff4 fsb fc3 sc0 ls79 ws626">ware might break. You can the<span class="_ _e"></span>n incorporate <span class="lsae ws43d">those ideas as new te<span class="ls31 wsb5">sts and slowly build</span></span></div><div class="t m0 x35 h15 y46 ff4 fsb fc3 sc0 ls44 ws53">confidence that will carr<span class="_ _0"></span>y you forward. </div><div class="t m0 x19 h26 y233 ffc fs15 fc2 sc0 ls16b ws551">5<span class="_ _0"></span>.<span class="_ _0"></span>2<span class="_ _0"></span>.<span class="_ _0"></span>7<span class="_ _11"> </span>Regression testing</div><div class="t m0 x35 h15 y49 ff3 fsb fc3 sc0 ls44 ws336">Regression testing<span class="ff4 ls18b ws0"> i<span class="_ _1d"></span>s<span class="_ _1d"></span> l<span class="_ _0"></span>e<span class="_ _1d"></span>s<span class="_ _0"></span>s<span class="_ _1d"></span> a<span class="_ _0"></span>n<span class="_ _1d"></span> a<span class="_ _0"></span>p<span class="_ _1d"></span>p<span class="_ _0"></span>r<span class="_ _1d"></span>oa<span class="_ _1c"></span>ch<span class="_ _1d"></span> t<span class="_ _1d"></span>o<span class="_ _0"></span> t<span class="_ _1d"></span>e<span class="_ _0"></span>s<span class="_ _1d"></span>t<span class="_ _0"></span>i<span class="_ _1d"></span>n<span class="_ _0"></span>g<span class="_ _1d"></span> p<span class="_ _0"></span>e<span class="_ _1d"></span>r<span class="_ _0"></span> <span class="ls38 ws24a">se, and more a proc<span class="ls3b ws1ee">ess to follow as</span></span></span></div><div class="t m0 x35 h15 y4a ff4 fsb fc3 sc0 ls25 ws7d">you develop your applications<span class="ls48 ws33d">. When you <span class="_ _0"></span>write a test, the assumption is that you’re</span></div><div class="t m0 x35 h15 y4b ff4 fsb fc3 sc0 ls44 ws3fc">saying, “I want to make sure the code keep<span class="ls51 ws17a">s working this way.” If you change your code</span></div><div class="t m0 x35 h15 y14b ff4 fsb fc3 sc0 ls31 ws238">in a way that changes the behavi<span class="ls20 wsd8">or you tested, <span class="_ _e"></span>that would be a <span class="ff3 ls3e ws0">regression</span><span class="ls48 ws4e0">. A regression is</span></span></div><div class="t m0 x35 h15 y4d ff4 fsb fc3 sc0 ls38 ws26">a shift to an undesirable (or at least un<span class="ls31 ws25">expected) state and is usually A Bad Thing.</span></div><div class="t m0 x83 h15 y4e ff4 fsb fc3 sc0 ls71 ws2b4"> Regression testing is the pr<span class="ls31 ws15d">actice of running your existi<span class="ls38">ng suite of tests after each</span></span></div><div class="t m0 x35 h15 y4f ff4 fsb fc3 sc0 ls50 ws627">code change before <span class="_ _0"></span>shipping your code to producti<span class="_ _0"></span>on. A <span class="ff3 ls35 ws5b0">te<span class="_ _0"></span>st suite<span class="ff4 ls5f ws628"> is the collection of</span></span></div><div class="t m0 x35 h15 y50 ff4 fsb fc3 sc0 ls20 ws134">tests you’ve built up over time, either written to ve<span class="_ _e"></span>rify code as unit/integration tests or</div><div class="t m0 x35 h15 yed ff4 fsb fc3 sc0 ls71 wsd4">to fix things found in exploratory manual <span class="ws28">testing. Many development teams run these</span></div><div class="t m0 x35 h15 y52 ff4 fsb fc3 sc0 ls2f ws629">test suites in a <span class="ff3 ls3d ws62a">continuous integration<span class="_ _e"></span></span><span class="ls1c ws464"> (CI) environment, where changes to an application</span></div><div class="t m0 x35 h15 y53 ff4 fsb fc3 sc0 ls1c ws165">are frequently combined and tested be<span class="_ _e"></span>fore <span class="ls51 wsa9">bein<span class="_ _0"></span>g released. A full discussion of CI is</span></div><div class="t m0 x35 h15 y54 ff4 fsb fc3 sc0 ls48 ws4b8">beyond the scope of this book, <span class="_ _e"></span>but the idea <span class="ls38 ws1a9">is to set yourself up for success by running</span></div><div class="t m0 x35 h15 y55 ff4 fsb fc3 sc0 ls2d ws371">all your tests against all yo<span class="ls3e ws189">ur changes. I highly recommend checking out Travis CI</span></div><div class="t m0 x35 h15 y19a ff4 fsb fc3 sc0 ls6 ws0">(<span class="fcc">https://docs.tr<span class="_ _e"></span>avis-ci.com/user/for-beginners/<span class="_ _e"></span></span><span class="ls42 ws62b">) or CircleCI (</span><span class="fcc ls14a">https://circle<span class="_ _e"></span>ci.com/</span></div><div class="t m0 x35 h15 y57 ff4 fsb fcc sc0 ls2c ws0">docs/2.0/about-cir<span class="_ _0"></span>cleci/<span class="fc3 ls5e ws14a">) to learn more.</span></div><div class="t m0 x35 h15 yb12 ff4 fsb fc3 sc0 ls3d ws333">As new features are added, new tests get added <span class="_ _e"></span>to the test suite. These get locked in as</div><div class="t m0 x35 h15 yb13 ff4 fsb fc3 sc0 ls34 ws143">regression tests for future ch<span class="ls2d ws3f2">anges. Similarly, it’s common<span class="ls1c ws37a"> to add tests for bugs that</span></span></div><div class="t m0 x35 h15 yb14 ff4 fsb fc3 sc0 ls36 wsd6">you find, so that you can build confidence <span class="ls3a ws1cf">that a particular bu<span class="ls78 ws62c">g w<span class="_ _e"></span>on’t reoccur. Like</span></span></div><div class="t m0 x35 h15 yb15 ff4 fsb fc3 sc0 ls34 ws13b">code, test suites won’t always be perfect. Bu<span class="ls5e ws62d">t leaning on a ro<span class="_ _e"></span>bust suite to tell you when</span></div><div class="t m0 x35 h15 yb16 ff4 fsb fc3 sc0 ls51 ws47">things go awry can help you focus on othe<span class="ls42 ws26e">r areas, like innovation and performance.</span></div><div class="t m0 x83 h15 yb17 ff4 fsb fc3 sc0 ls2f ws23"> With that, let’s see how you can start writing tests in Python. </div><div class="c x35 yb18 w2 hae"><div class="t m0 xb7 h2f yb19 ffb fs15 fc2 sc0 ls18e ws62e">Version cont<span class="_ _0"></span>rol hooks </div><div class="t m0 xb7 h30 yb1a fff fsc fc3 sc0 lsb7 ws62f">One practice for autom<span class="_ _0"></span>ating unit tests in s<span class="_ _0"></span>ource control systems is us<span class="_ _0"></span>ing a precommit</div><div class="t m0 xb7 h30 yb1b fff fsc fc3 sc0 lsb6 wsa">hook. Each time you commit your code, the hoo<span class="_ _e"></span>k triggers the tests to run. If any fail-</div><div class="t m0 xb7 h30 yb1c fff fsc fc3 sc0 ls18f ws630">ures occur, t<span class="_ _e"></span>he commit fails, and y<span class="_ _e"></span>ou’re reminded to fix<span class="_ _e"></span> them before commit<span class="_ _e"></span>ting your</div><div class="t m0 xb7 h30 yb1d fff fsc fc3 sc0 ls190 ws631">code. Most u<span class="_ _0"></span>nit-testing tools<span class="_ _0"></span> should integra<span class="_ _0"></span>te with this ap<span class="_ _0"></span>proach pretty<span class="_ _0"></span> well. Running</div><div class="t m0 xb7 h30 yb1e fff fsc fc3 sc0 lsb6 ws632">the tests a<span class="_ _e"></span>gain in a continuous integratio<span class="ls90 ws633">n e<span class="_ _e"></span>nvironment makes sure that the<span class="_ _e"></span>y pass</span></div><div class="t m0 xb7 h30 yb1f fff fsc fc3 sc0 ls90 wsb">just before the code<span class="_ _e"></span> is deployed.</div></div><a class="l" href="https://docs.travis-ci.com/user/for-beginners/"><div class="d m2" style="border-style:none;position:absolute;left:106.500000px;bottom:315.518000px;width:206.100000px;height:11.220000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://circleci.com/docs/2.0/about-circleci/"><div class="d m2" style="border-style:none;position:absolute;left:379.800000px;bottom:315.518000px;width:94.320000px;height:11.220000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://circleci.com/docs/2.0/about-circleci/"><div class="d m2" style="border-style:none;position:absolute;left:474.120000px;bottom:315.518000px;width:0.180000px;height:11.220000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://circleci.com/docs/2.0/about-circleci/"><div class="d m2" style="border-style:none;position:absolute;left:66.120000px;bottom:302.498000px;width:144.540000px;height:13.020000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
