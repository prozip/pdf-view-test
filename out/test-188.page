<div id="pfbc" class="pf w0 h0" data-page-no="bc"><div class="pc pcbc w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgbc.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">164</div><div class="t m0 xb9 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xd3 h2c y1d0 ffb fs19 fcb sc0 lsf6 ws0">HAPTER</div><div class="t m0 xd9 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 9</div><div class="t m0 x1f h2d y80 ffa fs7 fcb sc0 ls6 ws0">Keeping things lightweight</div><div class="t m0 x44 h15 y40 ff4 fsb fc3 sc0 ls31 ws305">Most sources recommend shootin<span class="ls1e ws7d2">g for a complexity of 10 or l<span class="_ _0"></span>ower for a given func-</span></div><div class="t m0 x44 h15 y839 ff4 fsb fc3 sc0 ls42 ws105">tion or method. This corresponds roughl<span class="ls2d ws103">y to how much developers can reasonably</span></div><div class="t m0 x44 h15 y83a ff4 fsb fc3 sc0 ls7d ws12a">understand at once.</div><div class="t m0 x32 h15 y83b ff4 fsb fc3 sc0 ls6b ws580"> In addition to helping you understand<span class="_ _0"></span> <span class="ls51 wsa9">the health of your code, cyclomatic com-</span></div><div class="t m0 x44 h15 y83e ff4 fsb fc3 sc0 ls31 ws1d2">plexity is useful in testing. Recall that <span class="ls1f ws5c0">cyclomati<span class="_ _0"></span>c complexity measures the number of</span></div><div class="t m0 x44 h15 y1462 ff4 fsb fc3 sc0 ls30 ws222">execution paths a function or<span class="ls25 ws8b3"> method has. Consequently, this is <span class="_ _e"></span>also th<span class="_ _0"></span>e minimum</span></div><div class="t m0 x44 h15 y1463 ff4 fsb fc3 sc0 ls38 ws166">number of distinct test cases you would ne<span class="ls3d ws27e">ed to write to cover each execution path.</span></div><div class="t m0 x44 h15 y1464 ff4 fsb fc3 sc0 ls3d ws117">This follows from the fact<span class="_ _e"></span> that each </div><div class="t m5 x4b h24 y1465 ffd fsc fc3 sc0 lsa0 ws0">if</div><div class="t m0 xa5 h15 y1464 ff4 fsb fc3 sc0 ls1a5 ws0">, </div><div class="t m5 x22 h24 y1465 ffd fsc fc3 sc0 lsa0 ws0">while</div><div class="t m0 x10d h15 y1464 ff4 fsb fc3 sc0 ls25 ws60d">, and so on requires you to prepare a dif-</div><div class="t m0 x44 h15 y1466 ff4 fsb fc3 sc0 ls4e ws3e">ferent set of preconditions to test wh<span class="ls3d ws61">at happens in one case or the other.</span></div><div class="t m0 x32 h15 y1467 ff4 fsb fc3 sc0 ls38 ws3fd"> Remember that perfect test<span class="ls36 ws3d6"> coverage doesn’t guarant<span class="ls31 ws7e5">ee that your code actually</span></span></div><div class="t m0 x44 h15 y694 ff4 fsb fc3 sc0 ls2d ws780">works; it only means your tests caused that<span class="lsc9 ws0"> p<span class="_ _1c"></span>a<span class="_ _1d"></span>r<span class="_ _1d"></span>t<span class="_ _1d"></span> o<span class="_ _1d"></span>f<span class="_ _1d"></span> t<span class="_ _1d"></span>h<span class="_ _1d"></span>e<span class="_ _1d"></span> c<span class="_ _1d"></span>o<span class="_ _1d"></span>d<span class="_ _1d"></span>e<span class="_ _1d"></span> t<span class="_ _1d"></span>o<span class="_ _1d"></span> r<span class="_ _1d"></span>u<span class="_ _1d"></span>n<span class="_ _1d"></span>.<span class="_ _1d"></span> B<span class="_ _1d"></span>u<span class="_ _1d"></span>t<span class="_ _1d"></span> m<span class="_ _1d"></span>a<span class="_ _1d"></span>k<span class="_ _1d"></span>i<span class="_ _1d"></span>n<span class="_ _1d"></span>g<span class="_ _1d"></span> s<span class="_ _1d"></span>u<span class="_ _1c"></span>r<span class="_ _1d"></span>e</span></div><div class="t m0 x44 h15 y1468 ff4 fsb fc3 sc0 ls1b ws21b">you cover the execut<span class="_ _e"></span>ion paths of interest is<span class="lsbc ws447"> usuall<span class="_ _e"></span>y a good idea. Untested branche<span class="_ _e"></span>s of</span></div><div class="t m0 x44 h15 y1469 ff4 fsb fc3 sc0 ls30 ws394">execution are usually what people are referring to when they talk about<span class="_ _e"></span> “edge <span class="_ _0"></span>cases,”</div><div class="t m0 x44 h15 y146a ff4 fsb fc3 sc0 ls42 ws8c">a term with negative co<span class="_ _e"></span>nnotations that usually means “a thing we didn’t think of.” The</div><div class="t m0 x44 h15 y146b ff4 fsb fc3 sc0 ls48 ws8b4">excellent Coverage package b<span class="_ _e"></span>y Ned Batchelder (<span class="fcc ls79 ws0">https://coverage.r<span class="_ _e"></span>eadthedocs.io<span class="fc3 ls6">)</span></span></div><div class="t m0 x44 h15 y348 ff4 fsb fc3 sc0 ls79 wsf6">can print branch<span class="_ _e"></span> coverage<span class="ls31 ws25"> metrics for your tests.</span></div><div class="t m0 x44 h15 ya93 ff4 fsb fc3 sc0 ls51 ws396">Recall the code you wrote to import GitHub<span class="ls1c ws94"> stars in Bark (repro<span class="ls79 ws8b5">duced in the follow-</span></span></div><div class="t m0 x44 h15 y146c ff4 fsb fc3 sc0 ls3a ws28">ing listing). Try to diagram <span class="ls6f ws52b">the contro<span class="_ _e"></span>l flow and calculate the cyclomatic comple<span class="_ _e"></span>xity.</span></div><div class="t m0 x44 h3b y146d ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>execute(self,<span class="_"> </span>data):</div><div class="t m0 xae h3b y146e ffd fs18 fc3 sc0 lsb2 ws0">bookmarks_imported<span class="_"> </span>=<span class="_"> </span>0</div><div class="t m0 xae h3b y146f ffd fs18 fc3 sc0 lsb2 ws0">github_username<span class="_"> </span>=<span class="_"> </span>data[&apos;github_username&apos;]</div><div class="t m0 xae h3b y1470 ffd fs18 fc3 sc0 lsb2 ws0">next_page_of_results<span class="_"> </span>=</div><div class="t m0 x44 h51 y1471 ff9 fs15 fc9 sc0 ls6 ws0">➥</div><div class="t m0 xc4 h51 y1472 ff9 fs15 fc9 sc0 ls6 ws0"> </div><div class="t m0 x32 h3b y1473 ffd fs18 fc3 sc0 lsb2 ws0">f&apos;https://api.github.com/users/{github_username}/starred&apos;</div><div class="t m0 xae h3b y1474 ffd fs18 fc3 sc0 lsb2 ws0">while<span class="_"> </span>next_page_of_results:</div><div class="t m0 x97 h3b y1475 ffd fs18 fc3 sc0 lsb2 ws0">stars_response<span class="_"> </span>=<span class="_"> </span>requests.get(</div><div class="t m0 x37 h20 y1476 ffb fs7 fc4 sc0 ls6 ws0">The code for importing GitHub stars in Bark<span class="_ _ef"></span>Listing<span class="_"> </span>9.2</div><div class="c x44 y1477 w2 h126"><div class="t m0 xb7 h2f y1478 ffb fs15 fc2 sc0 ls17b ws8b6">Halstead co<span class="_ _0"></span>mplexity</div><div class="t m0 xb7 h30 y1479 fff fsc fc3 sc0 ls203 ws8b7">For some applica<span class="_ _0"></span>tions, reducing the<span class="_ _0"></span> risk of shipping defective soft<span class="_ _0"></span>ware is as big a prior<span class="_ _0"></span>ity</div><div class="t m0 xb7 h30 y147a fff fsc fc3 sc0 ls204 ws8b8">as maintainab<span class="_ _e"></span>ility. Although reducin<span class="_ _e"></span>g branches <span class="ls205 ws8b9">in your code tends to make it more <span class="_ _0"></span>read-</span></div><div class="t m0 xb7 h30 y147b fff fsc fc3 sc0 ls206 ws8ba">able and underst<span class="_ _0"></span>andable, it hasn’t be<span class="_ _0"></span>en proven to reduce the n<span class="_ _0"></span>umber of bugs in soft-</div><div class="t m0 xb7 h30 y147c fff fsc fc3 sc0 ls207 ws8bb">ware. Cyclomatic complexity predicts the num<span class="ls208 ws8bc">ber of defects about as w<span class="_ _e"></span>ell as the number</span></div><div class="t m0 xb7 h30 y147d fff fsc fc3 sc0 ls209 ws8bd">of lines of code<span class="_ _0"></span> does. But there’s <span class="_ _0"></span>at least one <span class="_ _0"></span>set of metrics out <span class="_ _0"></span>there that tries t<span class="_ _0"></span>o</div><div class="t m0 xb7 h30 y147e fff fsc fc3 sc0 ls206 ws86e">address the <span class="_ _0"></span>defect rate.</div><div class="t m0 xb7 h30 y147f fff fsc fc3 sc0 ls1f6 ws8be">Halstead complexity attempts <span class="_ _0"></span>to measure quantitatively the ideas <span class="_ _0"></span>of level of abstraction,</div><div class="t m0 xb7 h30 y1480 fff fsc fc3 sc0 ls1f0 ws8bf">maintainability, and defect rate. Measuring Halstead complexity involves<span class="_ _0"></span> inspecting a</div><div class="t m0 xb7 h30 y1481 fff fsc fc3 sc0 ls1f0 ws8c0">program’s use of the programming langu<span class="_ _0"></span>age<span class="ws8c1">’s built-in operators and how many variables</span></div><div class="t m0 xb7 h30 y1482 fff fsc fc3 sc0 ls1f6 ws8be">and expressions it contains. It’s beyond the scope of this book, but I recommend reading</div><div class="t m0 xb7 h30 y1483 fff fsc fc3 sc0 ls1f5 ws8c2">more about it. (The Wikipedia articl<span class="ls20a ws536">e is<span class="_ _0"></span> a good place to start: <span class="fcc ls20b ws0">https<span class="_ _0"></span>://en.wikipedia.org/</span></span></div><div class="t m0 xb7 h30 y1484 fff fsc fcc sc0 ls20a ws0">wiki/Halstead_complexity_measures<span class="fc3 lseb ws8c3">.) Rad<span class="_ _0"></span>on (<span class="fcc ls1f0 ws0">https://radon.readthedocs.io<span class="fc3 ws8c4">) can mea-</span></span></span></div><div class="t m0 xb7 h30 y1485 fff fsc fc3 sc0 ls1f6 ws8c5">sure the Halstead complexity of you<span class="_ _0"></span>r Python programs if you’re interested in exploring.</div></div><div class="c x27 y3f w2c h127"><div class="t m0 xc8 h14 y1486 ff12 fs7 fcb sc0 ls88 ws314">A loop that code fu<span class="ff13 ls6 ws0">r<span class="ff12 ls12f">the</span>r<span class="ff12"> </span></span></div><div class="t m0 xc8 h14 y1487 ff12 fs7 fcb sc0 ls124 ws0">dow<span class="ff13 ls6">n</span><span class="lsee ws2cf"> will co</span><span class="ff13 ls6">m</span><span class="lsde ws2ad">e back to</span></div></div><a class="l" href="https://coverage.readthedocs.io"><div class="d m2" style="border-style:none;position:absolute;left:319.380000px;bottom:422.318000px;width:141.360000px;height:11.220000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://en.wikipedia.org/wiki/Halstead_complexity_measures"><div class="d m2" style="border-style:none;position:absolute;left:349.380000px;bottom:251.558000px;width:103.740000px;height:10.500000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://en.wikipedia.org/wiki/Halstead_complexity_measures"><div class="d m2" style="border-style:none;position:absolute;left:453.120000px;bottom:251.558000px;width:0.180000px;height:10.500000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://en.wikipedia.org/wiki/Halstead_complexity_measures"><div class="d m2" style="border-style:none;position:absolute;left:105.120000px;bottom:240.578000px;width:148.560000px;height:10.980000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://radon.readthedocs.io"><div class="d m2" style="border-style:none;position:absolute;left:292.260000px;bottom:240.578000px;width:119.400000px;height:10.500000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
