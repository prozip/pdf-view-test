<div id="pf45" class="pf w0 h0" data-page-no="45"><div class="pc pc45 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg45.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">45<span class="_ _36"></span><span class="ffa">What is abstraction?</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls2f ws246">How can abstraction help improve the sent<span class="ls44 ws45f">ence parsing? Wi<span class="_ _0"></span>th a little help from</span></div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls38 ws460">Python functions, you can simp<span class="ls3b ws461">lify this a bit. In the fo<span class="ls63 ws462">llowing<span class="_ _e"></span> listing, the pattern-</span></span></div><div class="t m0 x35 h15 y42 ff4 fsb fc3 sc0 ls2d ws31">matching is abstracted into a </div><div class="t m5 x93 h24 y66f ffd fsc fc3 sc0 lsa0 ws0">get_matches<span class="_ _e"></span>_for_pattern</div><div class="t m0 x49 h15 y533 ff4 fsb fc3 sc0 ls1c ws21"> function.</div><div class="t m0 x35 h3b y534 ffd fs18 fc3 sc0 lsb2 ws0">import<span class="_"> </span>re</div><div class="t m0 x35 h3b y670 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>get_matches_for_pattern(pattern,<span class="_"> </span>string):</div><div class="t m0 x87 h3b y671 ffd fs18 fc3 sc0 lsb2 ws0">matches<span class="_"> </span>=<span class="_"> </span>pattern.findall(string)</div><div class="t m0 x87 h3b y536 ffd fs18 fc3 sc0 lsb2 ws0">return<span class="_"> </span>[match[0]<span class="_"> </span>for<span class="_"> </span>match<span class="_"> </span>in<span class="_"> </span>matches]</div><div class="t m0 x35 h3b y672 ffd fs18 fc3 sc0 lsb2 ws0">product_review<span class="_"> </span>=<span class="_"> </span>&apos;...&apos;</div><div class="t m0 x35 h3b y53a ffd fs18 fc3 sc0 lsb2 ws0">sentence_pattern<span class="_"> </span>=<span class="_"> </span>re.compile(r&apos;(.*?\.)(\s|$)&apos;,<span class="_"> </span>re.DOTALL)</div><div class="t m0 x35 h3b y53b ffd fs18 fc3 sc0 lsb2 ws0">sentences<span class="_"> </span>=<span class="_"> </span>get_matches_for_pattern(</div><div class="t m0 x87 h3b y673 ffd fs18 fc3 sc0 lsb2 ws0">sentence_pattern,</div><div class="t m0 x87 h3b y674 ffd fs18 fc3 sc0 lsb2 ws0">product_review,</div><div class="t m0 x35 h3b y53d ffd fs18 fc3 sc0 ls6 ws0">)</div><div class="t m0 x35 h3b y675 ffd fs18 fc3 sc0 lsb2 ws0">word_pattern<span class="_"> </span>=<span class="_"> </span>re.compile(r&quot;([\w\-&apos;]+)([\s,.])?&quot;)</div><div class="t m0 x35 h3b y676 ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>sentence<span class="_"> </span>in<span class="_"> </span>sentences:</div><div class="t m0 x87 h3b y541 ffd fs18 fc3 sc0 lsb2 ws0">words<span class="_"> </span>=<span class="_"> </span>get_matches_for_pattern(</div><div class="t m0 x36 h3b y542 ffd fs18 fc3 sc0 lsb2 ws0">word_pattern,</div><div class="t m0 x36 h3b y677 ffd fs18 fc3 sc0 lsb2 ws0">sentence</div><div class="t m0 x87 h3b y678 ffd fs18 fc3 sc0 ls6 ws0">)</div><div class="t m0 x87 h3b y679 ffd fs18 fc1 sc0 lsb2 ws0">print(words)</div><div class="t m0 x35 h15 y67a ff4 fsb fc3 sc0 ls36 ws463">In the updated parsing <span class="_ _0"></span>code, it’s more clear th<span class="ls42 ws464">at the review is being broken into pieces.</span></div><div class="t m0 x35 h15 y67b ff4 fsb fc3 sc0 ls31 ws465">With well-named variables and a clear, short </div><div class="t m5 x89 h24 y67c ffd fsc fc3 sc0 lsa0 ws0">for</div><div class="t m0 xeb h15 y67b ff4 fsb fc3 sc0 ls30 ws466"> loop, the two-stage structure of the pro-</div><div class="t m0 x35 h15 y67d ff4 fsb fc3 sc0 lsea ws0">c<span class="_ _e"></span>e<span class="_ _e"></span>s<span class="_ _e"></span>s i<span class="_ _e"></span>s<span class="_ _e"></span> a<span class="_ _e"></span>l<span class="_ _e"></span>s<span class="_ _e"></span>o<span class="_ _e"></span> cl<span class="_ _e"></span>e<span class="_ _e"></span>a<span class="_ _e"></span>r<span class="_ _e"></span>.<span class="_ _e"></span> S<span class="_ _e"></span>o<span class="_ _e"></span>me<span class="_ _e"></span>o<span class="_ _e"></span>n<span class="_ _e"></span>e<span class="_ _e"></span> l<span class="_ _e"></span>o<span class="_ _e"></span>ok<span class="_ _e"></span>i<span class="_ _e"></span>n<span class="_ _e"></span>g<span class="_ _e"></span> a<span class="_ _e"></span>t<span class="_ _e"></span> t<span class="_ _e"></span>hi<span class="_ _e"></span>s<span class="_ _e"></span> c<span class="_ _e"></span>o<span class="_ _e"></span>d<span class="_ _e"></span>e<span class="_ _e"></span> l<span class="_ _e"></span>at<span class="_ _e"></span>e<span class="_ _e"></span>r<span class="_ _e"></span> w<span class="_ _e"></span>i<span class="_ _e"></span>l<span class="_ _e"></span>l b<span class="_ _e"></span>e<span class="_ _e"></span> a<span class="_ _e"></span>b<span class="_ _e"></span>l<span class="_ _e"></span>e<span class="_ _e"></span> t<span class="_ _e"></span>o r<span class="_ _e"></span>e<span class="_ _e"></span>a<span class="_ _e"></span>d<span class="_ _e"></span> t<span class="_ _e"></span>h<span class="_ _e"></span>e m<span class="_ _e"></span>a<span class="_ _e"></span>i<span class="_ _e"></span>n<span class="_ _e"></span> c<span class="_ _e"></span>o<span class="_ _e"></span>d<span class="_ _e"></span>e,</div><div class="t m0 x35 h15 y67e ff4 fsb fc3 sc0 ls2f ws467">only digging into how </div><div class="t m5 x3b h24 y67f ffd fsc fc3 sc0 lsa0 ws0">get_matches_f<span class="_ _e"></span>or_pattern</div><div class="t m0 xf0 h15 y67e ff4 fsb fc3 sc0 ls1c ws21d"> works if they’re curious or want to</div><div class="t m0 x35 h15 y680 ff4 fsb fc3 sc0 ls51 ws47">change it. Abstraction has introduced clar<span class="ws35">ity and code reuse into this program. </span></div><div class="t m0 x19 h26 y681 ffc fs15 fc2 sc0 ls13f ws468">3<span class="_ _0"></span>.<span class="_ _1d"></span>1.<span class="_ _1d"></span>3<span class="_ _b"> </span>A<span class="_ _0"></span>bstraction is a simplifier</div><div class="t m0 x35 h15 y682 ff4 fsb fc3 sc0 ls38 ws26">I want to emphasize that abstraction is usef<span class="ls35 ws24">ul for making code easier to understand; it</span></div><div class="t m0 x35 h15 y683 ff4 fsb fc3 sc0 ls1c ws130">achieves this by keeping the intricacies of<span class="ls44 ws32d"> some functionality hidden away until you</span></div><div class="t m0 x35 h15 y684 ff4 fsb fc3 sc0 ls31 ws335">want to know more. This is a technique <span class="ls38 ws180">used in writing technical documentation as</span></div><div class="t m0 x35 h15 y685 ff4 fsb fc3 sc0 ls62 ws278">well as design<span class="_ _e"></span>ing the interfaces used<span class="_ _e"></span><span class="ls80 wsff"> to interact with code libraries.</span></div><div class="t m0 x83 h15 y686 ff4 fsb fc3 sc0 ls3e ws2d"> Understanding code is much like unders<span class="_ _0"></span><span class="ls2f ws26a">tanding a passage from a book. A passage</span></div><div class="t m0 x35 h15 y687 ff4 fsb fc3 sc0 ls36 ws93">has many sentences, which are like the line<span class="ls34 ws469">s of code. In any given sentence, you may</span></div><div class="t m0 x35 h15 y688 ff4 fsb fc3 sc0 lsc3 ws0">fi<span class="_ _e"></span>nd a<span class="_ _e"></span> wor<span class="_ _e"></span>d wi<span class="_ _e"></span>th w<span class="_ _e"></span>hic<span class="_ _e"></span>h yo<span class="_ _e"></span>u’re<span class="_ _e"></span> unf<span class="_ _e"></span>am<span class="_ _e"></span>ilia<span class="_ _e"></span>r. I<span class="_ _e"></span>n so<span class="_ _e"></span>ftw<span class="_ _e"></span>are<span class="_ _e"></span>, th<span class="_ _e"></span>is m<span class="_ _e"></span>igh<span class="_ _e"></span>t be<span class="_ _e"></span> a li<span class="_ _e"></span>ne o<span class="_ _e"></span>f co<span class="_ _e"></span>de t<span class="_ _e"></span>hat</div><div class="t m0 x35 h15 y689 ff4 fsb fc3 sc0 ls20 ws9b">does something new or different<span class="_ _e"></span> than you’<span class="ls5e ws46a">re used to. When you <span class="_ _e"></span>find such words in</span></div><div class="t m0 x35 h15 y68a ff4 fsb fc3 sc0 ls2f ws1c1">books, you might look them up in the dict<span class="ls71 ws46b">ionary. The only equivalent when dealing</span></div><div class="t m0 x35 h15 y68b ff4 fsb fc3 sc0 ls8d ws46c">with lengthy proc<span class="_ _e"></span>edures is diligent code commen<span class="_ _e"></span>ting.</div><div class="t m0 x17 h20 y561 ffb fs7 fc4 sc0 ls6 ws0">Refactored sentence parsing<span class="_ _56"></span>Listing<span class="_"> </span>3.2</div><div class="c x6d y68c wa h56"><div class="t m0 x43 h14 y68d ff12 fs7 fcb sc0 lsd2 ws0">A <span class="ff13 ls6">n</span><span class="ls10c ws3d9">ew fu</span><span class="ff13 ls6">n</span><span class="lse4">ctio<span class="ff13 ls6">n</span><span class="ls105 ws327"> to do </span></span></div><div class="t m0 x43 h14 y68e ff12 fs7 fcb sc0 ls10c ws3d9">the patte<span class="ff13 ls103 ws0">rn<span class="ff12 ls6">-<span class="ff13">m</span><span class="ls10f">atchi</span><span class="ff13">n</span>g</span></span></div></div><div class="c xa5 y68f w25 h71"><div class="t m0 x43 h14 y65f ff12 fs7 fcb sc0 ls126 ws46d">Now you ca<span class="ff13 ls6 ws0">n</span><span class="ls140 ws46e"> ask the fu<span class="ff13 ls6 ws0">n<span class="ff12 lse4">ctio</span>n<span class="ff12"> </span></span></span></div><div class="t m0 x43 h14 y690 ff12 fs7 fcb sc0 ls105 ws327">to do the ha<span class="ff13 ls6 ws0">r</span><span class="ls102 ws319">d wo<span class="ff13 ls6 ws0">r<span class="ff12 ls100">k.</span></span></span></div></div><div class="c xa5 y691 wa h46"><div class="t m0 x43 h14 y2ed ff12 fs7 fcb sc0 ls10c ws3d9">You ca<span class="ff13 ls6 ws0">n<span class="ff12"> </span>r</span><span class="ls13c ws46f">euse the fu<span class="ff13 ls6 ws0">n<span class="ff12 lse4">ctio</span>n<span class="ff12"> </span></span></span></div><div class="t m0 x43 h14 y2ee ff12 fs7 fcb sc0 ls105 ws0">whe<span class="ff13 ls6">n</span><span class="lsd5">eve<span class="ff13 ls6">r</span><span class="lsee ws2cf"> you </span><span class="ff13 ls6">n</span><span class="ls10a ws470">eed to.</span></span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
