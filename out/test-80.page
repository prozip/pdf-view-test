<div id="pf50" class="pf w0 h0" data-page-no="50"><div class="pc pc50 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg50.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">56</div><div class="t m0 x8e h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xf2 h2c y1d0 ffb fs19 fcb sc0 ls12b ws0">HAPTER</div><div class="t m0 xc9 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 3</div><div class="t m0 x47 h2d y80 ffa fs7 fcb sc0 ls6 ws0">Abstraction and encapsulation</div><div class="t m0 x97 h3b y395 ffd fs18 fc3 sc0 lsb2 ws0">print(f&apos;The<span class="_"> </span>{name}<span class="_"> </span>says,<span class="_"> </span>&quot;Hello!&quot;&apos;)</div><div class="t m0 x44 h3b y40d ffd fs18 fc3 sc0 lsb2 ws0">class<span class="_"> </span>RollOverMixin:</div><div class="t m0 xae h3b y483 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>roll_over(self):</div><div class="t m0 x97 h3b y484 ffd fs18 fc3 sc0 lsb2 ws0">print(&apos;Did<span class="_"> </span>a<span class="_"> </span>barrel<span class="_"> </span>roll!&apos;)</div><div class="t m0 x44 h3b y486 ffd fs18 fc3 sc0 lsb2 ws0">class<span class="_"> </span>Dog(SpeakMixin,<span class="_"> </span>RollOverMixin):</div><div class="t m0 xae h3b y487 ffd fs18 fc1 sc0 lsb2 ws0">pass</div><div class="t m0 x44 h15 y148 ff4 fsb fc3 sc0 ls81 wsdb">Now that </div><div class="t m5 xd8 h24 y7b9 ffd fsc fc3 sc0 lsa0 ws0">Dog</div><div class="t m0 xc3 h15 y148 ff4 fsb fc3 sc0 ls38 ws3dd"> has inherited from some mixins, you can check that your dog knows a</div><div class="t m0 x44 h15 y149 ff4 fsb fc3 sc0 ls38 ws26">couple of tricks:</div><div class="t m0 x44 h3b y7ba ffd fs18 fc3 sc0 lsb2 ws0">dog<span class="_"> </span>=<span class="_"> </span>Dog()</div><div class="t m0 x44 h3b y7bb ffd fs18 fc3 sc0 lsb2 ws0">dog.speak()</div><div class="t m0 x44 h3b y3f8 ffd fs18 fc1 sc0 lsb2 ws0">dog.roll_over()</div><div class="t m0 x44 h15 y270 ff4 fsb fc3 sc0 ls34 ws22">You should see this output:</div><div class="t m0 x44 h3b y7bc ffd fs18 fc3 sc0 lsb2 ws0">The<span class="_"> </span>dog<span class="_"> </span>says,<span class="_"> </span>&quot;Hello!&quot;</div><div class="t m0 x44 h3b y3fb ffd fs18 fc1 sc0 lsb2 ws0">Did<span class="_"> </span>a<span class="_"> </span>barrel<span class="_"> </span>roll!</div><div class="t m0 x44 h15 y3fd ff4 fsb fc3 sc0 ls71 ws2f6">The fact that the dog knows English is susp<span class="ls30 ws414">ect, but otherwise this checks out. We’ll</span></div><div class="t m0 x44 h15 y3ff ff4 fsb fc3 sc0 ls48 ws4e0">take a deeper dive into inhe<span class="ls3a ws12e">ritance and some other related concepts in chapters 7 and</span></div><div class="t m0 x44 h15 y699 ff4 fsb fc3 sc0 ls51 ws47">8, so sit tight!</div><div class="t m0 x42 h1f yf4 ffc fs13 fc2 sc0 lsc0 ws4fb">3<span class="_ _0"></span>.<span class="_ _1d"></span>6<span class="_ _21"> </span>Recognizing the wrong abstraction</div><div class="t m0 x44 h15 y41d ff4 fsb fc3 sc0 ls1c ws400">Almost as useful as applying<span class="ls36 ws4fc"> abstraction to new code is <span class="ls44 ws47f">recognizing when abstr<span class="_ _0"></span>actions</span></span></div><div class="t m0 x44 h15 y741 ff4 fsb fc3 sc0 ls81 ws4fd">in existing c<span class="_ _e"></span>ode aren’t working. Th<span class="_ _e"></span>is coul<span class="ls44 ws3ac">d be because new code has proven that the</span></div><div class="t m0 x44 h15 y742 ff4 fsb fc3 sc0 ls1c ws82">abstraction doesn’t fit all use cases, or it could be that you see a way to make<span class="_ _e"></span> the code</div><div class="t m0 x44 h15 y743 ff4 fsb fc3 sc0 ls35 ws4fe">clearer with a different paradigm. Whatever <span class="_ _0"></span><span class="ls30 ws13f">the case, taking the time to care for the</span></div><div class="t m0 x44 h15 y744 ff4 fsb fc3 sc0 ls38 ws26">code is a task others will appreciate, even if they don’t realize it explicitly.</div><div class="t m0 x42 h26 y7bd ffc fs15 fc2 sc0 ls151 ws315">3<span class="_ _0"></span>.<span class="_ _0"></span>6<span class="_ _0"></span>.<span class="_ _0"></span>1<span class="_ _11"> </span>Square pe<span class="_ _e"></span>gs in round holes</div><div class="t m0 x44 h15 y7be ff4 fsb fc3 sc0 ls2d ws4ff">As I’ve said, abstraction should<span class="ls20 ws500"> be leveraged to make sure th<span class="_ _e"></span>ings are clearer and easier.</span></div><div class="t m0 x44 h15 y7bf ff4 fsb fc3 sc0 ls3b ws70">If an abstraction causes you to bend <span class="_ _e"></span>over backward just to make something work, con-</div><div class="t m0 x44 h15 y7c0 ff4 fsb fc3 sc0 ls1c ws42a">sider updating it to remove the friction or<span class="ls38 ws3e6"> replace it with a new approach altogether.</span></div><div class="t m0 x44 h15 y5f7 ff4 fsb fc3 sc0 ls152 ws12a">I’ve<span class="_ _e"></span> gotten<span class="_ _e"></span> pretty<span class="_ _e"></span> far int<span class="_ _e"></span>o new co<span class="_ _e"></span>de tryi<span class="_ _e"></span>ng to m<span class="_ _e"></span>ake it w<span class="_ _e"></span>ork with<span class="_ _e"></span> what w<span class="_ _e"></span>as in pl<span class="_ _e"></span>ace, on<span class="_ _e"></span>ly</div><div class="t m0 x44 h15 y102 ff4 fsb fc3 sc0 ls3d ws1ac">to realize it would be easier to change th<span class="ls31 ws238">e environment than adapt to it. The trade-offs</span></div><div class="t m0 x44 h15 y5ce ff4 fsb fc3 sc0 ls2d ws4ff">here are time and effort, both in rewriting th<span class="ls80 ws118">e code and making<span class="_ _e"></span> sure<span class="ls1e ws501"> it still works. That</span></span></div><div class="t m0 x44 h15 y5d0 ff4 fsb fc3 sc0 ls42 ws26e">up-front time you spend might save ever<span class="ls34 ws22">yone time in the long run, though.</span></div><div class="t m0 x32 h15 y7c1 ff4 fsb fc3 sc0 ls3b ws425"> If the interface to a third-part<span class="_ _e"></span>y package <span class="ls42 ws502">causes friction, and you’re not in a posi-</span></div><div class="t m0 x44 h15 y7c2 ff4 fsb fc3 sc0 ls48 ws322">tion to spend time or effort updating thei<span class="ls36 wsb2">r code, you can always consider creating an</span></div><div class="t m0 x44 h15 y7c3 ff4 fsb fc3 sc0 ls2f ws4a4">abstraction around that interf<span class="ls3b ws503">ace for your own co<span class="_ _e"></span>de to use. This is often called an</span></div><div class="t m0 x44 h15 y7c4 ff3 fsb fc3 sc0 ls3d ws0">adapter<span class="ff4 ls71 ws4c2"> in software, and I liken it to using one of those airport travel plugs in another</span></div><div class="c x10b y7c5 w30 h5b"><div class="t m0 x43 h14 y7c6 ff12 fs7 fcb sc0 ls113 ws0">The <span class="ff13 ls6">r</span><span class="ls88">oll-ove<span class="ff13 ls6">r</span><span class="lsff ws504"> behavio<span class="_ _0"></span><span class="ff13 ls6 ws0">r<span class="ff12"> </span></span></span></span></div><div class="t m0 x43 h14 y7c7 ff12 fs7 fcb sc0 ls6 ws0">i<span class="ff13">n</span><span class="lsdc ws2ac"> RollOve</span><span class="ff13">r</span><span class="ls125">Mixi</span><span class="ff13">n</span><span class="ls103 ws31b"> is </span></div><div class="t m0 x43 h14 y7c8 ff12 fs7 fcb sc0 ls6 ws0">co<span class="ff13">m</span><span class="ws317">posable too.</span></div></div><div class="c x13 y753 w31 h5d"><div class="t m0 x43 h14 y7c9 ff12 fs7 fcb sc0 ls88 ws0">You<span class="ff13 ls6">r</span><span class="lsdb ws2ab"> Dog ca</span><span class="ff13 ls6">n</span><span class="lsdc ws2ac"> speak, </span></div><div class="t m0 x43 h14 y7ca ff13 fs7 fcb sc0 ls6 ws0">r<span class="ff12 ls10a">oll_ove</span>r<span class="ff12 ls127 ws505">, a</span>n<span class="ff12 ls88 ws314">d whateve</span>r<span class="ff12"> </span></div><div class="t m0 x43 h14 y7cb ff12 fs7 fcb sc0 ls125 ws3cc">else you teach it.</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
