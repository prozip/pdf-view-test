<div id="pf76" class="pf w0 h0" data-page-no="76"><div class="pc pc76 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg76.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">94</div><div class="t m0 xbe h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xa8 h2c y1d0 ffb fs19 fcb sc0 ls185 ws0">HAPTER</div><div class="t m0 x93 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 5</div><div class="t m0 x5d h2d y80 ffa fs7 fcb sc0 ls6 ws0">Testing your software</div><div class="t m0 x32 h15 y40 ff4 fsb fc3 sc0 ls42 ws27b"> Some of the values you need to test are <span class="ls1e ws8b">dictionaries. Unittest <span class="ls38 ws1a9">has a special method,</span></span></div><div class="t m5 x44 h24 y532 ffd fsc fc3 sc0 lsa0 ws0">assertDictEqu<span class="_ _e"></span>al</div><div class="t m0 x28 h15 y41 ff4 fsb fc3 sc0 ls1f ws677">, that provides useful output speci<span class="_ _0"></span>fic to dictionaries when the test</div><div class="t m0 x44 h15 y533 ff4 fsb fc3 sc0 ls48 ws0">fails.</div><div class="t m0 x32 h15 y43 ff4 fsb fc3 sc0 ls2f ws36e"> For short tests like the one you wrote alre<span class="ls30 ws37d">ady, you can skip saving the expected and</span></div><div class="t m0 x44 h15 y44 ff4 fsb fc3 sc0 ls3a ws4b7">actual values as variables. Enter the expressions directly<span class="ls20 ws51"> as arguments to </span></div><div class="t m5 xde h24 y9b8 ffd fsc fc3 sc0 lsa0 ws0">assertEqual</div><div class="t m0 x88 h15 y44 ff4 fsb fc3 sc0 ls6 ws0">:</div><div class="t m0 x44 h3b y246 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>test_transform_name_for_sku(self):</div><div class="t m0 xae h3b y247 ffd fs18 fc3 sc0 lsb2 ws0">small_black_shoes<span class="_"> </span>=<span class="_"> </span>Product(&apos;shoes&apos;,<span class="_"> </span>&apos;S&apos;,<span class="_"> </span>&apos;black&apos;)</div><div class="t m0 xae h3b y248 ffd fs18 fc3 sc0 lsb2 ws0">self.assertEqual(</div><div class="t m0 x97 h3b yc29 ffd fs18 fc3 sc0 lsb2 ws0">&apos;SHOES&apos;,</div><div class="t m0 x97 h3b yc2a ffd fs18 fc3 sc0 lsb2 ws0">small_black_shoes.transform_name_for_sku(),</div><div class="t m0 xae h3b ya24 ffd fs18 fc1 sc0 ls6 ws0">)</div><div class="t m0 x44 h15 y26c ff4 fsb fc3 sc0 ls34 ws11f">When youâ€™ve given it a try, <span class="ls1c ws42a">come <span class="_ _e"></span>back and check the following listing to see how you</span></div><div class="t m0 x44 h15 y26d ff4 fsb fc3 sc0 ls5e ws57">did. Remember to use the unittest test runner afte<span class="_ _e"></span>r writing or changing <span class="_ _0"></span>a test to see if</div><div class="t m0 x44 h15 y414 ff4 fsb fc3 sc0 ls1b wsf">the test continues to pass.</div><div class="t m0 x44 h3b yc2b ffd fs18 fc3 sc0 lsb2 ws0">class<span class="_"> </span>ProductTestCase(unittest.TestCase):</div><div class="t m0 xae h3b yc2c ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>test_transform_name_for_sku(self):</div><div class="t m0 x97 h3b yc2d ffd fs18 fc3 sc0 lsb2 ws0">small_black_shoes<span class="_"> </span>=<span class="_"> </span>Product(&apos;shoes&apos;,<span class="_"> </span>&apos;S&apos;,<span class="_"> </span>&apos;black&apos;)</div><div class="t m0 x97 h3b yc2e ffd fs18 fc3 sc0 lsb2 ws0">self.assertEqual(</div><div class="t m0 xc3 h3b y278 ffd fs18 fc3 sc0 lsb2 ws0">&apos;SHOES&apos;,</div><div class="t m0 xc3 h3b yc2f ffd fs18 fc3 sc0 lsb2 ws0">small_black_shoes.transform_name_for_sku(),</div><div class="t m0 x97 h3b yc30 ffd fs18 fc3 sc0 ls6 ws0">)</div><div class="t m0 xae h3b yc31 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>test_transform_color_for_sku(self):</div><div class="t m0 x97 h3b yc32 ffd fs18 fc3 sc0 lsb2 ws0">small_black_shoes<span class="_"> </span>=<span class="_"> </span>Product(&apos;shoes&apos;,<span class="_"> </span>&apos;S&apos;,<span class="_"> </span>&apos;black&apos;)</div><div class="t m0 x97 h3b yc33 ffd fs18 fc3 sc0 lsb2 ws0">self.assertEqual(</div><div class="t m0 xc3 h3b yc34 ffd fs18 fc3 sc0 lsb2 ws0">&apos;BLACK&apos;,</div><div class="t m0 xc3 h3b yc35 ffd fs18 fc3 sc0 lsb2 ws0">small_black_shoes.transform_color_for_sku(),</div><div class="t m0 x97 h3b yc36 ffd fs18 fc3 sc0 ls6 ws0">)</div><div class="t m0 xae h3b yc37 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>test_generate_sku(self):</div><div class="t m0 x97 h3b yc38 ffd fs18 fc3 sc0 lsb2 ws0">small_black_shoes<span class="_"> </span>=<span class="_"> </span>Product(&apos;shoes&apos;,<span class="_"> </span>&apos;S&apos;,<span class="_"> </span>&apos;black&apos;)</div><div class="t m0 x97 h3b yc39 ffd fs18 fc3 sc0 lsb2 ws0">self.assertEqual(</div><div class="t m0 xc3 h3b yc3a ffd fs18 fc3 sc0 lsb2 ws0">&apos;SHOES-S-BLACK&apos;,</div><div class="t m0 xc3 h3b yc3b ffd fs18 fc3 sc0 lsb2 ws0">small_black_shoes.generate_sku(),</div><div class="t m0 x97 h3b yc3c ffd fs18 fc3 sc0 ls6 ws0">)</div><div class="t m0 x37 h20 yc3d ffb fs7 fc4 sc0 ls6 ws0">A test suite for<span class="_ _9d"></span>Listing<span class="_"> </span>5.3</div><div class="t m0 xd9 h62 yc3e ff16 fs21 fc4 sc0 ls128 ws0">Product</div><div class="t m0 xa5 h20 yc3d ffb fs7 fc4 sc0 ls6 ws0"> and </div><div class="t m0 xf h62 yc3e ff16 fs21 fc4 sc0 ls128 ws0">ShoppingCart</div><div class="t m0 x44 h3b yc3f ffd fs18 fcd sc0 ls6 ws0">class</div><div class="t m3 x0 h3a yc3f ff8 fs18 fcd sc0 ls6 ws0"> </div><div class="t m0 x82 h3b yc3f ffd fs18 fcd sc0 ls6 ws0">ShoppingCartTestCase(unitt<span class="_ _e"></span>est.TestCase):</div><div class="t m0 xae h3b yc40 ffd fs18 fcd sc0 ls6 ws0">def</div><div class="t m3 x0 h3a yc40 ff8 fs18 fcd sc0 ls6 ws0"> </div><div class="t m0 x97 h3b yc40 ffd fs18 fcd sc0 ls6 ws0">test_cart_initially_e<span class="_ _e"></span>mpty(self):</div><div class="t m0 x97 h3b yc41 ffd fs18 fcd sc0 ls6 ws0">cart</div><div class="t m3 x0 h3a yc41 ff8 fs18 fcd sc0 ls6 ws0"> </div><div class="t m0 x37 h3b yc41 ffd fs18 fcd sc0 ls6 ws0">=</div><div class="t m3 x0 h3a yc41 ff8 fs18 fcd sc0 ls6 ws0"> </div><div class="t m0 x17 h3b yc41 ffd fs18 fcd sc0 ls6 ws0">ShoppingCart()</div><div class="t m0 x97 h3b yc42 ffd fs18 fcd sc0 ls6 ws0">self.assertDictEqual(<span class="_ _e"></span>{},</div><div class="t m3 x0 h3a yc42 ff8 fs18 fcd sc0 ls6 ws0"> </div><div class="t m0 xb3 h3b yc42 ffd fs18 fcd sc0 ls6 ws0">cart.products)</div><div class="t m0 xae h3b yc43 ffd fs18 fcd sc0 ls6 ws0">def</div><div class="t m3 x0 h3a yc43 ff8 fs18 fcd sc0 ls6 ws0"> </div><div class="t m0 x97 h3b yc43 ffd fs18 fcd sc0 ls6 ws0">test_add_product(self<span class="_ _e"></span>):</div><div class="t m0 x97 h3b yc44 ffd fs18 fcd sc0 ls6 ws0">cart</div><div class="t m3 x0 h3a yc44 ff8 fs18 fcd sc0 ls6 ws0"> </div><div class="t m0 x37 h3b yc44 ffd fs18 fcd sc0 ls6 ws0">=</div><div class="t m3 x0 h3a yc44 ff8 fs18 fcd sc0 ls6 ws0"> </div><div class="t m0 x17 h3b yc44 ffd fs18 fcd sc0 ls6 ws0">ShoppingCart()</div><div class="t m0 x97 h3b yc45 ffd fs18 fcd sc0 ls6 ws0">product</div><div class="t m3 x0 h3a yc45 ff8 fs18 fcd sc0 ls6 ws0"> </div><div class="t m0 x28 h3b yc45 ffd fs18 fcd sc0 ls6 ws0">=</div><div class="t m3 x0 h3a yc45 ff8 fs18 fcd sc0 ls6 ws0"> </div><div class="t m0 x66 h3b yc45 ffd fs18 fcd sc0 ls6 ws0">Product(&apos;shoes&apos;,</div><div class="t m3 x0 h3a yc45 ff8 fs18 fcd sc0 ls6 ws0"> </div><div class="t m0 x6a h3b yc45 ffd fs18 fcd sc0 ls6 ws0">&apos;S&apos;,</div><div class="t m3 x0 h3a yc45 ff8 fs18 fcd sc0 ls6 ws0"> </div><div class="t m0 x12 h3b yc45 ffd fs18 fcd sc0 ls6 ws0">&apos;blue&apos;)</div><div class="t m0 x97 h3b yc46 ffd fs18 fcd sc0 ls6 ws0">cart.add_product(prod<span class="_ _e"></span>uct)</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
