<div id="pf6a" class="pf w0 h0" data-page-no="6a"><div class="pc pc6a w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgf0.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">82</div><div class="t m0 xbe h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xa8 h2c y1d0 ffb fs19 fcb sc0 ls185 ws0">HAPTER</div><div class="t m0 x93 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 5</div><div class="t m0 x5d h2d y80 ffa fs7 fcb sc0 ls6 ws0">Testing your software</div><div class="t m0 x44 h26 y1e4 ffc fs15 fc2 sc0 lsbe ws604">Unit testing<span class="_ _93"></span>5<span class="_ _0"></span>.<span class="_ _1d"></span>2.<span class="_ _0"></span>4</div><div class="t m0 x44 h15 y140 ff3 fsb fc3 sc0 ls25 ws605">Unit testing<span class="ff4 ls48 ws31e"> is perhaps the most important thing <span class="ls1c ws94">you can take away from<span class="_ _e"></span> this chapter.</span></span></div><div class="t m0 x44 h15 y141 ff4 fsb fc3 sc0 ls70 ws606">Unit tests m<span class="_ _e"></span>ake sure all the li<span class="_ _e"></span>ttle bits of<span class="ls38 wsf5"> your software are working, and they lay a</span></div><div class="t m0 x44 h15 y142 ff4 fsb fc3 sc0 ls20 ws478">strong foundation for larger testing ef<span class="_ _e"></span>forts <span class="ls38 ws3dd">like end-to-end testing. I’ll show you how</span></div><div class="t m0 x44 h15 y143 ff4 fsb fc3 sc0 ls5e ws14a">to get started <span class="_ _e"></span>with unit testing in Python in section 5.4.</div><div class="t m0 x32 h49 yad2 ffb fs17 fc2 sc0 lsf5 ws0">DEFINITION</div><div class="t m0 x91 h15 y6cc ff4 fsb fc3 sc0 ls1f ws0">A <span class="_ _f"></span><span class="ff3 ls42">unit<span class="ff4 wsde"> is a small, fundamental piec<span class="ls5e ws46a">e of software—like the “unit”</span></span></span></div><div class="t m0 x32 h15 yad3 ff4 fsb fc3 sc0 lsaf ws0">i<span class="_ _1c"></span>n<span class="_ _1c"></span> “<span class="_ _1d"></span>u<span class="_ _1c"></span>n<span class="_ _1d"></span>i<span class="_ _1c"></span>t<span class="_ _1c"></span> c<span class="_ _1d"></span>i<span class="_ _1c"></span>r<span class="_ _1c"></span>c<span class="_ _1d"></span>l<span class="_ _1c"></span>e<span class="_ _1d"></span>.<span class="_ _1c"></span>”<span class="_ _1c"></span> W<span class="_ _1d"></span>h<span class="_ _1c"></span>a<span class="_ _1c"></span>t<span class="_ _1d"></span> c<span class="_ _1c"></span>o<span class="_ _1d"></span>n<span class="_ _1c"></span>s<span class="_ _1d"></span>t<span class="_ _1c"></span>i<span class="_ _1c"></span>t<span class="_ _1d"></span>u<span class="_ _1c"></span>t<span class="_ _1c"></span>e<span class="_ _1d"></span>s<span class="_ _1c"></span> a<span class="_ _1c"></span> u<span class="_ _1d"></span>n<span class="_ _1c"></span>i<span class="_ _1d"></span>t<span class="_ _1c"></span> i<span class="_ _1c"></span>s<span class="_ _1d"></span> t<span class="_ _1c"></span>h<span class="_ _1c"></span>e<span class="_ _1d"></span> s<span class="_ _1c"></span>o<span class="_ _1d"></span>u<span class="_ _1c"></span>r<span class="_ _1c"></span>c<span class="_ _1d"></span>e<span class="_ _1c"></span> o<span class="_ _1d"></span>f<span class="_ _1c"></span> m<span class="_ _1c"></span>u<span class="_ _1d"></span>c<span class="_ _1c"></span>h<span class="_ _1c"></span> p<span class="_ _1d"></span>h<span class="_ _1c"></span>i<span class="_ _1d"></span>l<span class="_ _1c"></span>o<span class="_ _1c"></span>s<span class="_ _1d"></span>o<span class="_ _1c"></span>p<span class="_ _1d"></span>h<span class="_ _1c"></span>i<span class="_ _1c"></span>c<span class="_ _1d"></span>a<span class="_ _1c"></span>l</div><div class="t m0 x32 h15 yad4 ff4 fsb fc3 sc0 ls34 wsb6">waxing, but a good working definition is <span class="ls18b ws0">t<span class="_ _1d"></span>ha<span class="_ _1d"></span>t<span class="_ _1d"></span> i<span class="_ _0"></span>t<span class="_ _1d"></span>’<span class="_ _0"></span>s<span class="_ _1d"></span> a<span class="_ _0"></span> p<span class="_ _1d"></span>i<span class="_ _0"></span>e<span class="_ _1d"></span>c<span class="_ _0"></span>e<span class="_ _1d"></span> of<span class="_ _1c"></span> co<span class="_ _1d"></span>d<span class="_ _1d"></span>e<span class="_ _0"></span> t<span class="_ _1d"></span>ha<span class="_ _1c"></span>t c<span class="_ _1c"></span>a<span class="_ _0"></span>n<span class="_ _1d"></span> be</span></div><div class="t m0 x32 h15 yad5 ff4 fsb fc3 sc0 ls62 ws607">isolated for <span class="_ _e"></span>testing. Functions are<span class="_ _e"></span> generally considered<span class="_ _e"></span> units—they can be</div><div class="t m0 x32 h15 y149 ff4 fsb fc3 sc0 ls3a ws608">executed in isolation by calling them<span class="ls3d ws5ac"> with the appropri<span class="ls34 ws215">ate inputs. Lines of</span></span></div><div class="t m0 x32 h15 ya0c ff4 fsb fc3 sc0 ls5e ws4bb">code within those function<span class="_ _e"></span>s can’t be is<span class="ls34 ws2f2">olated, so they’re smaller than a unit.</span></div><div class="t m0 x32 h15 y345 ff4 fsb fc3 sc0 ls38 ws3e6">Classes contain many pieces that can be <span class="ls1e wsb4">isolated further, so they’re generally</span></div><div class="t m0 x32 h15 yad6 ff4 fsb fc3 sc0 ls2f ws23">bigger than a unit, but they ar<span class="ls3a ws1e0">e occasionally treated as units.</span></div><div class="t m0 x44 h15 y3a1 ff4 fsb fc3 sc0 ls48 ws609">Unit testing seeks to verify t<span class="_ _e"></span>hat all the in<span class="ls3d ws5ac">dividual units of code in your application</span></div><div class="t m0 x44 h15 y6d1 ff4 fsb fc3 sc0 ls3d ws3f6">work correctly, that each small piece of the so<span class="ls48">ftware does what it says it does. These are</span></div><div class="t m0 x44 h15 y6d2 ff4 fsb fc3 sc0 ls3d ws117">the most fundamental tests you can write and <span class="ls2f ws5db">are therefore a great place to get started</span></div><div class="t m0 x44 h15 y6d3 ff4 fsb fc3 sc0 ls1c ws21">with testing.</div><div class="t m0 x32 h15 yad7 ff4 fsb fc3 sc0 ls1e ws4ce"> Functions are the most common<span class="ls21 ws60a"> target of functiona<span class="_ _0"></span>l unit tests. “Function” is ri<span class="_ _0"></span>ght</span></div><div class="t m0 x44 h15 y96 ff4 fsb fc3 sc0 ls36 ws60b">there in the name, after all. This <span class="_ _0"></span>is beca<span class="ls20 ws60c">use of functions’ input-output nature. If</span></div><div class="t m0 x44 h15 y34d ff4 fsb fc3 sc0 ls3e ws1b3">you’ve separated the concerns of your code in<span class="_ _0"></span><span class="ls34 ws3a8">to small functions, testing them will be a</span></div><div class="t m0 x44 h15 y34e ff4 fsb fc3 sc0 ls3a ws1e0">straightforward application of <span class="ws28">the functional testing recipe.</span></div><div class="t m0 x32 h15 y6d4 ff4 fsb fc3 sc0 ls48 ws4e0"> It turns out that one of the <span class="_ _e"></span>great benefits<span class="ls44 wsd1"> of structuring your code using separation</span></div><div class="t m0 x44 h15 yad8 ff4 fsb fc3 sc0 ls2d ws371">of concerns, encapsulation, and loose coupling<span class="ls38 ws33f"> is that it makes code easier to test.</span></div><div class="t m0 x44 h15 y158 ff4 fsb fc3 sc0 ls2d ws177">Testing can feel tedious, so <span class="ls44 ws5ae">any opportunity to reduce friction is<span class="_ _0"></span> welcome. The easier</span></div><div class="t m0 x44 h15 y159 ff4 fsb fc3 sc0 ls48 ws52f">the code is to test, the more likely it is t<span class="_ _e"></span>hat you’ll <span class="ff3 ls9e ws0">write</span><span class="ls6b ws5d3"> tho<span class="_ _0"></span>se tests in the first plac<span class="_ _0"></span>e, so</span></div><div class="t m0 x44 h15 y5b2 ff4 fsb fc3 sc0 ls25 ws60d">you can reap the reward of confidence in yo<span class="ls38 ws256">ur software. Units are the small, separated</span></div><div class="t m0 x44 h15 y6d5 ff4 fsb fc3 sc0 ls1c ws21">pieces you naturally arrive at<span class="ls3d ws2c"> by sticking with the prac<span class="ws61">tices you’ve learned so far.</span></span></div><div class="t m0 x32 h15 yad9 ff4 fsb fc3 sc0 ls36 ws60e"> Most unit tests in Python compare ex<span class="ls6b ws60f">pected and actual outputs using a simple</span></div><div class="t m0 x44 h15 y5b4 ff4 fsb fc3 sc0 ls2e ws610">equality comparison. You can do one of th<span class="ls30 ws32c">ese yourself right now. Open the Python</span></div><div class="t m0 x44 h15 yfd ff4 fsb fc3 sc0 ls3e ws4a">REPL and create this </div><div class="t m5 xb1 h24 ya31 ffd fsc fc3 sc0 lsa0 ws0">calculate_mea<span class="_ _e"></span>n</div><div class="t m0 xa5 h15 yfd ff4 fsb fc3 sc0 lsac ws439"> function:</div><div class="t m0 x44 h3b y5b5 ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>def<span class="_"> </span>calculate_mean(numbers):</div><div class="t m0 x44 h3b y476 ffd fs18 fc1 sc0 lsb2 ws0">...<span class="_ _94"> </span>return<span class="_"> </span>sum(numbers)<span class="_"> </span>/<span class="_"> </span>len(numbers)</div><div class="t m0 x44 h15 y268 ff4 fsb fc3 sc0 ls36 ws230">Now you can test your expectations of this<span class="lsc5 ws611"> <span class="_ _0"></span>function with a fe<span class="_ _0"></span>w different i<span class="_ _0"></span>nputs, com-</span></div><div class="t m0 x44 h15 y5a2 ff4 fsb fc3 sc0 ls20 ws51">paring the output to your expected results:</div><div class="t m0 x44 h3b yada ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>2.5<span class="_"> </span>==<span class="_"> </span>calculate_mean([1,<span class="_"> </span>2,<span class="_"> </span>3,<span class="_"> </span>4])</div><div class="t m0 x44 h3b yadb ffd fs18 fc3 sc0 lsb2 ws0">True</div><div class="t m0 x44 h3b yadc ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>5.5<span class="_"> </span>==<span class="_"> </span>calculate_mean([5,<span class="_"> </span>5,<span class="_"> </span>5,<span class="_"> </span>6,<span class="_"> </span>6,<span class="_"> </span>6])</div><div class="t m0 x44 h3b yadd ffd fs18 fc1 sc0 lsb2 ws0">True</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
