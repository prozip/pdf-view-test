<div id="pf3b" class="pf w0 h0" data-page-no="3b"><div class="pc pc3b w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg3b.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">35<span class="_ _3d"></span><span class="ffa">The hierarchy of separation in Python</span></div><div class="t m0 x35 h3b y395 ffd fs18 fc3 sc0 lsb2 ws0">...</div><div class="t m0 x87 h3b y397 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>simulate(self):</div><div class="t m0 x36 h3b y40d ffd fs18 fc3 sc0 lsb2 ws0">self.print_options()</div><div class="t m0 x36 h3b y483 ffd fs18 fc3 sc0 lsb2 ws0">human_choice<span class="_"> </span>=<span class="_"> </span>self.get_human_choice()</div><div class="t m0 x36 h3b y484 ffd fs18 fc3 sc0 lsb2 ws0">computer_choice<span class="_"> </span>=<span class="_"> </span>self.get_computer_choice()</div><div class="t m0 x36 h3b y569 ffd fs18 fc3 sc0 lsb2 ws0">self.print_choices(human_choice,<span class="_"> </span>computer_choice)</div><div class="t m0 x36 h3b y56a ffd fs18 fc1 sc0 lsb2 ws0">self.print_result(human_choice,<span class="_"> </span>computer_choice)</div><div class="t m0 x35 h15 y40e ff4 fsb fc3 sc0 ls5e ws3db">You might have noticed <span class="_ _e"></span>that even though ev<span class="ls51 ws23d">erything’s contained in a class now, the</span></div><div class="t m0 x35 h15 y40f ff4 fsb fc3 sc0 ls51 ws3dc">data is still being passed all over. But <span class="_ _0"></span>now that<span class="lsc3 ws0"> th<span class="_ _e"></span>ing<span class="_ _e"></span>s are<span class="_ _e"></span> con<span class="_ _e"></span>ta<span class="_ _e"></span>ined<span class="_ _e"></span>, it<span class="_ _e"></span>’s e<span class="_ _e"></span>asi<span class="_ _e"></span>er t<span class="_ _e"></span>o ma<span class="_ _e"></span>ke</span></div><div class="t m0 x35 h15 y410 ff4 fsb fc3 sc0 ls38 ws3dd">some additional changes. You can create an <span class="ls51 ws13e">initializer that sets up the attributes you</span></div><div class="t m0 x35 h15 y56b ff4 fsb fc3 sc0 ls1c ws2ea">need for the class, namely </div><div class="t m5 xd9 h24 y56c ffd fsc fc3 sc0 lsa0 ws0">human_choice</div><div class="t m0 x80 h15 y56b ff4 fsb fc3 sc0 ls5f ws3de"> and </div><div class="t m5 xeb h24 y56c ffd fsc fc3 sc0 lsa0 ws0">computer_choi<span class="_ _e"></span>ce</div><div class="t m0 x5c h15 y56b ff4 fsb fc3 sc0 ls1e ws11a">, with a default value</div><div class="t m0 x35 h15 y56d ff4 fsb fc3 sc0 lsbc ws0">of </div><div class="t m5 xae h24 y56e ffd fsc fc3 sc0 lsa0 ws0">None</div><div class="t m0 xef h15 y56d ff4 fsb fc3 sc0 ls6 ws0">:</div><div class="t m0 x35 h3b y56f ffd fs18 fc3 sc0 lsb2 ws0">...</div><div class="t m0 x87 h3b y570 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>__init__(self):</div><div class="t m0 x36 h3b y571 ffd fs18 fc3 sc0 lsb2 ws0">self.computer_choice<span class="_"> </span>=<span class="_"> </span>None</div><div class="t m0 x36 h3b y572 ffd fs18 fc1 sc0 lsb2 ws0">self.human_choice<span class="_"> </span>=<span class="_"> </span>None</div><div class="t m0 x35 h15 y1a4 ff4 fsb fc3 sc0 ls30 wse3">Now methods can access these attributes using the </div><div class="t m5 x3e h24 y573 ffd fsc fc3 sc0 lsa0 ws0">self</div><div class="t m0 x49 h15 y1a4 ff4 fsb fc3 sc0 ls31 ws200"> argument instead of passing</div><div class="t m0 x35 h15 y1a5 ff4 fsb fc3 sc0 ls31 ws376">them around. As a result, you can <span class="ls1c ws375">update <span class="_ _e"></span>the method bodies to use </span></div><div class="t m5 x96 h24 y574 ffd fsc fc3 sc0 lsa0 ws0">self.human_</div><div class="t m5 x35 h24 y575 ffd fsc fc3 sc0 lsa0 ws0">choice</div><div class="t m0 x20 h15 y576 ff4 fsb fc3 sc0 ls31 ws213"> in place of </div><div class="t m5 x67 h24 y575 ffd fsc fc3 sc0 lsa0 ws0">human_choice</div><div class="t m0 x5d h15 y576 ff4 fsb fc3 sc0 ls51 ws3dc"> and remove the </div><div class="t m5 x55 h24 y575 ffd fsc fc3 sc0 lsa0 ws0">human_choice</div><div class="t m0 x33 h15 y576 ff4 fsb fc3 sc0 ls34 ws13b"> argument altogether.</div><div class="t m5 x35 h24 y577 ffd fsc fc3 sc0 lsa0 ws0">computer_choi<span class="_ _e"></span>ce</div><div class="t m0 x66 h15 y1a7 ff4 fsb fc3 sc0 ls47 ws54"> gets the same treatm<span class="_ _e"></span>ent.</div><div class="t m0 x83 h15 y1a8 ff4 fsb fc3 sc0 ls38 ws1f4"> The code boils down to what you see in the foll<span class="_ _0"></span>owing listing.</div><div class="t m0 x35 h3b y578 ffd fs18 fc3 sc0 lsb2 ws0">import<span class="_"> </span>random</div><div class="t m0 x35 h3b y579 ffd fs18 fc3 sc0 lsb2 ws0">OPTIONS<span class="_"> </span>=<span class="_"> </span>[&apos;rock&apos;,<span class="_"> </span>&apos;paper&apos;,<span class="_"> </span>&apos;scissors&apos;]</div><div class="t m0 x35 h3b y57a ffd fs18 fc3 sc0 lsb2 ws0">class<span class="_"> </span>RockPaperScissorsSimulator:</div><div class="t m0 x87 h3b y57b ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>__init__(self):</div><div class="t m0 x36 h3b y57c ffd fs18 fc3 sc0 lsb2 ws0">self.computer_choice<span class="_"> </span>=<span class="_"> </span>None</div><div class="t m0 x36 h3b y57d ffd fs18 fc3 sc0 lsb2 ws0">self.human_choice<span class="_"> </span>=<span class="_"> </span>None</div><div class="t m0 x87 h3b y57e ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>get_computer_choice(self):</div><div class="t m0 x36 h3b y57f ffd fs18 fc3 sc0 lsb2 ws0">self.computer_choice<span class="_"> </span>=<span class="_"> </span>random.choice(OPTIONS)</div><div class="t m0 x87 h3b y580 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>get_human_choice(self):</div><div class="t m0 xab h3b y581 ffd fs18 fc3 sc0 lsb2 ws0">&apos;))<span class="_ _42"></span>choice:<span class="_ _43"></span>of<span class="_"> </span>your<span class="_ _44"></span>the<span class="_"> </span>number<span class="_ _45"></span>int(input(&apos;Enter<span class="_ _44"></span>=<span class="_ _43"></span>choice_number</div><div class="t m0 x9c h3b y582 ffd fs18 fc3 sc0 lsb2 ws0">1]<span class="_ _46"></span>-<span class="_ _47"></span>OPTIONS[choice_number<span class="_ _47"></span>=<span class="_ _4d"></span>self.human_choice</div><div class="t m0 x87 h3b y583 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>print_options(self):</div><div class="t m0 x36 h3b y584 ffd fs18 fc3 sc0 lsb2 ws0">print(&apos;\n&apos;.join(f&apos;({i})<span class="_"> </span>{option.title()}&apos;<span class="_"> </span>for<span class="_"> </span>i,</div><div class="t m0 x35 h51 y585 ff9 fs15 fc9 sc0 ls11f ws0">➥ </div><div class="t m0 x83 h3b y586 ffd fs18 fc3 sc0 lsb2 ws0">option<span class="_"> </span>in<span class="_"> </span>enumerate(OPTIONS)))</div><div class="t m0 x87 h3b y587 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>print_choices(self):</div><div class="t m0 x17 h20 y588 ffb fs7 fc4 sc0 ls6 ws0">Using<span class="_ _4e"></span>Listing<span class="_"> </span>2.5</div><div class="t m0 xb9 h62 y589 ff16 fs21 fc4 sc0 ls128 ws0">self</div><div class="t m0 xc9 h20 y588 ffb fs7 fc4 sc0 ls6 ws0"> to access attributes</div><div class="c xf0 y3a w18 h63"><div class="t m0 x43 h14 y58a ff12 fs7 fcb sc0 lsdc ws3df">Methods ca<span class="ff13 ls6 ws0">n</span><span class="ls102 ws3cd"> set </span></div><div class="t m0 x43 h14 y58b ff12 fs7 fcb sc0 ls10f ws0">att<span class="ff13 ls6">r</span><span class="lsee ws30e">ibutes o</span><span class="ff13 ls6">n</span><span class="lsd5 ws2a6"> self.</span></div></div><div class="c xf0 y58c w1c h60"><div class="t m0 x43 h14 y58d ff12 fs7 fcb sc0 lsd6 ws3da">Methods do<span class="ff13 ls6 ws0">n<span class="ff12 lsef">’t </span>n</span><span class="lsda ws2aa">eed to take </span></div><div class="t m0 x43 h14 y58e ff12 fs7 fcb sc0 ls10f ws0">att<span class="ff13 ls6">r</span><span class="lsd3 ws3e0">ibutes as pa<span class="_ _0"></span><span class="ff13 ls6 ws0">r<span class="ff12">a</span>m<span class="ff12 ls105">ete</span>r<span class="ff12 ls119">s.</span></span></span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
