<div id="pf90" class="pf w0 h0" data-page-no="90"><div class="pc pc90 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg90.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">120</div><div class="t m0 x66 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 x8e h2c y1d0 ffb fs19 fcb sc0 ls185 ws0">HAPTER</div><div class="t m0 xf1 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 6</div><div class="t m0 xe4 h2d y80 ffa fs7 fcb sc0 ls6 ws0">Separation of concerns in practice</div><div class="t m0 x44 h15 y40 ff4 fsb fc3 sc0 ls30 ws36">The presentation layer of Bark<span class="ls25 ws1e1"> contains an infinite loop:</span></div><div class="t m0 xbc h3d y93a ffb fs1e fca sc0 ls6 ws0">1</div><div class="t m0 x87 h15 y140 ff4 fsb fc3 sc0 ls30 ws36">Clears the screen</div><div class="t m0 xbc h3d y93b ffb fs1e fca sc0 ls6 ws0">2</div><div class="t m0 x87 h15 y6c7 ff4 fsb fc3 sc0 lsc5 ws3ab">Prints the menu opti<span class="_ _0"></span>ons</div><div class="t m0 xbc h3d y93c ffb fs1e fca sc0 ls6 ws0">3</div><div class="t m0 x87 h15 y6c9 ff4 fsb fc3 sc0 ls9e ws285">Gets the user’s cho<span class="_ _0"></span>ice</div><div class="t m0 xbc h3d y93d ffb fs1e fca sc0 ls6 ws0">4</div><div class="t m0 x87 h15 y6cb ff4 fsb fc3 sc0 ls20 ws772">Clears the screen and executes the <span class="ls38 ws773">command corresponding to the user’s</span></div><div class="t m0 x87 h15 y340 ff4 fsb fc3 sc0 ls80 ws0">choice</div><div class="t m0 xbc h3d yf93 ffb fs1e fca sc0 ls6 ws0">5</div><div class="t m0 x87 h15 yf94 ff4 fsb fc3 sc0 ls47 ws54">Waits for the user to review <span class="_ _e"></span>the resu<span class="ls3d ws61">lt, pressing Enter when they’re done</span></div><div class="t m0 x44 h15 y48 ff4 fsb fc3 sc0 ls30 ws13f">Now that you’re working on the presentation<span class="ls3a ws18c"> layer, you’ll need to create a new bark</span></div><div class="t m0 x44 h15 y49 ff4 fsb fc3 sc0 ls1f ws774">module. It’s a good practice to put code<span class="_ _0"></span><span class="ls2f ws775"> for command-line applications into an </span></div><div class="t m5 xab h24 yf95 ffd fsc fc3 sc0 lsa0 ws0">if </div><div class="t m0 x109 h1b y49 ff3 fsb fc3 sc0 ls34 ws0">name</div><div class="t m5 x44 h24 yf96 ffd fsc fc3 sc0 lsa0 ws0">==</div><div class="t m0 xc4 h15 y4a ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m5 x32 h24 yf96 ffd fsc fc3 sc0 ls6 ws0">&apos;</div><div class="t m0 x3c h1b y4a ff3 fsb fc3 sc0 ls44 ws0">main</div><div class="t m5 x97 h24 yf96 ffd fsc fc3 sc0 ls6 ws0">&apos;:</div><div class="t m0 x79 h15 y4a ff4 fsb fc3 sc0 ls6b ws776"> block; this will make su<span class="ls9e ws777">re you don’t un<span class="_ _0"></span>intentionally execut<span class="_ _0"></span>e the code in the</span></div><div class="t m0 x44 h15 y5ab ff4 fsb fc3 sc0 ls51 ws778">module by importing the bark module somewher<span class="ls3d ws779">e. If you <span class="_ _e"></span>start with a Hello, World! type</span></div><div class="t m0 x44 h15 y14b ff4 fsb fc3 sc0 ls34 ws22">of program, you can do <span class="_ _e"></span>a quick check to<span class="ls3e ws4a"> mak<span class="_ _0"></span>e sure things are set up properly.</span></div><div class="t m0 x32 h15 y4d ff4 fsb fc3 sc0 ls20 ws51"> Start with the following in your bark <span class="_ _e"></span>module:</div><div class="t m0 x44 h3b yf97 ffd fs18 fc3 sc0 lsb2 ws0">if<span class="_"> </span>__name__<span class="_"> </span>==<span class="_"> </span>&apos;__main__&apos;:</div><div class="t m0 xae h3b yf98 ffd fs18 fc1 sc0 lsb2 ws0">print(&apos;Welcome<span class="_"> </span>to<span class="_"> </span>Bark!&apos;)</div><div class="t m0 x44 h15 y9ed ff4 fsb fc3 sc0 ls3a ws28">Try running </div><div class="t m5 x21 h24 yf99 ffd fsc fc3 sc0 lsa0 ws77a">python bark.<span class="_ _e"></span>py</div><div class="t m0 xd9 h15 y9ed ff4 fsb fc3 sc0 ls4e ws1e3"> in your terminal; you should see </div><div class="t m5 x58 h24 yf99 ffd fsc fc3 sc0 lsa0 ws77a">Welcome to <span class="_ _e"></span>Bark!</div><div class="t m0 x9f h15 y9ed ff4 fsb fc3 sc0 ls3d ws2c"> as a</div><div class="t m0 x44 h15 y9ee ff4 fsb fc3 sc0 ls2e ws4d">result. Now you can start hooking up the pr<span class="ls1c ws21">esentation layer to some bus<span class="_ _0"></span>iness logic.</span></div><div class="t m0 x44 h30 yf9a ffb fsc fc2 sc0 ls6 ws0">D</div><div class="t m0 x12c h5a yf9b ffb fs20 fc2 sc0 ls1cc ws0">ATABASE</div><div class="t m0 x20 h30 yf9a ffb fsc fc2 sc0 ls6 ws0"> </div><div class="t m0 xef h5a yf9b ffb fs20 fc2 sc0 ls1cd ws0">INITIALIZATION</div><div class="t m0 x44 h15 yf9c ff4 fsb fc3 sc0 ls30 ws167">Remember that Bark needs to initialize th<span class="ls20">e database, creating the bookmarks table<span class="_ _e"></span> if</span></div><div class="t m0 x44 h15 yf9d ff4 fsb fc3 sc0 ls3b ws1ee">it doesn’t already exist. Import <span class="_ _e"></span>the comm<span class="ls6 ws660">ands module and <span class="_ _e"></span>update your code to exe-</span></div><div class="t m0 x44 h15 yf9e ff4 fsb fc3 sc0 ls7d ws77b">cute the </div><div class="t m5 x90 h24 yf9f ffd fsc fc3 sc0 lsa0 ws0">CreateBookma<span class="_ _e"></span>rksTableCommand</div><div class="t m0 xa1 h15 yf9e ff4 fsb fc3 sc0 ls30 ws77c">, as shown in the following snippe<span class="_ _e"></span>t. After</div><div class="t m0 x44 h15 yfa0 ff4 fsb fc3 sc0 ls51 ws108">making this update and running </div><div class="t m5 xfe h24 yfa1 ffd fsc fc3 sc0 lsa0 ws36c">python bark.p<span class="_ _e"></span>y</div><div class="t m0 x54 h15 yfa0 ff4 fsb fc3 sc0 lsab ws77d">, you won’t see any t<span class="_ _0"></span>ext output, but</div><div class="t m0 x44 h15 ydbe ff4 fsb fc3 sc0 ls48 ws39">you should see that a book<span class="_ _e"></span><span class="ls31 ws25">marks.db file is created.</span></div><div class="t m0 x44 h3b yfa2 ffd fs18 fc3 sc0 ls69 ws0">import<span class="_"> </span>commands</div><div class="t m0 x44 h3b yfa3 ffd fs18 fc3 sc0 ls69 ws0">if<span class="_"> </span>__name__<span class="_"> </span>==<span class="_"> </span>&apos;__main__&apos;:</div><div class="t m0 xae h3b yfa4 ffd fs18 fc1 sc0 ls69 ws0">commands.CreateBookmarksTableCommand().execute()</div><div class="t m0 x44 h15 yfa5 ff4 fsb fc3 sc0 ls31 ws2b7">It may seem small, but you’ve just accomp<span class="ls2f ws10d">lished something pretty<span class="_ _0"></span> remarkable. This</span></div><div class="t m0 x44 h15 yef4 ff4 fsb fc3 sc0 ls35 ws422">represents a full pass thr<span class="_ _0"></span>ough all the layers of your <span class="ff3">multiti<span class="_ _0"></span>er architecture<span class="ff4 ls48 ws4a5">. The presenta-</span></span></div><div class="t m0 x44 h15 ye1f ff4 fsb fc3 sc0 ls71 ws2bd">tion layer (the act of running bark.py, so <span class="ls2f wsf3">far) has triggered a command in the business</span></div><div class="t m0 x44 h15 yef6 ff4 fsb fc3 sc0 ls2f ws3e6">logic, which, in turn, set up a table in th<span class="ls66 ws77e">e persistence layer fit for sto<span class="_ _0"></span>ring bookmarks.</span></div><div class="t m0 x44 h15 yef7 ff4 fsb fc3 sc0 ls31 ws21c">Each layer knows just enough about its surrou<span class="ws2c6">ndings to do its job; things are well sep-</span></div><div class="t m0 x44 h15 yef8 ff4 fsb fc3 sc0 ls3d ws2c0">arated and loosely coupled. Yo<span class="_ _e"></span>u’ll experience<span class="ls3a ws74"> this a few more times as you start add-</span></div><div class="t m0 x44 h15 yef9 ff4 fsb fc3 sc0 ls3d ws2c">ing menu options to Bark th<span class="_ _e"></span><span class="ls2d ws31">at trigger mo<span class="ls34 ws22">re commands. </span></span></div><div class="t m0 x44 h30 yfa6 ffb fsc fc2 sc0 ls6 ws0">M</div><div class="t m0 x35 h5a yfa7 ffb fs20 fc2 sc0 ls1ce ws0">ENU</div><div class="t m0 x8a h30 yfa6 ffb fsc fc2 sc0 ls6 ws0"> </div><div class="t m0 x1b h5a yfa7 ffb fs20 fc2 sc0 ls11c ws0">OPTIONS</div><div class="t m0 x44 h15 yfa8 ff4 fsb fc3 sc0 ls3e ws747">When you start Bark, it should present you <span class="ls42 ws3af">with a menu of opti<span class="ls2d ws5a0">ons that looks some-</span></span></div><div class="t m0 x44 h15 yfa9 ff4 fsb fc3 sc0 ls30 wsbd">thing like this:</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
