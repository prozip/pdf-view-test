<div id="pfd5" class="pf w0 h0" data-page-no="d5"><div class="pc pcd5 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgd5.png"/><div class="t m0 xa0 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">189<span class="_ _37"></span><span class="ffa">Addressi<span class="_ _0"></span>ng coupling</span></div><div class="t m0 x19 h26 y1e4 ffc fs15 fc2 sc0 ls21b ws907">10.4.1<span class="_ _fc"> </span>U<span class="_ _e"></span>se<span class="_ _e"></span>r<span class="_ _e"></span> m<span class="_ _e"></span>es<span class="_ _e"></span>s<span class="_ _e"></span>ag<span class="_ _e"></span>i<span class="_ _e"></span>n<span class="_ _e"></span>g</div><div class="t m0 x35 h15 y140 ff4 fsb fc3 sc0 ls30 wsb0">Because mobile apps tend to focus on visu<span class="ls71 ws138">al and tactile elements, you’ll want to use</span></div><div class="t m0 x35 h15 y141 ff4 fsb fc3 sc0 ls2e ws542">icons in additi<span class="_ _0"></span>on to your me<span class="ls31 ws238">ssages to indicate success. A moment ago, you saw that the</span></div><div class="t m0 x35 h15 y142 ff4 fsb fc3 sc0 ls51 wsba">messaging in Bark is coupled to the business logic layer. To fix this limitation, you</div><div class="t m0 x35 h15 y143 ff4 fsb fc3 sc0 ls4e ws56c">need to release co<span class="_ _e"></span>ntrol of the messaging fu<span class="ls20 wsac">lly to the presentation layer. H<span class="_ _e"></span>ow can you</span></div><div class="t m0 x35 h15 y144 ff4 fsb fc3 sc0 ls3a ws63c">keep the interaction bet<span class="_ _e"></span>ween commands and the presentation layer without each</div><div class="t m0 x35 h15 y145 ff4 fsb fc3 sc0 ls2f ws23">command having explicit knowle<span class="ls34 ws22">dge of the message it shows?</span></div><div class="t m0 x83 h15 y146 ff4 fsb fc3 sc0 ls20 ws134"> Note that the outcome of some command<span class="ls31 ws213">s is a success m<span class="_ _e"></span>essage, whereas for others</span></div><div class="t m0 x35 h15 y24e ff4 fsb fc3 sc0 lsf3 ws0">it<span class="_ _e"></span>’<span class="_ _e"></span>s a<span class="_ _e"></span> re<span class="_ _e"></span>s<span class="_ _e"></span>ul<span class="_ _e"></span>t o<span class="_ _e"></span>f<span class="_ _e"></span> so<span class="_ _e"></span>me<span class="_ _e"></span> k<span class="_ _e"></span>in<span class="_ _e"></span>d (<span class="_ _e"></span>a<span class="_ _e"></span> li<span class="_ _e"></span>st<span class="_ _e"></span> o<span class="_ _e"></span>f b<span class="_ _e"></span>oo<span class="_ _e"></span>k<span class="_ _e"></span>ma<span class="_ _e"></span>rk<span class="_ _e"></span>s<span class="_ _e"></span>, f<span class="_ _e"></span>or<span class="_ _e"></span> e<span class="_ _e"></span>xa<span class="_ _e"></span>mp<span class="_ _e"></span>l<span class="_ _e"></span>e)<span class="_ _e"></span>. Y<span class="_ _e"></span>o<span class="_ _e"></span>u c<span class="_ _e"></span>an<span class="_ _e"></span> h<span class="_ _e"></span>an<span class="_ _e"></span>dl<span class="_ _e"></span>e<span class="_ _e"></span> th<span class="_ _e"></span>is<span class="_ _e"></span> i<span class="_ _e"></span>n t<span class="_ _e"></span>he</div><div class="t m0 x35 h15 yb6 ff4 fsb fc3 sc0 ls38 ws1a3">presentation layer by splitting up the concep<span class="ls1e ws225">t of “success” and “result,” with each com-</span></div><div class="t m0 x35 h15 y8b ff4 fsb fc3 sc0 ls31 ws25">mand returning a tuple representing <span class="ff3 ls1e ws0">both</span><span class="ls7d ws11c"> the status and the result.</span></div><div class="t m0 x83 h15 y26c ff4 fsb fc3 sc0 ls2c ws1c"> The commands you’ve built should all<span class="_ _0"></span> ex<span class="ls42 ws32">ecute successfully, so for the moment the</span></div><div class="t m0 x35 h15 y26d ff4 fsb fc3 sc0 ls47 ws94b">status for each co<span class="_ _e"></span>mmand can be </div><div class="t m5 x4b h24 y4f6 ffd fsc fc3 sc0 lsa0 ws0">True</div><div class="t m0 x64 h15 y26d ff4 fsb fc3 sc0 ls6b ws94c">. Eventually, you could have command<span class="_ _0"></span>s return</div><div class="t m5 x35 h24 y415 ffd fsc fc3 sc0 lsa0 ws0">False</div><div class="t m0 x102 h15 y414 ff4 fsb fc3 sc0 lsae ws94d"> if they can fail.<span class="_ _0"></span> The commands that curr<span class="_ _0"></span>ently return a result<span class="_ _0"></span> can continue using</div><div class="t m0 x35 h15 y14d ff4 fsb fc3 sc0 ls71 wsd4">the same result as before, and <span class="ls31 ws25">commands without a result can use </span></div><div class="t m5 x120 h24 y416 ffd fsc fc3 sc0 lsa0 ws0">None</div><div class="t m0 x7 h15 y14d ff4 fsb fc3 sc0 ls6 ws0">.</div><div class="t m0 x83 h15 y14e ff4 fsb fc3 sc0 ls51 ws3dc"> Update each of your commands to return a </div><div class="t m5 x51 h24 y14fc ffd fsc fc3 sc0 lsa0 ws0">status,</div><div class="t m0 x5a h15 y14e ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m5 xe9 h24 y14fc ffd fsc fc3 sc0 lsa0 ws0">result</div><div class="t m0 xdd h15 y14e ff4 fsb fc3 sc0 ls2d ws18b"> tuple. You’ll also need</div><div class="t m0 x35 h15 y417 ff4 fsb fc3 sc0 ls3d ws5ac">to update the </div><div class="t m5 xad h24 y4f7 ffd fsc fc3 sc0 lsa0 ws0">Option</div><div class="t m0 xd3 h15 y417 ff4 fsb fc3 sc0 ls3a ws91"> class in the presentation laye<span class="ls47 ws8df">r to acco<span class="_ _e"></span>unt for the new return</span></div><div class="t m0 x35 h15 y418 ff4 fsb fc3 sc0 ls34 ws22">behavior. What approach fits with how yo<span class="ls3b ws29">u’ve built the presentation layer so far?</span></div><div class="t m0 x8a h3d y172e ffb fs1e fca sc0 ls6 ws0">1</div><div class="t m0 x48 h15 y1a5 ff4 fsb fc3 sc0 ls71 ws0">Make </div><div class="t m5 x91 h24 y574 ffd fsc fc3 sc0 lsa0 ws0">Option</div><div class="t m0 xd6 h15 y1a5 ff4 fsb fc3 sc0 ls2f ws94e"> print different success messa<span class="ls80 ws94f">ges depending on the comm<span class="_ _e"></span>and</span></div><div class="t m0 x48 h15 y1a6 ff4 fsb fc3 sc0 ls1c ws0">executed.</div><div class="t m0 x8a h3d y172f ffb fs1e fca sc0 ls6 ws0">2</div><div class="t m0 x48 h15 y128 ff4 fsb fc3 sc0 ls3d ws950">Configure each </div><div class="t m5 x3b h24 y1730 ffd fsc fc3 sc0 lsa0 ws0">Option</div><div class="t m0 x59 h15 y128 ff4 fsb fc3 sc0 ls44 ws8e5"> instance with a specific <span class="ls2f ws7e3">message to use when a com-</span></div><div class="t m0 x48 h15 y129 ff4 fsb fc3 sc0 ls2f ws26">mand succeeds.</div><div class="t m0 x8a h3d y1731 ffb fs1e fca sc0 ls6 ws0">3</div><div class="t m0 x48 h15 y25f ff4 fsb fc3 sc0 ls38 ws0">Subclass </div><div class="t m5 x28 h24 y1732 ffd fsc fc3 sc0 lsa0 ws0">Option</div><div class="t m0 x3 h15 y25f ff4 fsb fc3 sc0 ls3a ws1e0"> for each kind of message you want to display.</div><div class="t m0 x35 h15 y260 ff4 fsb fc3 sc0 ls1c ws10">Option 1 could work, but<span class="_ _e"></span> each new command<span class="ls2d ws1d"> would add to the conditional logic that</span></div><div class="t m0 x35 h15 y261 ff4 fsb fc3 sc0 ls34 ws3d5">determines which message to show. Option<span class="ls20 ws3e3"> 3 might also work, but remember that</span></div><div class="t m0 x35 h15 y262 ff4 fsb fc3 sc0 ls6c ws951">inheritance shou<span class="_ _0"></span>ld be used sparingly; it<span class="_ _0"></span>’s unclear that ther<span class="_ _0"></span>e’s enough specialize<span class="_ _0"></span>d</div><div class="t m0 x35 h15 y118 ff4 fsb fc3 sc0 ls42 ws90">behavior present to justify creating all th<span class="ls31 ws2c2">ose subclasses. Option 2 gives you just the</span></div><div class="t m0 x35 h15 ya0 ff4 fsb fc3 sc0 ls3b ws952">right amount of customizat<span class="_ _e"></span>ion without a lot of extra effort. Reme<span class="_ _e"></span>mber that Bark</div><div class="t m0 x35 h15 y263 ff4 fsb fc3 sc0 ls34 ws3c3">should continue to function identically <span class="ls38 ws23e">as you refactor the messaging—you’re ref<span class="_ _e"></span>ac-</span></div><div class="t m0 x35 h15 y264 ff4 fsb fc3 sc0 ls20 ws17">toring only to make development easier on yourself.</div><div class="t m0 x83 h15 y265 ff4 fsb fc3 sc0 ls20 ws400"> Try it yourself, and come back to<span class="_ _e"></span> the foll<span class="ls8d ws870">owing two<span class="_ _e"></span> listings for help,<span class="_ _e"></span> or look at the</span></div><div class="t m0 x35 h15 y266 ff4 fsb fc3 sc0 ls30 ws612">full source code for this chapter (see <span class="_ _e"></span><span class="fcc ls36 ws0">https://github.com/dan<span class="_ _0"></span>eah/practices-of-the</span></div><div class="t m0 x35 h15 y267 ff4 fsb fcc sc0 ls71 ws0">-python-pro<span class="fc3 ls15f">).</span></div><div class="t m0 x35 h3b y1733 ffd fs18 fc3 sc0 lsb2 ws0">class<span class="_"> </span>AddBookmarkCommand(Command):</div><div class="t m0 x87 h3b y1734 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>execute(self,<span class="_"> </span>data,<span class="_"> </span>timestamp=None):</div><div class="t m0 x36 h3b y13b0 ffd fs18 fc3 sc0 lsb2 ws0">data[&apos;date_added&apos;]<span class="_"> </span>=<span class="_"> </span>timestamp<span class="_"> </span>or<span class="_"> </span>datetime.utcnow().isoformat()</div><div class="t m0 x36 h3b y13b1 ffd fs18 fc3 sc0 lsb2 ws0">db.add(&apos;bookmarks&apos;,<span class="_"> </span>data)</div><div class="t m0 x36 h3b y1735 ffd fs18 fc3 sc0 lsb2 ws0">return<span class="_"> </span>True,<span class="_"> </span>None</div><div class="t m0 x83 h20 y1736 ffb fs7 fc4 sc0 ls6 ws0">Listing<span class="_"> </span>10.8<span class="_ _55"> </span>Decoupling layers of abstraction with interfa<span class="_ _0"></span>ces</div><div class="c x141 y1737 wd5 h9f"><div class="t m0 x12e h14 y1738 ff12 fs7 fcb sc0 lsff ws315">The AddBook<span class="ff13 ls6 ws0">m<span class="ff12">a</span>r<span class="ff12 ls14e">kCo</span><span class="ls10e">mm</span><span class="ff12">a</span>n<span class="ff12 lsec">d </span></span></div><div class="t m0 x12e h14 y1739 ff12 fs7 fcb sc0 ls88 ws2d0">succeeds but does<span class="ff13 ls6 ws0">n<span class="ff12 lsef">’t </span>r<span class="ff12 ls105">etu</span><span class="ls103">rn</span><span class="ff12"> </span></span></div><div class="t m0 x12e h14 y173a ff12 fs7 fcb sc0 ls122 ws0">a <span class="ff13 ls6">r</span><span class="ls10a">esult.</span></div></div><div class="c xe4 y3f wd5 hb7"><div class="t m0 x12e h14 y173b ff12 fs7 fcb sc0 ls113 ws0">The <span class="ff13 ls6">r</span><span class="ls105">etu<span class="ff13 ls123">rn</span><span class="ls10c ws3d9"> value is a T</span><span class="ff13 ls6">r</span><span class="lsd3">ue </span></span></div><div class="t m0 x12e h14 y173c ff12 fs7 fcb sc0 ls18d ws691">status a<span class="ff13 ls6 ws0">n</span><span class="lsfd ws310">d a No<span class="ff13 ls6 ws0">n<span class="ff12">e </span>r</span><span class="ws0">esult.</span></span></div></div><a class="l" href="https://github.com/daneah/practices-of-the-python-pro"><div class="d m2" style="border-style:none;position:absolute;left:278.040000px;bottom:183.518000px;width:196.080000px;height:11.220000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://github.com/daneah/practices-of-the-python-pro"><div class="d m2" style="border-style:none;position:absolute;left:474.120000px;bottom:183.518000px;width:0.180000px;height:11.220000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://github.com/daneah/practices-of-the-python-pro"><div class="d m2" style="border-style:none;position:absolute;left:66.120000px;bottom:170.498000px;width:86.940000px;height:13.020000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
