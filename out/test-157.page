<div id="pf9d" class="pf w0 h0" data-page-no="9d"><div class="pc pc9d w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg9d.png"/><div class="t m0 xa0 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">133<span class="_ _36"></span><span class="ffa">Solutions for rigidity</span></div><div class="t m0 x35 h15 ybe ff4 fsb fc3 sc0 ls25 ws7ea">This recap of loose coupling shows how what you’ve learned so far can help you</div><div class="t m0 x35 h15 ybec ff4 fsb fc3 sc0 ls20 ws251">design flexible code. Now I’ll <span class="_ _e"></span>teach you a few new techniques for getting e<span class="_ _e"></span>ven deeper</div><div class="t m0 x35 h15 y259 ff4 fsb fc3 sc0 ls78 ws0">flexibility. </div><div class="t m0 x19 h1f y10e4 ffc fs13 fc2 sc0 ls1da ws7b0">7<span class="_ _1d"></span>.2<span class="_ _a"> </span>Solutions for rigidity</div><div class="t m0 x35 h15 y5b1 ff4 fsb fc3 sc0 ls51 ws5c4">Rigidity in code is a lot li<span class="_ _0"></span>ke stiff joints. As<span class="ls7d ws4f4"> software gets older, the code that gets used</span></div><div class="t m0 x35 h15 yfb0 ff4 fsb fc3 sc0 ls6 ws2eb">the least tends t<span class="_ _e"></span>o be the most rigid, and it <span class="_ _e"></span><span class="ls20 ws235">requires some care to loosen it up again.</span></div><div class="t m0 x35 h15 yfb1 ff4 fsb fc3 sc0 ls2f ws3b0">Specific kinds of rigid code require specif<span class="ws126">ic kinds of care, and you should regularly</span></div><div class="t m0 x35 h15 y157 ff4 fsb fc3 sc0 ls2f ws23">examine code for opportunities to k<span class="ls1e ws13">eep it flexible through refactoring.</span></div><div class="t m0 x83 h15 ycb ff4 fsb fc3 sc0 ls2d ws31"> In the next few sections, you’ll learn <span class="ls5e ws14a">some specific ways to<span class="_ _e"></span> reduce rigidity.</span></div><div class="t m0 x19 h26 y10e5 ffc fs15 fc2 sc0 ls1db ws7eb">7<span class="_ _0"></span>.<span class="_ _1d"></span>2.<span class="_ _1d"></span>1<span class="_ _5f"> </span>Letting<span class="_ _0"></span> go: Inversion of control</div><div class="t m0 x35 h15 ybd1 ff4 fsb fc3 sc0 ls51 ws12f">You learned earlier that composition provid<span class="ls44 ws297">es benefits over inheritance <span class="_ _0"></span>by allowing</span></div><div class="t m0 x35 h15 y292 ff4 fsb fc3 sc0 ls42 ws37e">objects to reuse behaviors without confining <span class="ls31 ws5f4">them to a particular inheritance hierar-</span></div><div class="t m0 x35 h15 y293 ff4 fsb fc3 sc0 ls31 ws300">chy. When you separate your concerns into<span class="ls51 ws10c"> many smaller classes and want to compose</span></div><div class="t m0 x35 h15 y294 ff4 fsb fc3 sc0 ls1c ws7ec">those behaviors back together, you can write <span class="_ _e"></span><span class="ls31 ws342">a class that uses instances of those smaller</span></div><div class="t m0 x35 h15 y989 ff4 fsb fc3 sc0 ls31 ws25">classes. This is a common practi<span class="ls3b ws70">ce in object-orie<span class="_ _e"></span>nted codebases.</span></div><div class="t m0 x83 h15 y98b ff4 fsb fc3 sc0 ls2f ws1c1"> Imagine you’re working in a module that <span class="ls3d ws53f">deals with bicycles and their parts. You</span></div><div class="t m0 x35 h15 y296 ff4 fsb fc3 sc0 ls30 wse3">open up the bicycle module an<span class="ls1b ws7ed">d see th<span class="_ _e"></span>e code in the follow<span class="ls81 ws738">ing listing<span class="_ _e"></span>. As you read to</span></span></div><div class="t m0 x35 h15 y297 ff4 fsb fc3 sc0 ls36 ws7ee">understand what the code is doin<span class="_ _0"></span>g, try <span class="ls25 ws7ea">to assess how well it <span class="ls34 ws7a">follows practices like</span></span></div><div class="t m0 x35 h15 y298 ff4 fsb fc3 sc0 ls34 ws22">encapsulation and abstraction.</div><div class="t m0 x35 h3b y10e6 ffd fs18 fc3 sc0 lsb2 ws0">class<span class="_"> </span>Tire:</div><div class="t m0 x87 h3b y10e7 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>__repr__(self):</div><div class="t m0 x36 h3b y10e8 ffd fs18 fc3 sc0 lsb2 ws0">return<span class="_"> </span>&apos;A<span class="_"> </span>rubber<span class="_"> </span>tire&apos;</div><div class="t m0 x17 h20 y10e9 ffb fs7 fc4 sc0 ls6 ws0">A composite class that depends on other, sma<span class="_ _0"></span>ller classes<span class="_ _bc"></span>Listing<span class="_"> </span>7.4</div><div class="c x35 y10ea w89 hf2"><div class="t m0 x13c h36 y10eb ff11 fs1c fc12 sc0 ls6 ws0">Loosely coupled pieces of</div><div class="t m0 x0 h36 y10ec ff11 fs1c fc12 sc0 ls6 ws0">code can move around and change</div><div class="t m0 x12b h36 y10ed ff11 fs1c fc12 sc0 ls6 ws0">their shape freely, just like the</div><div class="t m0 xfb h36 y10ee ff11 fs1c fc12 sc0 ls6 ws0">molecules in a liquid.</div><div class="t m0 x79 h36 y10eb ff11 fs1c fc12 sc0 ls6 ws0">Tightly coupled pieces of code rely on the</div><div class="t m0 x36 h36 y10ec ff11 fs1c fc12 sc0 ls6 ws0">code around them. Changing one piece is</div><div class="t m0 x15 h36 y10ed ff11 fs1c fc12 sc0 ls6 ws0">difficult because the other pieces must</div><div class="t m0 x17 h36 y10ee ff11 fs1c fc12 sc0 ls6 ws0">move to accommodate it.  </div></div><div class="c x35 y10ef w2 hf3"><div class="t m0 x12 h2b y10f0 ffb fs18 fcb sc0 ls29 ws37b">Figure 7.4<span class="_ _29"> </span>Flexibility </div><div class="t m0 x12 h2b y10f1 ffb fs18 fcb sc0 ls143 ws526">contrasted with rigidity</div></div><div class="c xd6 y10f2 w8a h43"><div class="t m0 x34 h14 y2f5 ff12 fs7 fcb sc0 ls6 ws0">S<span class="ff13">m</span><span class="lsd2 ws38c">all classes to be </span></div><div class="t m0 x34 h14 y2f7 ff12 fs7 fcb sc0 ls198 ws4f7">used fo<span class="ff13 ls6 ws0">r</span><span class="lsdf ws4c9"> co<span class="ff13 ls6 ws0">m<span class="ff12">positio</span>n</span></span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
