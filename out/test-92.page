<div id="pf5c" class="pf w0 h0" data-page-no="5c"><div class="pc pc5c w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg5c.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">68</div><div class="t m0 x67 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xb1 h2c y1d0 ffb fs19 fcb sc0 ls158 ws0">HAPTER</div><div class="t m0 xb6 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 4</div><div class="t m0 x101 h2d y80 ffa fs7 fcb sc0 ls6 ws0">Designing for high performance</div><div class="t m0 x44 h15 y40 ff4 fsb fc3 sc0 ls34 wsb6">I recommend making use of ge<span class="ls71 ws1cb">nerators over lists wherever you can, because<span class="_ _e"></span> you can</span></div><div class="t m0 x44 h15 y839 ff4 fsb fc3 sc0 ls3e ws573">always build a full list in memory fr<span class="_ _0"></span><span class="ls1f">om a generator if needed by writing</span></div><div class="t m5 x44 h24 y960 ffd fsc fc3 sc0 lsa0 ws0">list(range(10<span class="_ _e"></span>000))</div><div class="t m0 x8e h15 y83a ff4 fsb fc3 sc0 ls2d ws1a4"> or </div><div class="t m5 x3b h24 y960 ffd fsc fc3 sc0 lsa0 ws574">list(squares<span class="_ _e"></span>([1, 2, 3, 4]))</div><div class="t m0 xe9 h15 y83a ff4 fsb fc3 sc0 ls2f ws40e">. Using generators will save</div><div class="t m0 x44 h15 y83b ff4 fsb fc3 sc0 ls42 ws38f">memory, but it can also <span class="_ _e"></span>save time because the code consuming the values from the</div><div class="t m0 x44 h15 y83e ff4 fsb fc3 sc0 ls31 ws25">generator may not need them all anyway.</div><div class="t m0 x44 h1f y961 ffc fs13 fc2 sc0 ls14f ws575">Make it work, make it right, make it fast<span class="_ _80"></span>4<span class="_ _0"></span>.<span class="_ _1d"></span>3</div><div class="t m0 x44 h15 y962 ff4 fsb fc3 sc0 ls1c wsa5">The adage “make it work, make it right, make it fast” <span class="_ _e"></span>comes from Kent Beck, the cre-</div><div class="t m0 x44 h15 y963 ff4 fsb fc3 sc0 ls1c ws251">ator of extreme programming. On its face, th<span class="ls1e ws13">is could mean that you should first write</span></div><div class="t m0 x44 h15 y964 ff4 fsb fc3 sc0 ls4b ws576">working code, <span class="_ _e"></span><span class="ff3 ls3e ws0">then</span><span class="ls35 ws577"> rework<span class="_ _0"></span> it to be clear and concise, and only <span class="_ _0"></span><span class="ff3 ls3e ws0">then<span class="ff4 ls176"> m<span class="_ _25"></span>a<span class="_ _25"></span>k<span class="_ _25"></span>e<span class="_ _25"></span> i<span class="_ _25"></span>t<span class="_ _25"></span> p<span class="_ _25"></span>e<span class="_ _25"></span>r<span class="_ _25"></span>f<span class="_ _25"></span>o<span class="_ _25"></span>r<span class="_ _1c"></span>-</span></span></span></div><div class="t m0 x44 h15 y965 ff4 fsb fc3 sc0 ls20 ws17">mant. But I like to think of these three rule<span class="ls2f ws26a">s as being the steps you take on each small</span></div><div class="t m0 x44 h15 y966 ff4 fsb fc3 sc0 ls48 ws207">iteration as you write code. <span class="_ _e"></span>Remember that<span class="ls20 ws2f0"> design, implementati<span class="ls30 wsef">on, and re<span class="_ _e"></span>factoring</span></span></div><div class="t m0 x44 h15 y419 ff4 fsb fc3 sc0 ls35 ws24">all happen in tight cycles as you code.</div><div class="t m0 x44 h26 y967 ffc fs15 fc2 sc0 ls107 ws328">Making it work<span class="_ _6f"></span>4<span class="_ _0"></span>.<span class="_ _0"></span>3<span class="_ _0"></span>.<span class="_ _0"></span>1</div><div class="t m0 x44 h15 y968 ff4 fsb fc3 sc0 ls1f ws267">This, frankly, is what developers spend a grea<span class="ls3b ws578">t deal of their time on. You try to turn <span class="_ _0"></span>a</span></div><div class="t m0 x44 h15 y969 ff4 fsb fc3 sc0 ls1e ws579">problem statement or idea in<span class="ls7d ws57a">to code that achieves the goal. Developers (myself</span></div><div class="t m0 x44 h15 y96a ff4 fsb fc3 sc0 ls79 ws57b">included) often<span class="_ _e"></span> work all the way through a <span class="ls5e ws4bf">problem before<span class="_ _e"></span> moving on to refactoring</span></div><div class="t m0 x44 h15 y96b ff4 fsb fc3 sc0 ls3a wsb1">or performance. It can feel like a chicken and egg problem: <span class="ff3 ls5b ws57c">How can I make<span class="_ _e"></span> “it” fast if</span></div><div class="t m0 x44 h15 y19b ff3 fsb fc3 sc0 ls2d ws31">“it” isn’t even <span class="ff4 fc1 ls7d ws0">done</span><span class="ls5e ws14a"> yet<span class="ff4 ls6 ws0">?</span></span></div><div class="t m0 x32 h15 y96c ff4 fsb fc3 sc0 ls2d ws1d"> Just as decomposition is usef<span class="ls38 ws1f4">ul for software itself, it is al<span class="_ _0"></span><span class="ls6c ws2c7">so useful as a tool in bre<span class="_ _0"></span>ak-</span></span></div><div class="t m0 x44 h15 y96d ff4 fsb fc3 sc0 ls34 ws10e">ing down goals into manageable chunks. Each of those smaller goals can be imple-</div><div class="t m0 x44 h15 y96e ff4 fsb fc3 sc0 ls71 ws138">mented and examined incrementally along th<span class="ls20 ws57d">e way to achieving th<span class="_ _e"></span>e larger goal. It’s</span></div><div class="t m0 x44 h15 y96f ff4 fsb fc3 sc0 ls38 ws3c6">also much easier in this approach to “mak<span class="ls6b ws57e">e it work,” because “i<span class="_ _0"></span><span class="ls34 ws323">t” is a more granular</span></span></div><div class="t m0 x44 h15 y6d6 ff4 fsb fc3 sc0 ls2d ws129">goal. You can sketch some ideas for “calcula<span class="ls48 ws224">te the ve<span class="_ _e"></span>locity of a falling object” more</span></div><div class="t m0 x44 h15 y970 ff4 fsb fc3 sc0 ls34 ws22">readily than “make a physics engine.”</div><div class="t m0 x44 h26 y971 ffc fs15 fc2 sc0 ls177 ws57f">Making it right<span class="_ _81"></span>4<span class="_ _0"></span>.<span class="_ _0"></span>3<span class="_ _0"></span>.<span class="_ _0"></span>2</div><div class="t m0 x44 h15 y972 ff4 fsb fc3 sc0 ls9e ws285">Making it work i<span class="_ _0"></span>s all about tr<span class="_ _0"></span>ying to get from<span class="_ _0"></span><span class="lsbc ws1ff"> point A to point B<span class="_ _e"></span>. If you’re clear on the</span></div><div class="t m0 x44 h15 y973 ff4 fsb fc3 sc0 ls1f ws45">goal of the task<span class="_ _0"></span>, “Does it work?” i<span class="_ _0"></span>s a binary answer.</div><div class="t m0 x32 h15 y974 ff4 fsb fc3 sc0 ls178 ws580"> Making it right is all about refactoring.<span class="ls179 ws581"> Refactoring seeks to re-implement existing</span></div><div class="t m0 x44 h15 y1b8 ff4 fsb fc3 sc0 ls179 ws582">code in a clearer or more well adapted way, <span class="ls178 ws583">while providing the same<span class="ls17a ws584"> consistent outcome.</span></span></div><div class="t m0 x88 h31 y975 ff4 fs1a fc3 sc0 ls6 ws0">1</div><div class="c x44 y976 w2 h9d"><div class="t m0 xb7 h2f y977 ffb fs15 fc2 sc0 ls17b ws0">Lazy eval<span class="_ _0"></span>uation</div><div class="t m0 xb7 h30 y978 fff fsc fc3 sc0 lsb6 ws585">The idea of producing on<span class="_ _e"></span>e value at a time, and that consuming code may not n<span class="_ _e"></span>eed</div><div class="t m0 xb7 h30 y979 fff fsc fc3 sc0 lsb6 ws586">all the values yo<span class="_ _e"></span>u can produce, is often referred<span class="_ _e"></span> to as <span class="ff10 ls157 ws0">lazy</span></div><div class="t m0 xd h1b y97a ff3 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x65 h30 y979 ff10 fsc fc3 sc0 ls8f ws0">evaluation<span class="fff ls17c ws587">. It’s </span><span class="ls17c">lazy</span></div><div class="t m0 xb7 h30 y97b fff fsc fc3 sc0 ls17d ws588">because you’<span class="_ _0"></span>d like to do as little wor<span class="_ _0"></span>k as possible,<span class="_ _0"></span> and only once you’ve<span class="_ _0"></span> been asked</div><div class="t m0 xb7 h30 y97c fff fsc fc3 sc0 lsd1 ws589">explicitly to do so<span class="_ _0"></span>. Picture your <span class="_ _0"></span>generators letting <span class="_ _0"></span>out an exaggerate<span class="_ _0"></span>d sigh each time</div><div class="t m0 xb7 h30 y97d fff fsc fc3 sc0 ls17e ws58a">they’re asked to </div><div class="t m5 xf7 h24 y97d ffd fsc fc3 sc0 lsa0 ws0">yield</div><div class="t m0 xbc h30 y97d fff fsc fc3 sc0 lsce ws58b"> a value. </div></div><div class="t m0 x42 h32 y97e ff4 fs1b fcd sc0 ls6 ws0">1</div><div class="t m0 x43 h33 y97f ff4 fs17 fcd sc0 ls6 ws0">There is<span class="_ _e"></span> a school <span class="_ _e"></span>of thought t<span class="_ _e"></span>hat says y<span class="_ _e"></span>ou can creat<span class="_ _e"></span>e tests for <span class="_ _e"></span>the code y<span class="_ _e"></span>ou write an<span class="_ _e"></span>d, if the <span class="_ _e"></span>tests are <span class="_ _e"></span>sufficient</div><div class="t m3 x0 h34 y97f ff8 fs17 fcd sc0 ls6 ws0"> </div><div class="t m0 x43 h33 y980 ff4 fs17 fcd sc0 ls6 ws0">and passing, <span class="_ _e"></span>you can lean on t<span class="_ _e"></span>hem while making chang<span class="_ _e"></span>es to ensure you <span class="_ _e"></span>haven’t broken anyth<span class="_ _e"></span>ing. There are a</div><div class="t m3 x0 h34 y980 ff8 fs17 fcd sc0 ls6 ws0"> </div><div class="t m0 x43 h33 y981 ff4 fs17 fcd sc0 ls6 ws0">number of fantastic texts on this subject. See Harry Percival,</div><div class="t m3 x0 h34 y981 ff8 fs17 fcd sc0 ls6 ws0"> </div><div class="t m0 x80 h33 y981 ff3 fs17 fcd sc0 ls6 ws0">Test-Driven Develop<span class="_ _e"></span>ment with <span class="_ _0"></span>Python<span class="ff4">, second edition</span></div><div class="t m0 x43 h33 y982 ff4 fs17 fcd sc0 ls6 ws0">(O’Reilly, 2017<span class="_ _e"></span>).</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
