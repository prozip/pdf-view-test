<div id="pf5b" class="pf w0 h0" data-page-no="5b"><div class="pc pc5b w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg5b.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">67<span class="_ _70"></span><span class="ffa">Performance and data types</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls3a ws28">There’s a pattern in this implementation <span class="ls6 ws72">you’ll see<span class="_ _e"></span> repeated often in gene<span class="_ _e"></span>rators:</span></div><div class="t m0 x8a h3d y93a ffb fs1e fca sc0 ls6 ws0">1</div><div class="t m0 x48 h15 y140 ff4 fsb fc3 sc0 ls1e ws16">Perform the main setup requir<span class="ls70 ws7b">ed for produc<span class="_ _e"></span>ing all values.</span></div><div class="t m0 x8a h3d y93b ffb fs1e fca sc0 ls6 ws0">2</div><div class="t m0 x48 h15 y6c7 ff4 fsb fc3 sc0 ls42 ws32">Create a loop.</div><div class="t m0 x8a h3d y93c ffb fs1e fca sc0 ls6 ws0">3</div><div class="t m0 x48 h15 y6c9 ff4 fsb fc3 sc0 ls5e ws14a">Yield a value on each iteratio<span class="_ _e"></span>n of the loop.</div><div class="t m0 x8a h3d y93d ffb fs1e fca sc0 ls6 ws0">4</div><div class="t m0 x48 h15 y6cb ff4 fsb fc3 sc0 ls5e ws14a">Update the state for the ne<span class="_ _e"></span>xt iteration of the loop.</div><div class="t m0 x35 h15 y6cc ff4 fsb fc3 sc0 ls51 ws568">Try inspecting the <span class="ls34 ws569">values from your </span></div><div class="t m5 xd0 h24 y93e ffd fsc fc3 sc0 lsa0 ws0">range</div><div class="t m0 x10 h15 y6cc ff4 fsb fc3 sc0 ls31 ws56a"> generator now. You can turn it into a list using</div><div class="t m5 x35 h24 y93f ffd fsc fc3 sc0 lsa0 ws56b">list(range(5,<span class="_ _e"></span> 10))</div><div class="t m0 xba h15 y6cd ff4 fsb fc3 sc0 ls4e ws56c">, for example. You can also move<span class="ls2f ws15f"> forward one value at <span class="_ _e"></span>a time by</span></div><div class="t m0 x35 h15 ye5 ff4 fsb fc3 sc0 ls71 ws0">saving </div><div class="t m5 x97 h24 y940 ffd fsc fc3 sc0 lsa0 ws0">range(5, 10<span class="_ _e"></span>)</div><div class="t m0 x92 h15 ye5 ff4 fsb fc3 sc0 ls36 ws35"> to a variable and maki<span class="ls3a ws1e0">ng successive calls to </span></div><div class="t m5 x5c h24 y940 ffd fsc fc3 sc0 lsa0 ws0">next(my_range)</div><div class="t m0 x11b h15 ye5 ff4 fsb fc3 sc0 ls6 ws0">.</div><div class="t m0 x83 h15 y6ce ff4 fsb fc3 sc0 ls5f ws56d"> Now that you’ve got this patt<span class="_ _0"></span>ern handy, I’<span class="lsae">d like you to write your<span class="ls51 ws4e2"> very own generator.</span></span></div><div class="t m0 x35 h15 y6cf ff4 fsb fc3 sc0 ls3d ws56e">Your generator function, </div><div class="t m5 xb6 h24 y941 ffd fsc fc3 sc0 lsa0 ws0">squares</div><div class="t m0 x4b h15 y6cf ff4 fsb fc3 sc0 ls6f ws56f">, will take in a list<span class="_ _e"></span> of integers and produce the<span class="_ _e"></span> square</div><div class="t m0 x35 h15 y39e ff4 fsb fc3 sc0 ls30 ws466">of each of them. Give it a shot, and come ba<span class="_ _e"></span><span class="ls2f ws570">ck to the following listi<span class="_ _0"></span>ng to see how you did.</span></div><div class="t m0 x35 h3b y942 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>squares(items):</div><div class="t m0 x87 h3b y943 ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>item<span class="_"> </span>in<span class="_"> </span>items:</div><div class="t m0 x36 h3b y944 ffd fs18 fc1 sc0 lsb2 ws0">yield<span class="_"> </span>item<span class="_"> </span>**<span class="_"> </span>2</div><div class="t m0 x35 h15 y945 ff4 fsb fc3 sc0 ls3a ws0">The </div><div class="t m5 x82 h24 y946 ffd fsc fc3 sc0 lsa0 ws0">squares</div><div class="t m0 xe6 h15 y945 ff4 fsb fc3 sc0 ls42 ws1d1"> function ends up being fairly comp<span class="ls30 ws394">act because there’s no setup or state</span></div><div class="t m0 x35 h15 y947 ff4 fsb fc3 sc0 ls2d ws1a8">management to do. I also said that this func<span class="ls31 wsc6">tion accepts a list, bu<span class="ls48 ws2da">t what’s kind of cool</span></span></div><div class="t m0 x35 h15 y948 ff4 fsb fc3 sc0 ls2d ws571">about it is that you can pass<span class="_ _0"></span> in another generator instead. </div><div class="t m5 xd4 h24 y949 ffd fsc fc3 sc0 lsa0 ws0">squares(rang<span class="_ _e"></span>e</div><div class="t m5 x35 h24 y94a ffd fsc fc3 sc0 lsa0 ws0">(100_000_000)<span class="_ _e"></span>)</div><div class="t m0 x7e h15 y94b ff4 fsb fc3 sc0 ls36 ws2e7"> works just as well. It will only <span class="ls5e ws32a">store one item from the range and one</span></div><div class="t m0 x35 h15 y94c ff4 fsb fc3 sc0 ls42 ws32">squared result at a time, <span class="ls20 ws51">saving even m<span class="_ _e"></span>ore space (a<span class="ls35 ws2c4">s shown in fi<span class="_ _0"></span>gure 4.6).</span></span></div><div class="t m0 x17 h20 y94d ffb fs7 fc4 sc0 ls6 ws0">A short generator that yields squared numbers<span class="_ _76"></span>Listing<span class="_"> </span>4.3</div><div class="c x35 y94e w3d h9a"><div class="t m0 x1e h37 y94f ff12 fs1d fc12 sc0 ls6 ws0">Range produces a</div><div class="t m0 x1e h37 y950 ff12 fs1d fc12 sc0 ls6 ws0">single value at a time.</div><div class="t m0 x1e h37 y951 ff12 fs1d fc12 sc0 ls6 ws0">Square takes one value</div><div class="t m0 x1e h37 y952 ff12 fs1d fc12 sc0 ls6 ws0">produced from range at</div><div class="t m0 x1e h37 y953 ff12 fs1d fc12 sc0 ls6 ws0">a time, and produces one</div><div class="t m0 x1e h37 y954 ff12 fs1d fc12 sc0 ls6 ws0">new value at a time.</div><div class="t m0 x1e h37 y955 ff12 fs1d fc12 sc0 ls6 ws0">The previous value is</div><div class="t m0 x1e h37 y956 ff12 fs1d fc12 sc0 ls6 ws525">thrown out when each</div><div class="t m0 x1e h37 y957 ff12 fs1d fc12 sc0 ls6 ws0">new value is computed.</div><div class="t m0 x11c h9b y958 ff11 fs28 fc12 sc0 ls6 ws0">...<span class="_ _77"> </span>...<span class="_ _77"> </span>...<span class="_ _77"> </span>...</div><div class="t m0 xc0 h36 y959 ff11 fs1c fc12 sc0 ls6 ws0">3<span class="_ _78"> </span>4<span class="_ _79"></span>2<span class="_ _7a"> </span>5</div><div class="t m0 xbd h36 y95a ff11 fs1c fc12 sc0 ls6 ws0">3<span class="_ _78"> </span>4<span class="_ _78"> </span>5<span class="_ _78"> </span>6</div><div class="t m0 xbd h36 y95b ff11 fs1c fc12 sc0 ls6 ws0">1<span class="_ _7b"></span>Range<span class="_ _7c"> </span>2<span class="_ _78"> </span>3<span class="_ _78"> </span>4</div><div class="t m0 xbd h36 y95c ff11 fs1c fc12 sc0 ls6 ws0">1<span class="_ _7d"></span>Squares<span class="_ _7c"> </span>4</div><div class="t m0 x11d h36 y95d ff11 fs1c fc12 sc0 ls6 ws0">Time</div><div class="t m0 xc2 h36 y95c ff11 fs1c fc12 sc0 ls6 ws0">9<span class="_ _62"> </span><span class="ls13b">16</span></div><div class="t m0 xc0 h36 y95e ff11 fs1c fc12 sc0 ls174 ws0">49<span class="_ _1f"></span>1<span class="_ _7e"></span>6</div></div><div class="c x35 y3f w2 h9c"><div class="t m0 x1f h2b y95f ffb fs18 fcb sc0 ls175 ws572">Memory usage of chained generators<span class="_ _7f"></span>Figure 4.6</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
