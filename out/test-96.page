<div id="pf60" class="pf w0 h0" data-page-no="60"><div class="pc pc60 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg60.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">72</div><div class="t m0 x67 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xb1 h2c y1d0 ffb fs19 fcb sc0 ls158 ws0">HAPTER</div><div class="t m0 xb6 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 4</div><div class="t m0 x101 h2d y80 ffa fs7 fcb sc0 ls6 ws0">Designing for high performance</div><div class="t m0 x32 h15 y40 ff4 fsb fc3 sc0 ls51 ws108"> Your acceptable level<span class="_ _0"></span> of pe<span class="ls48 ws52f">rformance will also vary base<span class="ls44 ws5ae">d on your goals. If you are</span></span></div><div class="t m0 x44 h15 y41 ff4 fsb fc3 sc0 ls3a ws4b7">displaying a modal to log in to a site after <span class="ls2d ws301">clicking Log In, it needs to happen instanta-</span></div><div class="t m0 x44 h15 y42 ff4 fsb fc3 sc0 ls34 ws9d">neously, or your users will leave. If you’re <span class="ls38 ws9e">trying to build an annu<span class="wsf3">a<span class="_ _0"></span>l reporting system so</span></span></div><div class="t m0 x44 h15 y43 ff4 fsb fc3 sc0 ls20 ws51">customers can see their sales, they will likely expect t<span class="_ _e"></span>o wait a bit.</div><div class="t m0 x32 h15 y44 ff4 fsb fc3 sc0 ls5f ws59"> The <span class="ff3 ls34 ws0">architecture</span><span class="ls47 ws38"> of the system—all the differe<span class="_ _e"></span>nt se<span class="ls42 ws26e">rvices, pages, interactions, and so</span></span></div><div class="t m0 x44 h15 y45 ff4 fsb fc3 sc0 ls25 ws164">on—will inform and affect performance t<span class="ls42 ws345">oo. Bigger systems require more network</span></div><div class="t m0 x44 h15 y46 ff4 fsb fc3 sc0 ls31 ws378">communication between APIs, databases, an<span class="ls38 ws30c">d caches. They may also have some pro-</span></div><div class="t m0 x44 h15 y47 ff4 fsb fc3 sc0 ls20 ws2dd">cesses that happen outside of the user’s work<span class="lsb1 ws5af">flow, like nig<span class="_ _0"></span>htly accumulati<span class="_ _0"></span>on of metri<span class="_ _0"></span>cs</span></div><div class="t m0 x44 h15 y48 ff4 fsb fc3 sc0 ls36 ws137">for analysis. You can examine other services <span class="_ _0"></span>within this architecture that perform <span class="_ _0"></span>tasks</div><div class="t m0 x44 h15 y49 ff4 fsb fc3 sc0 ls42 ws1f2">similar to yours to get an idea of the base<span class="ls30 ws1ef">line. From<span class="_ _e"></span> there, you can create an informed</span></div><div class="t m0 x44 h15 y4a ff4 fsb fc3 sc0 ls1b ws3ff">expectation of you<span class="_ _e"></span>r software’s performanc<span class="ls35 ws5b0">e and strive toward it. The performance <span class="_ _0"></span>of</span></div><div class="t m0 x44 h15 y4b ff4 fsb fc3 sc0 ls38 ws26">large systems transcends code.</div><div class="t m0 x32 h15 y4c ff4 fsb fc3 sc0 ls20 ws251"> As you write more code, bring what you’ve learned about th<span class="_ _e"></span>e performance of data</div><div class="t m0 x44 h15 y4d ff4 fsb fc3 sc0 ls25 ws29f">types and techniques to bear on your soft<span class="ls2d ws4f5">ware. You can begin to develop a sense for</span></div><div class="t m0 x44 h15 y4e ff4 fsb fc3 sc0 ls34 ws3ae">lines of code that might cause performanc<span class="ls3a ws23f">e issues. Nested loops and huge in-memory</span></div><div class="t m0 x44 h15 y4f ff4 fsb fc3 sc0 ls3a ws28">lists will start to jump out at you. </div><div class="t m0 x44 h1f y9dd ffc fs13 fc2 sc0 ls14f ws0">Tools<span class="_ _86"></span>4<span class="_ _0"></span>.<span class="_ _1d"></span>4</div><div class="t m0 x44 h15 y52 ff4 fsb fc3 sc0 ls2d ws4e2">Performance testing in the real world needs <span class="ls1e ws5b1">to follow an evidence-based approach. This</span></div><div class="t m0 x44 h15 y53 ff4 fsb fc3 sc0 ls31 ws5b2">is a direct result of the fact that systems with real users will<span class="ls20 ws435"> inevitably experience different</span></div><div class="t m0 x44 h15 y54 ff4 fsb fc3 sc0 ls3d ws3b3">behavior; the combination of unexpected <span class="_ _e"></span><span class="ls2f ws467">inputs, timing, hardware, network latency,</span></div><div class="t m0 x44 h15 y199 ff4 fsb fc3 sc0 ls31 ws465">and more contribute to a system’s performanc<span class="ls3a ws5b3">e. As such, poking ar<span class="ls80 ws5b4">ound your code hop-</span></span></div><div class="t m0 x44 h15 y19a ff4 fsb fc3 sc0 ls44 ws34">ing to stumble on huge performance wins <span class="ls3d ws2c">may not be the best use of your time<span class="_ _e"></span>.</span></div><div class="t m0 x44 h26 y9de ffc fs15 fc2 sc0 ls110 ws0">t<span class="_ _e"></span>im<span class="_ _e"></span>e<span class="_ _e"></span>i<span class="_ _e"></span>t<span class="_ _87"></span>4.4.1</div><div class="t m0 x44 h15 y437 ff4 fsb fc3 sc0 ls38 wsaa">The timeit module in Python is a tool for <span class="ls3d ws97">testing the execution time of code snippets.</span></div><div class="t m0 x44 h15 y19b ff4 fsb fc3 sc0 ls180 wse9">It can be used from t<span class="_ _0"></span>he command line or di<span class="_ _0"></span>re<span class="ls63 ws5b5">ctly in your code for more cont<span class="_ _e"></span>rol. The</span></div><div class="t m0 x44 h15 y19c ff4 fsb fc3 sc0 ls2f wsce">timeit module is handy for sanity-check<span class="ls4b ws576">ing the performance ch<span class="_ _e"></span><span class="ls36 ws87">anges you intend to</span></span></div><div class="t m0 x44 h15 y5c ff4 fsb fc3 sc0 ls2d ws0">make.</div><div class="t m0 x32 h15 y5d ff4 fsb fc3 sc0 ls2d ws129"> Imagine you’d like to see how much time <span class="ls71 ws302">it takes to sum the integers from 0 to</span></div><div class="t m0 x44 h15 y24b ff4 fsb fc3 sc0 ls1c ws21d">999. To time this activity from t<span class="_ _e"></span>he comm<span class="ls42 ws19d">and line, you can invoke the timeit <span class="_ _0"></span>module</span></div><div class="t m0 x44 h15 y19d ff4 fsb fc3 sc0 ls5e ws57">with Python:</div><div class="t m0 x44 h3b y9df ffd fs18 fc3 sc0 lsb2 ws0">python<span class="_"> </span>-m<span class="_"> </span>timeit<span class="_"> </span>&quot;total<span class="_"> </span>=<span class="_"> </span>sum(range(1000))&quot;</div><div class="t m0 x44 h15 y164 ff4 fsb fc3 sc0 ls1f ws4a0">This will cause timeit <span class="_ _0"></span>to run the summatio<span class="ls112 ws5b6">n code<span class="_ _0"></span> many time<span class="_ _0"></span>s, ulti<span class="_ _0"></span>mately prin<span class="_ _0"></span>ting</span></div><div class="t m0 x44 h15 y9e0 ff4 fsb fc3 sc0 ls3d ws61">some statistics about the execution time:</div><div class="t m0 x44 h3b y9e1 ffd fs18 fc3 sc0 lsb2 ws0">20000<span class="_"> </span>loops,<span class="_"> </span>best<span class="_"> </span>of<span class="_"> </span>5:<span class="_"> </span>18.9<span class="_"> </span>usec<span class="_"> </span>per<span class="_"> </span>loop</div><div class="t m0 x44 h15 y9e2 ff4 fsb fc3 sc0 ls3d ws53f">You can conclude from this output that <span class="ls38 ws3c6">the summation of 0–9<span class="ls35 ws30d">99 generally takes less</span></span></div><div class="t m0 x44 h15 y9e3 ff4 fsb fc3 sc0 ls2f ws23">than 20 microseconds.</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
