<div id="pf59" class="pf w0 h0" data-page-no="59"><div class="pc pc59 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg59.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">65<span class="_ _70"></span><span class="ffa">Performance and data types</span></div><div class="t m0 x83 h15 y40 ff4 fsb fc3 sc0 ls3a wsb1"> Have a go at representing the data and <span class="ls8d ws552">checking it for specif<span class="_ _e"></span>ic colors. Then co<span class="_ _e"></span>me</span></div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls44 ws34">back here and compare your work to th<span class="ls8d ws1f9">e following<span class="_ _e"></span> listing to see how yo<span class="_ _e"></span>u did.</span></div><div class="t m0 x35 h3b y8db ffd fs18 fc3 sc0 lsb2 ws0">all_colors<span class="_"> </span>=<span class="_"> </span>set()</div><div class="t m0 x35 h3b y534 ffd fs18 fc3 sc0 lsb2 ws0">with<span class="_"> </span>open(&apos;all-favorite-colors.txt&apos;)<span class="_"> </span>as<span class="_"> </span>favorite_colors_file:</div><div class="t m0 x87 h3b y8dc ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>line<span class="_"> </span>in<span class="_"> </span>favorite_colors_file:</div><div class="t m0 x36 h3b y535 ffd fs18 fc3 sc0 lsb2 ws0">all_colors.add(line.strip())</div><div class="t m0 x35 h3b y8dd ffd fs18 fc3 sc0 lsb2 ws0">print(&apos;Amber<span class="_"> </span>Waves<span class="_"> </span>of<span class="_"> </span>Grain&apos;<span class="_"> </span>in<span class="_"> </span>all_colors)</div><div class="t m0 x35 h15 y8de ff4 fsb fc3 sc0 ls34 ws3a8">By using a set to hold a list of the unique <span class="ls47 ws2bf">colo<span class="_ _e"></span>rs encountered in the file, you can check</span></div><div class="t m0 x35 h15 y8df ff4 fsb fc3 sc0 ls30 ws36">for specific colors in the set in constant (<span class="_ _e"></span><span class="ff3 ls6 ws0">O</span><span class="ls79 wsf6">(1)) time after the <span class="_ _e"></span>loop. </span></div><div class="t m0 x19 h26 y8e0 ffc fs15 fc2 sc0 ls13f ws468">4<span class="_ _0"></span>.<span class="_ _1d"></span>2.<span class="_ _1d"></span>2<span class="_ _5f"> </span>Data types for linear time</div><div class="t m0 x35 h15 y8e1 ff4 fsb fc3 sc0 ls3a ws0">The </div><div class="t m5 x82 h24 y8e2 ffd fsc fc3 sc0 lsa0 ws0">list</div><div class="t m0 x79 h15 y8e1 ff4 fsb fc3 sc0 ls71 ws483"> data type in Python exhibits mainly <span class="ff3 ls6 ws0">O<span class="ff4">(</span>n</span><span class="ls3a wsc3">) operations; determining member-</span></div><div class="t m0 x35 h15 y8e3 ff4 fsb fc3 sc0 ls34 ws143">ship in a list or adding a new item to an ar<span class="ls51 wsa9">bitrary location in a list is slower for lists</span></div><div class="t m0 x35 h15 y8e4 ff4 fsb fc3 sc0 ls30 wse3">with more elements. Adding<span class="ls3d"> or removing from the <span class="ff3 ls2f ws0">end<span class="ff4 ws24a"> of a list takes </span><span class="ls6">O<span class="ff4 ws553">(1) time. <span class="_ _e"></span>Lists</span></span></span></span></div><div class="t m0 x35 h15 y8e5 ff4 fsb fc3 sc0 ls47 ws38">are useful when the items being stor<span class="ls3a ws28">ed aren’t uniquely ident<span class="_ _e"></span>ifiable.</span></div><div class="t m0 x83 h15 y8e6 ff4 fsb fc3 sc0 ls3a ws23f"> The </div><div class="t m5 xd8 h24 y8e7 ffd fsc fc3 sc0 lsa0 ws0">tuple</div><div class="t m0 x1d h15 y8e6 ff4 fsb fc3 sc0 ls38 wsaa"> type is similar to </div><div class="t m5 x63 h24 y8e7 ffd fsc fc3 sc0 lsa0 ws0">list</div><div class="t m0 xa5 h15 y8e6 ff4 fsb fc3 sc0 ls71 ws98"> in terms of performance, with the ke<span class="_ _e"></span>y difference</div><div class="t m0 x35 h15 y8e8 ff4 fsb fc3 sc0 ls3d ws61">being that tuples can’t be ch<span class="ls42 ws32">anged after they’re created. </span></div><div class="t m0 x19 h26 y8e9 ffc fs15 fc2 sc0 ls16c ws554">4<span class="_ _0"></span>.<span class="_ _1d"></span>2.<span class="_ _1d"></span>3<span class="_ _5f"> </span>Space complexity of <span class="_ _0"></span>operations on da<span class="_ _0"></span>ta types</div><div class="t m0 x35 h15 y8ea ff4 fsb fc3 sc0 ls7d ws555">Now that you’re fam<span class="_ _e"></span>iliar with the time comp<span class="ls42 ws38f">lexity of some of Pyth<span class="_ _e"></span>on’s built-in data</span></div><div class="t m0 x35 h15 y8eb ff4 fsb fc3 sc0 ls42 ws1c6">structures, I’ll teach you a couple of tricks for using them. The data types we’ve <span class="_ _e"></span>seen</div><div class="t m0 x35 h15 y8ec ff4 fsb fc3 sc0 ls34 ws3a8">so far are all <span class="ff3 ls44 ws0">iterables<span class="_ _f"></span></span><span class="ls1c ws23a">—objects that support iteration over their contents (in a </span></div><div class="t m5 xe3 h24 y8ed ffd fsc fc3 sc0 lsa0 ws0">for</div><div class="t m0 x108 h15 y8ec ff4 fsb fc3 sc0 ls51 ws545"> loop,</div><div class="t m0 x35 h15 y8ee ff4 fsb fc3 sc0 ls7a ws556">for example)<span class="_ _0"></span>. Iteration over<span class="_ _0"></span> a set of el<span class="ls42 ws27b">ements is nearly always going to be <span class="ff3 ls6 ws0">O<span class="ff4">(</span>n</span><span class="ls3b wsec">) in time</span></span></div><div class="t m0 x35 h15 y8ef ff4 fsb fc3 sc0 ls81 ws557">complexity; go<span class="_ _e"></span>ing through ever<span class="_ _e"></span><span class="ls7d ws334">y element takes more time<span class="_ _e"></span> if there are more elements.</span></div><div class="t m0 x35 h15 y81f ff4 fsb fc3 sc0 ls42 ws26e">But what about space complexity?</div><div class="t m0 x83 h15 y8f0 ff4 fsb fc3 sc0 ls1c ws558"> For the data types we’ve seen so far, all their contents are stored in memory</div><div class="t m0 x35 h15 y8f1 ff4 fsb fc3 sc0 ls5e ws559">together. If a list has 10 elements, it ta<span class="_ _e"></span><span class="ls2d ws1e9">kes roughly 10 times more space in memory</span></div><div class="t m0 x35 h15 y8f2 ff4 fsb fc3 sc0 ls38 ws3c6">than a list with a single <span class="ls6b wse0">element, as shown in figure 4.4. This means their <span class="ff3 ls62 ws0">space</span></span><span class="ws30c"> com-</span></div><div class="t m0 x35 h15 y8f3 ff4 fsb fc3 sc0 ls71 wsd4">plexity is also <span class="ff3 ls6 ws0">O<span class="ff4">(</span>n</span><span class="ls2d ws31">). This can be problematic, the sa<span class="ls79 ws3bf">me way reading 7.<span class="_ _e"></span>6 billion records</span></span></div><div class="t m0 x35 h15 y8f4 ff4 fsb fc3 sc0 ls71 ws241">into memory is problematic. If we don’t need<span class="ls51 ws545"> all that <span class="_ _0"></span>data at once, we might be able to</span></div><div class="t m0 x35 h15 y8f5 ff4 fsb fc3 sc0 ls71 ws83">find a more efficient approach.</div><div class="t m0 x83 h20 y8f6 ffb fs7 fc4 sc0 ls6 ws0">Listing<span class="_"> </span>4.1<span class="_ _55"> </span>Using Python&apos;s features to minimize space</div><div class="c xd y8f7 w39 h91"><div class="t m0 x118 h14 y8f8 ff12 fs7 fcb sc0 ls102 ws0">Ite<span class="ff13 ls6">r</span><span class="ls10d">ati<span class="ff13 ls6">n</span><span class="ls10e ws55a">g ove</span><span class="ff13 ls6">r</span><span class="lsee ws2cf"> the file is still O(</span><span class="ff13 ls6">n</span><span class="ls88 ws314">) ti</span><span class="ff13 ls6">m<span class="ff12">e.</span></span></span></div></div><div class="c x6d y8f9 w10 h43"><div class="t m0 x119 h14 y430 ff12 fs7 fcb sc0 ls88 ws0">Addi<span class="ff13 ls6">n</span><span class="lsdc ws3df">g to a set is O(</span></div><div class="t m0 x4 h92 y8fa ff14 fs24 fcb sc0 ls6 ws0">1</div><div class="t m0 x97 h14 y430 ff12 fs7 fcb sc0 ls13d ws0">) </div><div class="t m0 x119 h14 y431 ff12 fs7 fcb sc0 lsd2 ws0">ti<span class="ff13 ls6">m</span><span class="lsda ws2aa">e, but O(</span><span class="ff13 ls6">n</span><span class="lsd5 ws2a6">) space.</span></div></div><div class="c xad y8fb w3a h93"><div class="t m0 xf9 h14 y8fc ff12 fs7 fcb sc0 ls16d ws0">Me<span class="ff13 ls6">m</span><span class="lsec">be<span class="ff13 ls6">r</span><span class="lsef ws4fa">ship of the set is a<span class="_ _e"></span></span><span class="ff13 ls6">n</span><span class="ls10f ws35d"> O(</span></span></div><div class="t m0 x82 h92 y8fd ff14 fs24 fcb sc0 ls6 ws0">1</div><div class="t m0 x102 h14 y8fc ff12 fs7 fcb sc0 lsec ws4f0">) questio<span class="ff13 ls6 ws0">n<span class="ff12">.</span></span></div></div><div class="c x35 y8fe w3b h94"><div class="t m0 xf3 h36 y8ff ff11 fs1c fc12 sc0 ls6 ws0">1</div><div class="t m0 xf3 h36 y900 ff11 fs1c fc12 sc0 ls6 ws0">1<span class="_ _71"> </span>2<span class="_ _71"> </span>3<span class="_ _71"> </span>4<span class="_ _71"> </span>5</div><div class="t m0 xf3 h36 y901 ff11 fs1c fc12 sc0 ls6 ws0">6<span class="_ _71"> </span>7<span class="_ _71"> </span>8<span class="_ _71"> </span>9<span class="_ _72"> </span><span class="ls13a">10</span></div><div class="t m0 x119 h37 y902 ff12 fs1d fc12 sc0 ls6 ws0">A list of one item needs only</div><div class="t m0 x119 h37 y903 ff12 fs1d fc12 sc0 ls6 ws0">enough space to store that item.</div><div class="t m0 x18 h37 y904 ff12 fs1d fc12 sc0 ls6 ws525">A list of </div><div class="t m0 xb9 h95 y905 ff1b fs26 fc12 sc0 ls6 ws0">1</div><div class="t m0 x16 h37 y904 ff12 fs1d fc12 sc0 ls6 ws0">0 items needs about</div><div class="t m0 x18 h95 y906 ff1b fs26 fc12 sc0 ls6 ws0">1</div><div class="t m0 xad h37 y907 ff12 fs1d fc12 sc0 ls6 ws0">0 times the space–one item’s</div><div class="t m0 x18 h37 y908 ff12 fs1d fc12 sc0 ls6 ws0">worth for each of the </div><div class="t m0 x63 h95 y909 ff1b fs26 fc12 sc0 ls6 ws0">1</div><div class="t m0 x5d h37 y908 ff12 fs1d fc12 sc0 ls6 ws0">0 items.</div></div><div class="c x35 y3f w2 h96"><div class="t m0 x3f h2b y90a ffb fs18 fcb sc0 ls29 ws55b">Figure 4.4<span class="_ _29"> </span>The memory </div><div class="t m0 x3f h2b y90b ffb fs18 fcb sc0 ls16e ws55c">footprint of lists</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
