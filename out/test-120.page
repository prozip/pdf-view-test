<div id="pf78" class="pf w0 h0" data-page-no="78"><div class="pc pc78 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg78.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">96</div><div class="t m0 xbe h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xa8 h2c y1d0 ffb fs19 fcb sc0 ls185 ws0">HAPTER</div><div class="t m0 x93 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 5</div><div class="t m0 x5d h2d y80 ffa fs7 fcb sc0 ls6 ws0">Testing your software</div><div class="t m0 x44 h26 y1e4 ffc fs15 fc2 sc0 ls19a ws678">Writing intere<span class="_ _e"></span>sting tests<span class="_ _9e"></span>5<span class="_ _0"></span>.<span class="_ _0"></span>4<span class="_ _0"></span>.<span class="_ _0"></span>7</div><div class="t m0 x44 h15 y140 ff4 fsb fc3 sc0 ls3d ws377">Good tests will use inputs that affect the behavior of the met<span class="_ _e"></span>hod being tested. SKUs</div><div class="t m0 x44 h15 y141 ff4 fsb fc3 sc0 ls1f ws382">are typically all up<span class="_ _0"></span>percase, and they usually<span class="ls20 ws1e6"> don’t contain spaces either—only letters,</span></div><div class="t m0 x44 h15 y142 ff4 fsb fc3 sc0 ls80 ws679">numbers, and dashes. But what if the pr<span class="_ _e"></span>oduc<span class="ls51 ws13e">t name contains a space? You’ll want <span class="_ _0"></span>to</span></div><div class="t m0 x44 h15 y143 ff4 fsb fc3 sc0 ls1e ws67a">remove the spaces before the <span class="ls30 ws394">name gets put in the SKU. A tank top SKU should start</span></div><div class="t m0 x44 h15 y144 ff4 fsb fc3 sc0 ls30 ws0">with </div><div class="t m5 x83 h24 yc5b ffd fsc fc3 sc0 lsa0 ws0">&apos;TANKTOP&apos;</div><div class="t m0 x38 h15 y144 ff4 fsb fc3 sc0 ls74 ws67b">, for examp<span class="_ _0"></span>le.</div><div class="t m0 x32 h15 y145 ff4 fsb fc3 sc0 lsc1 ws0"> Thi<span class="_ _0"></span>s is<span class="_ _0"></span> a ne<span class="_ _0"></span>w re<span class="_ _0"></span>quir<span class="_ _0"></span>eme<span class="_ _0"></span>nt,<span class="_ _0"></span> so y<span class="_ _0"></span>ou c<span class="_ _0"></span>an w<span class="_ _0"></span>r<span class="ls51 ws25e">ite a new test that <span class="ls2f ws109">describes how the code</span></span></div><div class="t m0 x44 h15 y146 ff4 fsb fc3 sc0 ls42 ws32">should behave.</div><div class="t m0 x44 h3b yc5c ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>test_transform_name_for_sku(self):</div><div class="t m0 xae h3b yc5d ffd fs18 fc3 sc0 lsb2 ws0">medium_pink_tank_top<span class="_"> </span>=<span class="_"> </span>Product(&apos;tank<span class="_"> </span>top&apos;,<span class="_"> </span>&apos;M&apos;,<span class="_"> </span>&apos;pink&apos;)</div><div class="t m0 xae h3b ybc4 ffd fs18 fc3 sc0 lsb2 ws0">self.assertEqual(</div><div class="t m0 x97 h3b y7ba ffd fs18 fc3 sc0 lsb2 ws0">&apos;TANKTOP&apos;,</div><div class="t m0 x97 h3b y7bb ffd fs18 fc3 sc0 lsb2 ws0">medium_pink_tank_top.transform_name_for_sku(),</div><div class="t m0 xae h3b y3f8 ffd fs18 fc1 sc0 ls6 ws0">)</div><div class="t m0 x44 h15 y270 ff4 fsb fc3 sc0 ls3d ws13d">This test fails because the current code returns </div><div class="t m5 x2e h24 yc5e ffd fsc fc3 sc0 lsa0 ws67c">&apos;TANK TOP&apos;</div><div class="t m0 xe1 h15 y270 ff4 fsb fc3 sc0 ls31 ws15d">. That’s okay because you</div><div class="t m0 x44 h15 y1a2 ff4 fsb fc3 sc0 ls31 ws21c">haven’t built support for products with spaces <span class="ls47 ws4aa">in the name yet. Seeing this test fail for</span></div><div class="t m0 x44 h15 y1a3 ff4 fsb fc3 sc0 ls2f ws467">the expected reason means that when you wr<span class="ls20 ws478">ite the code to correctly handle spaces,</span></div><div class="t m0 x44 h15 y1a4 ff4 fsb fc3 sc0 ls42 ws32">the test should pass.</div><div class="t m0 x32 h15 y1a5 ff4 fsb fc3 sc0 ls79 ws67d"> Thinking of i<span class="_ _e"></span>nteresting tests like this yourse<span class="_ _e"></span>lf is valuable because it can<span class="_ _e"></span> surface</div><div class="t m0 x44 h15 y1a6 ff4 fsb fc3 sc0 ls1e ws67e">questions like this earlier in the develo<span class="ls3d ws30b">pment process. Then you can survey other</span></div><div class="t m0 x44 h15 y1a7 ff4 fsb fc3 sc0 ls38 ws26">stakeholders and ask, “What are all the po<span class="ls3a ws28">ssible product name formats we might need</span></div><div class="t m0 x44 h15 y1a8 ff4 fsb fc3 sc0 ls34 ws13b">to support?” If their answer <span class="ls38 ws256">gives you new information, you can incorporate it into the</span></div><div class="t m0 x44 h15 y1a9 ff4 fsb fc3 sc0 ls6f ws52b">code and the tests to deliver bette<span class="_ _e"></span>r software.</div><div class="t m0 x32 h15 y1aa ff4 fsb fc3 sc0 ls3d ws2c"> Now that you understand the benefits o<span class="_ _e"></span>f unittest, it’s time to learn about pytest.<span class="_ _e"></span> </div><div class="t m0 x44 h1f yc5f ffc fs13 fc2 sc0 ls84 ws67f">Testing with pytest<span class="_ _9f"></span>5<span class="_ _0"></span>.<span class="_ _1d"></span>5</div><div class="t m0 x44 h15 y1ad ff4 fsb fc3 sc0 ls6b wse0">Although unitte<span class="_ _0"></span>st is a full-featured <span class="_ _0"></span>and ma<span class="ls20 ws621">ture framework built into Python, it has a</span></div><div class="t m0 x44 h15 y1ae ff4 fsb fc3 sc0 ls42 ws3af">few drawbacks. For some, it feels “un-Pythonic” because it uses </div><div class="t m5 x5 h24 y1ae ffd fsc fc3 sc0 lsa0 ws0">camelCase</div><div class="t m0 x96 h15 y1ae ff4 fsb fc3 sc0 ls2c ws5cd"> instead of</div><div class="t m5 x44 h24 yc60 ffd fsc fc3 sc0 lsa0 ws0">snake_case</div><div class="t m0 xaf h15 y1af ff4 fsb fc3 sc0 ls71 ws348"> for method names (a relic of its JUni<span class="ls47 ws680">t history). Unittest</span> also requires a</div><div class="t m0 x44 h15 y5cc ff4 fsb fc3 sc0 ls48 ws432">fair amount of boilerplate that makes the<span class="_ _e"></span> un<span class="ls1c ws400">derlying tests a bit more difficult to com-</span></div><div class="t m0 x44 h15 y1b1 ff4 fsb fc3 sc0 ls70 ws0">prehend.</div><div class="c x44 yc61 w2 hba"><div class="t m0 xb7 h2f yc62 ffb fs15 fc2 sc0 ls17b ws0">Pythonic<span class="_ _0"></span> code </div><div class="t m0 xb7 h30 yc63 fff fsc fc3 sc0 ls17e ws681">Code is often said to<span class="_ _e"></span> be <span class="ff10 ls19b ws0">Pythonic</span><span class="lsb6 ws682"> if it uses the features and common style guid<span class="_ _e"></span>elines</span></div><div class="t m0 xb7 h30 yc64 fff fsc fc3 sc0 lscb ws683">for the Python langu<span class="_ _e"></span>age. Pythonic code uses </div><div class="t m5 x29 h24 yc64 ffd fsc fc3 sc0 lsa0 ws0">snake_case</div><div class="t m0 xe h30 yc64 fff fsc fc3 sc0 lsb ws684"> for variable and method</div><div class="t m0 xb7 h30 yc65 fff fsc fc3 sc0 lsb6 ws516">names, list comprehensio<span class="_ _e"></span>ns instead of simple </div><div class="t m5 xa8 h24 yc65 ffd fsc fc3 sc0 ls6 ws0">for</div><div class="t m0 xe4 h30 yc65 fff fsc fc3 sc0 ls18f ws685"> loops, and so on.</div></div><div class="t m0 x44 h15 yc66 ff4 fsb fcd sc0 ls6 ws0">For </div><div class="t m3 x0 h22 yc66 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 xae h15 yc66 ff4 fsb fcd sc0 ls6 ws0">those </div><div class="t m3 x0 h22 yc66 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x132 h15 yc66 ff4 fsb fcd sc0 ls6 ws0">who </div><div class="t m3 x0 h22 yc66 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x38 h15 yc66 ff4 fsb fcd sc0 ls6 ws0">like </div><div class="t m3 x0 h22 yc66 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x114 h15 yc66 ff4 fsb fcd sc0 ls6 ws0">succinct, </div><div class="t m3 x0 h22 yc66 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 xe4 h15 yc66 ff4 fsb fcd sc0 ls6 ws0">straight-to-th<span class="_ _e"></span>e-point </div><div class="t m3 x0 h22 yc66 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x113 h15 yc66 ff4 fsb fcd sc0 ls6 ws0">tests, </div><div class="t m3 x0 h22 yc66 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x2d h15 yc66 ff4 fsb fcd sc0 ls6 ws0">pytest </div><div class="t m3 x0 h22 yc66 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x7a h15 yc66 ff4 fsb fcd sc0 ls6 ws0">is </div><div class="t m3 x0 h22 yc66 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x73 h15 yc66 ff4 fsb fcd sc0 ls6 ws0">an </div><div class="t m3 x0 h22 yc66 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x61 h15 yc66 ff4 fsb fcd sc0 ls6 ws0">answer </div><div class="t m3 x0 h22 yc66 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 xec h15 yc66 ff4 fsb fcd sc0 ls6 ws0">(<span class="fcf">https://</span></div><div class="t m3 x0 h22 yc66 ff8 fsb fcf sc0 ls6 ws0"> </div><div class="t m0 x44 h15 yc67 ff4 fsb fcf sc0 ls6 ws0">docs.pytest.o<span class="_ _e"></span>rg/en/latest/getting-started.html<span class="_ _e"></span><span class="fcd">). Once <span class="_ _e"></span>you’ve instal<span class="_ _e"></span>led pytest, <span class="_ _e"></span>you c<span class="_ _e"></span>an</span></div><div class="t m3 x0 h22 yc67 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x44 h15 yc68 ff4 fsb fcd sc0 ls6 ws0">get back <span class="_ _e"></span>to the raw</div><div class="t m3 x0 h22 yc68 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m4 x66 h24 yc69 ffd fsc fcd sc0 ls6 ws0">asser<span class="_ _0"></span>t</div><div class="t m3 x0 h25 yc69 ff8 fsc fcd sc0 ls6 ws0"> </div><div class="t m0 xb6 h15 yc69 ff4 fsb fcd sc0 ls6 ws0">statements yo<span class="_ _e"></span>u saw earlie<span class="_ _e"></span>r. Pytest perfo<span class="_ _e"></span>rms a bit o<span class="_ _e"></span>f hidden</div><div class="t m0 x44 h15 yc6a ff4 fsb fcd sc0 ls6 ws0">magic under the ho<span class="_ _e"></span>od to make this work, but it<span class="_ _e"></span> produces a smooth experience.</div><a class="l" href="https://docs.pytest.org/en/latest/getting-started.html"><div class="d m2" style="border-style:none;position:absolute;left:429.120000px;bottom:99.158000px;width:36.000000px;height:11.220000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://docs.pytest.org/en/latest/getting-started.html"><div class="d m2" style="border-style:none;position:absolute;left:465.120000px;bottom:99.158000px;width:0.180000px;height:11.220000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://docs.pytest.org/en/latest/getting-started.html"><div class="d m2" style="border-style:none;position:absolute;left:57.120000px;bottom:86.138000px;width:237.300000px;height:13.020000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
