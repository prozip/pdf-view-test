<div id="pf3d" class="pf w0 h0" data-page-no="3d"><div class="pc pc3d w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg3d.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">37<span class="_ _3d"></span><span class="ffa">The hierarchy of separation in Python</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls36 wsab">the other, those classes are <span class="ff3 ls20 ws0">tightly</span><span class="ls2d wsbc"> coupled. Tight coupling is expensive because <span class="_ _0"></span>it can</span></div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls31 ws58">lead to spending more time managi<span class="ls6 ws72">ng the ripple effects of a chang<span class="_ _e"></span>e. <span class="ff3 ls3d ws0">Loose</span><span class="ls71 wsd4"> coupling is</span></span></div><div class="t m0 x35 h15 y42 ff4 fsb fc3 sc0 ls48 ws3ef">the desired end state. You’ll le<span class="_ _e"></span>arn more strategies for achieving loose coupling in</div><div class="t m0 x35 h15 y43 ff4 fsb fc3 sc0 ls81 ws26f">chapter 10.</div><div class="t m0 x83 h15 y44 ff4 fsb fc3 sc0 ls71 ws1cc"> A set of highly cohesive classes serves much the same purpose as a set of clear <span class="_ _e"></span>func-</div><div class="t m0 x35 h15 y45 ff4 fsb fc3 sc0 ls1c ws94">tions. It clarifies intent, help<span class="ls2c ws3f0">s us navigate existing code, and gu<span class="_ _0"></span>ides us in adding new</span></div><div class="t m0 x35 h15 y46 ff4 fsb fc3 sc0 ls6 ws3f1">code. This all helps us p<span class="_ _e"></span>roduce the features we w<span class="_ _e"></span>ant faster, instead of re<span class="_ _e"></span>quiring us to</div><div class="t m0 x35 h15 y47 ff4 fsb fc3 sc0 ls38 ws26">spend time spelunking in the caverns of our software. </div><div class="t m0 x19 h26 y5aa ffc fs15 fc2 sc0 ls110 ws0">2.2.3<span class="_ _b"> </span>Mo<span class="_ _e"></span>d<span class="_ _e"></span>u<span class="_ _e"></span>l<span class="_ _e"></span>es</div><div class="t m0 x35 h15 y4a ff4 fsb fc3 sc0 ls2d ws3f2">You’ve already learned the basi<span class="ls4e ws3f3">cs of creating modules in <span class="ls31 ws335">Python: a .py file that con-</span></span></div><div class="t m0 x35 h15 y5ab ff4 fsb fc3 sc0 ls31 ws13b">tains valid Python code is already a module! <span class="ls30 ws32e">I touched on the question of when to cre-</span></div><div class="t m0 x35 h15 y14b ff4 fsb fc3 sc0 ls20 ws51">ate one, but let’s circle back to th<span class="_ _e"></span>at.</div><div class="t m0 x83 h15 y4d ff4 fsb fc3 sc0 ls42 ws19d"> You might have started this chapter knowin<span class="ls51 ws1bb">g that most of your code lived in one</span></div><div class="t m0 x35 h15 y4e ff4 fsb fc3 sc0 ls1c ws127">giant procedural blob in script<span class="ls2d ws3f2">.py. And if you’ve got a sh<span class="ls48 ws224">ort attention span like me,</span></span></div><div class="t m0 x35 h15 y4f ff4 fsb fc3 sc0 ls80 wsff">you might have gone and<span class="_ _e"></span> extr<span class="ls71 wsd4">acted a number of functions <span class="ws28">and classes from it already.</span></span></div><div class="t m0 x35 h15 y2b2 ff4 fsb fc3 sc0 ls9e ws285">Welcome back.</div><div class="t m0 x83 h15 yed ff4 fsb fc3 sc0 ls7c ws0"> Al<span class="_ _e"></span>th<span class="_ _e"></span>ou<span class="_ _e"></span>gh<span class="_ _e"></span> yo<span class="_ _e"></span>ur<span class="_ _e"></span> cod<span class="_ _e"></span>e i<span class="_ _e"></span>s n<span class="_ _e"></span>ow<span class="_ _e"></span> ni<span class="_ _e"></span>cel<span class="_ _e"></span>y s<span class="_ _e"></span>ep<span class="_ _e"></span>ar<span class="_ _e"></span>at<span class="_ _e"></span>ed<span class="_ _e"></span> int<span class="_ _e"></span>o w<span class="_ _e"></span>el<span class="_ _e"></span>l-<span class="_ _e"></span>na<span class="_ _e"></span>me<span class="_ _e"></span>d fu<span class="_ _e"></span>nc<span class="_ _e"></span>ti<span class="_ _e"></span>on<span class="_ _e"></span>s,<span class="_ _e"></span> cl<span class="_ _e"></span>ass<span class="_ _e"></span>es<span class="_ _e"></span>, a<span class="_ _e"></span>nd</div><div class="t m0 x35 h15 y52 ff4 fsb fc3 sc0 ls25 ws2b9">methods, it all still lives in <span class="_ _0"></span>script.py. Ev<span class="ls71 ws1c0">entually, the minimal st<span class="ls21 ws3f4">ructure <span class="_ _0"></span>provided by a</span></span></div><div class="t m0 x35 h15 y53 ff4 fsb fc3 sc0 ls2d ws7c">single file will be insufficient for holding <span class="_ _0"></span><span class="ls2f ws135">all your code in a sensible way. You won’t</span></div><div class="t m0 x35 h15 y54 ff4 fsb fc3 sc0 ls51 ws47">remember if the function you’re looking for <span class="ls38 ws1f4">is on line 5 or line 205. Breaking it down</span></div><div class="t m0 x35 h15 y199 ff4 fsb fc3 sc0 ls48 ws39">into memorable catego<span class="_ _e"></span>ries of behavior is the path forward.</div><div class="t m0 x83 h15 y19a ff4 fsb fc3 sc0 ls30 ws36"> The concerns you identify will map well <span class="_ _e"></span><span class="ls3a ws28">to the modules you should create. Be con-</span></div><div class="t m0 x35 h15 y57 ff4 fsb fc3 sc0 ls3a wsc3">servative with the effort you spend guessing <span class="_ _e"></span>what these categories should be up front.</div><div class="t m0 x35 h15 y58 ff4 fsb fc3 sc0 ls48 ws3f5">They’ll change frequently at the<span class="_ _e"></span> start an<span class="ls34 ws2d3">yway, as your mental model of the system</span></div><div class="t m0 x35 h15 y59 ff4 fsb fc3 sc0 ls3d ws3f6">evolves and improves. But<span class="_ _e"></span> spend a little time<span class="ls42 ws8c"> sketching out what you think you’ll need,</span></div><div class="t m0 x35 h15 y19b ff4 fsb fc3 sc0 ls2f ws3f7">and remain open to the possibility that a <span class="ls1c ws217">diff<span class="_ _e"></span>erent structure will make more sense</span></div><div class="t m0 x35 h15 y19c ff4 fsb fc3 sc0 ls3b ws22b">later. The clearest code is the code you do<span class="ls30 wsef">n’t write: every line adds additio<span class="_ _e"></span>nal cogni-</span></div><div class="t m0 x35 h15 y5c ff4 fsb fc3 sc0 ls3a ws28">tive load. The next best thing after <span class="ff3 ls4e ws0">no<span class="_ _e"></span></span><span class="ls52 ws3f8"> code is <span class="ff3 ls5b ws0">well-organized</span><span class="ls34 ws22"> code.</span></span></div><div class="t m0 x83 h15 y5d ff4 fsb fc3 sc0 ls34 ws125"> Modules create additional structure ar<span class="ws3f9">ound the code in them, exclaiming, “The</span></div><div class="t m0 x35 h15 y5e ff4 fsb fc3 sc0 ls121 ws0">c<span class="_ _20"></span>o<span class="_ _3e"></span>d<span class="_ _3e"></span>e<span class="_ _3e"></span> c<span class="_ _3e"></span>o<span class="_ _3e"></span>n<span class="_ _3e"></span>t<span class="_ _3e"></span>a<span class="_ _20"></span>i<span class="_ _3e"></span>n<span class="_ _3e"></span>e<span class="_ _3e"></span>d<span class="_ _3e"></span> h<span class="_ _3e"></span>e<span class="_ _3e"></span>r<span class="_ _3e"></span>e<span class="_ _20"></span> i<span class="_ _3e"></span>s<span class="_ _3e"></span> a<span class="_ _3e"></span>l<span class="_ _3e"></span>l<span class="_ _3e"></span> a<span class="_ _3e"></span>b<span class="_ _20"></span>o<span class="_ _3e"></span>u<span class="_ _3e"></span>t<span class="_ _3e"></span> s<span class="_ _3e"></span>t<span class="_ _3e"></span>a<span class="_ _3e"></span>t<span class="_ _20"></span>i<span class="_ _3e"></span>s<span class="_ _3e"></span>t<span class="_ _3e"></span>i<span class="_ _3e"></span>c<span class="_ _20"></span>s<span class="_ _3e"></span>!<span class="_ _3e"></span>”<span class="_ _3e"></span> I<span class="_ _3e"></span>f<span class="_ _3e"></span> y<span class="_ _3e"></span>o<span class="_ _20"></span>u<span class="_ _3e"></span> n<span class="_ _3e"></span>e<span class="_ _3e"></span>e<span class="_ _3e"></span>d<span class="_ _3e"></span> t<span class="_ _3e"></span>o<span class="_ _3e"></span> d<span class="_ _3e"></span>o<span class="_ _20"></span> s<span class="_ _3e"></span>t<span class="_ _3e"></span>a<span class="_ _3e"></span>t<span class="_ _3e"></span>i<span class="_ _3e"></span>s<span class="_ _20"></span>t<span class="_ _3e"></span>i<span class="_ _3e"></span>c<span class="_ _3e"></span>s<span class="_ _3e"></span> t<span class="_ _3e"></span>h<span class="_ _20"></span>i<span class="_ _3e"></span>n<span class="_ _3e"></span>g<span class="_ _3e"></span>s<span class="_ _3e"></span>,<span class="_ _3e"></span> y<span class="_ _3e"></span>o<span class="_ _20"></span>u</div><div class="t m0 x35 h15 y19d ff4 fsb fc3 sc0 ls47 ws3fa">know to </div><div class="t m5 x3d h24 y5ac ffd fsc fc3 sc0 lsa0 ws3fb">import stati<span class="_ _e"></span>stics</div><div class="t m0 x46 h15 y19d ff4 fsb fc3 sc0 ls38 ws17e"> and use what’s there. If what<span class="ls44 ws3fc"> you need isn’t there already,</span></div><div class="t m0 x35 h15 y60 ff4 fsb fc3 sc0 ls38 ws3fd">at least you have a good id<span class="ls48 ws3fe">ea where to put it. Can you say the same for a 500-line</span></div><div class="t m0 x35 h15 y61 ff4 fsb fc3 sc0 ls3b ws70">script.py file? Perhaps, b<span class="_ _e"></span>ut not for long. </div><div class="t m0 x19 h26 y5ad ffc fs15 fc2 sc0 ls110 ws0">2.2.4<span class="_ _b"> </span>Pa<span class="_ _e"></span>c<span class="_ _e"></span>k<span class="_ _e"></span>ag<span class="_ _e"></span>e<span class="_ _e"></span>s</div><div class="t m0 x35 h15 y19e ff4 fsb fc3 sc0 ls36 ws201">I’ve been praising the use of modules<span class="_ _0"></span> for th<span class="ls1f wsa3">eir ability to neatly br<span class="_ _0"></span>eak code up. Why do</span></div><div class="t m0 x35 h15 y65 ff4 fsb fc3 sc0 ls38 ws26">we need anything else?</div><div class="t m0 x83 h15 y66 ff4 fsb fc3 sc0 ls51 ws43"> Remember that separa<span class="ls35 ws2c4">tion of concerns is a hierarch<span class="_ _0"></span><span class="ls51 ws43">y and that name collisions can</span></span></div><div class="t m0 x35 h15 y5ae ff4 fsb fc3 sc0 ls71 ws2b4">still happen. Suppose your fan site has go<span class="ls1b ws3ff">tten popular, and now you nee<span class="_ _e"></span>d a database</span></div><div class="t m0 x35 h15 y5af ff4 fsb fc3 sc0 ls1c ws400">and a search page to keep track of it all. <span class="ls5f ws401">You’ve writ<span class="_ _0"></span>ten record.p<span class="ls2d ws11e">y, a module for creat-</span></span></div><div class="t m0 x35 h15 y5b0 ff4 fsb fc3 sc0 ls47 ws54">ing database record<span class="_ _e"></span>s, and query.py, a module for <span class="_ _e"></span>querying the database:</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
