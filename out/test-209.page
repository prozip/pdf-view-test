<div id="pfd1" class="pf w0 h0" data-page-no="d1"><div class="pc pcd1 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgd1.png"/><div class="t m0 xa0 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">185<span class="_ _10b"></span><span class="ffa">Recognizing coupling</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls38 wsf5">changes far and wide to keep other code<span class="ls2c ws936"> working. Peppering changes throu<span class="_ _0"></span>ghout</span></div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls20 ws17">your code each time you need to<span class="ls35 ws24"> update behavior is tiresome!</span></div><div class="t m0 x83 h15 y42 ff4 fsb fc3 sc0 ls36 ws2e8"> By addressing feature envy, separating <span class="_ _0"></span><span class="ls2f ws303">concerns, and practicing good encapsula-</span></div><div class="t m0 x35 h15 y43 ff4 fsb fc3 sc0 ls71 ws241">tion and abstraction, you’ll minimize the amount of shotgun surgery you’ll have to do.</div><div class="t m0 x35 h15 y44 ff4 fsb fc3 sc0 ls30 wsb0">Anytime you find yourself ju<span class="ls71 ws1c0">mping around to different fu<span class="ls34 ws138">nctions, methods, or mod-</span></span></div><div class="t m0 x35 h15 y45 ff4 fsb fc3 sc0 ls30 ws219">ules to realize the change you’re trying to<span class="ls7d ws8d4"> make, ask yo<span class="_ _e"></span>urself if you’re experienc<span class="_ _e"></span>ing</span></div><div class="t m0 x35 h15 y46 ff4 fsb fc3 sc0 ls3b ws4b0">tight coupling between those areas of code. <span class="_ _e"></span><span class="ls3d ws937">Then see what opportunities there are to</span></div><div class="t m0 x35 h15 y47 ff4 fsb fc3 sc0 ls3a wsa7">move a method to a better-suited class, a <span class="ls20 ws9b">function <span class="_ _0"></span>to a better-suited module, and so</span></div><div class="t m0 x35 h15 y48 ff4 fsb fc3 sc0 ls3a ws28">on—a place for everything, and everything in its place. </div><div class="t m0 x19 h26 y16a4 ffc fs15 fc2 sc0 ls13f ws938">1<span class="_ _0"></span>0<span class="_ _0"></span>.<span class="_ _0"></span>2<span class="_ _1d"></span>.3<span class="_ _19"> </span>Leaky abstractions</div><div class="t m0 x35 h15 y5ab ff4 fsb fc3 sc0 ls1e ws6bb">The goal of abstraction, as yo<span class="ls7d ws3b1">u’ve learned, is to hide<span class="_ _e"></span> the details of a particular t<span class="_ _e"></span>ask</span></div><div class="t m0 x35 h15 y14b ff4 fsb fc3 sc0 ls3a wsa7">from the consumer. The consumer triggers the behavior and receives the result but</div><div class="t m0 x35 h15 y4d ff4 fsb fc3 sc0 ls7d ws6c9">doesn’t care about what happens und<span class="_ _e"></span>er the hood. If you start to notice feature envy, it</div><div class="t m0 x35 h15 y4e ff4 fsb fc3 sc0 ls3a ws28">might be because of a <span class="ff3 lsb1 ws1d3">leaky abstraction</span><span class="ls6 ws0">.</span></div><div class="t m0 x83 h15 y4f ff4 fsb fc3 sc0 ls38 ws3e6"> A leaky abstraction is one that doesn’t suff<span class="ls2d ws211">iciently hide its details. The abstr<span class="_ _0"></span>action</span></div><div class="t m0 x35 h15 y2b2 ff4 fsb fc3 sc0 ls2d ws3eb">claims to provide a simple way <span class="ls5e ws274">to get something done, but it ultimately requires yo<span class="_ _e"></span>u to</span></div><div class="t m0 x35 h15 yed ff4 fsb fc3 sc0 ls42 ws38f">have some knowledge about what lies bene<span class="ls36 ws2e8">ath when using it. This sometimes mani-</span></div><div class="t m0 x35 h15 y52 ff4 fsb fc3 sc0 ls38 ws26">fests as feature envy, but it can also <span class="ls3a ws28">be subtle, as you’ll see in a mom<span class="_ _e"></span>ent.</span></div><div class="t m0 x83 h15 y53 ff4 fsb fc3 sc0 ls1f ws765"> Picture a Python package for making HTTP requests (</div><div class="t m5 xcc h24 y14b8 ffd fsc fc3 sc0 lsa0 ws0">requests</div><div class="t m0 x99 h15 y53 ff4 fsb fc3 sc0 ls6 ws939">, maybe). If your</div><div class="t m0 x35 h15 y54 ff4 fsb fc3 sc0 ls152 ws12a">goal<span class="_ _e"></span> is purel<span class="_ _e"></span>y to make a </div><div class="t m5 xa8 h24 y15de ffd fsc fc3 sc0 lsa0 ws0">GET</div><div class="t m0 xe4 h15 y54 ff4 fsb fc3 sc0 ls71 ws2d4"> request to some URL and ge<span class="ls25 ws60d">t the response back, you’d be</span></div><div class="t m0 x35 h15 y199 ff4 fsb fc3 sc0 ls51 ws1bb">best served by an abstraction on the </div><div class="t m5 x84 h24 y435 ffd fsc fc3 sc0 lsa0 ws0">GET</div><div class="t m0 xf h15 y199 ff4 fsb fc3 sc0 ls6c ws84f"> behavior, such as </div><div class="t m5 xed h24 y435 ffd fsc fc3 sc0 lsa0 ws0">requests.ge<span class="_ _e"></span>t(&apos;https://</div><div class="t m5 x35 h24 y436 ffd fsc fc3 sc0 lsa0 ws0">www.google.co<span class="_ _e"></span>m&apos;)</div><div class="t m0 x8e h15 y19a ff4 fsb fc3 sc0 ls6 ws0">.</div><div class="t m0 x83 h15 y57 ff4 fsb fc3 sc0 ls2f ws109"> This abstraction works well <span class="ff3 ls2c ws0">most</span><span class="lsc5 ws8eb"> of the time,<span class="_ _0"></span> but what happens when you lo<span class="_ _0"></span>se your</span></div><div class="t m0 x35 h15 y58 ff4 fsb fc3 sc0 ls6f ws7e1">internet conne<span class="_ _e"></span>ction? When Google is unavailable? When<span class="_ _e"></span> things are “just weird” for a</div><div class="t m0 x35 h15 y437 ff4 fsb fc3 sc0 ls7d ws93a">moment and your </div><div class="t m5 xb1 h24 y16a5 ffd fsc fc3 sc0 lsa0 ws0">GET</div><div class="t m0 x3b h15 y437 ff4 fsb fc3 sc0 ls2d ws371"> request doesn’t make it anywhere? In these cases, </div><div class="t m5 xe3 h24 y16a5 ffd fsc fc3 sc0 lsa0 ws0">requests</div><div class="t m0 x35 h15 y19b ff4 fsb fc3 sc0 ls38 ws30c">generally raises an exception <span class="_ _0"></span>indicating the <span class="ls2e ws426">problem (figure 10<span class="_ _0"></span>.5). This is useful for</span></div><div class="t m0 x35 h15 y19c ff4 fsb fc3 sc0 ls25 ws307">error handling, but it requires the ca<span class="ls31 wsb5">lling code to know a bit about the <span class="ff3 ls6b ws0">possible</span><span class="ls71 ws2b4"> errors</span></span></div><div class="t m0 x35 h15 y5c ff4 fsb fc3 sc0 ls1f ws2dc">so it knows which are likely to occur and <span class="ls2d ws15b">how to handle them. On<span class="ls36 wscc">ce you start handli<span class="_ _0"></span>ng</span></span></div><div class="t m0 x35 h15 y5d ff4 fsb fc3 sc0 ls70 ws2a2">errors from </div><div class="t m5 x8c h24 y439 ffd fsc fc3 sc0 lsa0 ws0">requests</div><div class="t m0 x16 h15 yfb ff4 fsb fc3 sc0 lsab ws361"> in many places, you<span class="_ _0"></span>’re coupled to it<span class="_ _0"></span>, because your c<span class="_ _0"></span>ode expects</div><div class="t m0 x35 h15 y24b ff4 fsb fc3 sc0 ls42 ws26e">a certain set of possible outcomes, which <span class="ls7d ws12a">are specific to th</span><span class="ws32">e requests package.</span></div><div class="t m0 x83 h15 y19d ff4 fsb fc3 sc0 ls30 ws167"> Leaks happen because there’s a <span class="_ _e"></span>trade-off <span class="ls48 ws4a5">to consider with abstractions—generally</span></div><div class="t m0 x35 h15 y60 ff4 fsb fc3 sc0 ls2f ws3d4">speaking, the further you abst<span class="ls80 ws93b">ract a concept in code, the less customizat<span class="_ _e"></span>ion you can</span></div><div class="t m0 x35 h15 y61 ff4 fsb fc3 sc0 ls36 ws20b">provide. This is because abstraction is inhe<span class="ls5e ws274">rently meant to remove access to detail; the</span></div><div class="t m0 x35 h15 y2ad ff4 fsb fc3 sc0 ls3a ws12e">fewer details you can access, the few<span class="_ _e"></span>er ways you have to change the details. As develop-</div><div class="t m0 x35 h15 y24c ff4 fsb fc3 sc0 ls3b ws21e">ers, we often want to tweak things to bett<span class="ls20 ws2f0">er suit<span class="_ _e"></span> our needs, th<span class="ls1e ws96">ough, so we sometimes</span></span></div><div class="t m0 x35 h15 y19e ff4 fsb fc3 sc0 ls21 wsf7">provide lower-l<span class="_ _0"></span>evel access to the very detai<span class="_ _0"></span>ls we tried to hide.</div><div class="t m0 x83 h15 y65 ff4 fsb fc3 sc0 ls2f ws5db"> When you find yourself provi<span class="_ _0"></span>ding access to a low-level detail from a <span class="_ _0"></span>high-level layer</div><div class="t m0 x35 h15 y66 ff4 fsb fc3 sc0 ls34 ws93c">of abstraction, you’re likely introducin<span class="ls6b ws93d">g coupling.<span class="_ _0"></span> Remember that loose coupling</span></div><div class="t m0 x35 h15 y16bd ff4 fsb fc3 sc0 ls1b ws93e">relies on <span class="ff3 lsbb ws0">interf<span class="_ _e"></span>aces</span><span class="ls31 ws2c2">—shared abstractions—rather than <span class="ls25 ws456">specific low-level details. Read</span></span></div><div class="t m0 x35 h15 y16be ff4 fsb fc3 sc0 ls34 ws3ae">on to see some of the specif<span class="ls20 ws251">ic strategies you can use t<span class="_ _e"></span>o achieve loose coupling in your</span></div><div class="t m0 x35 h15 y16bf ff4 fsb fc3 sc0 ls72 ws0">code. </div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
