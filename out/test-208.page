<div id="pfd0" class="pf w0 h0" data-page-no="d0"><div class="pc pcd0 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgd0.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">184</div><div class="t m0 x92 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xd3 h2c y1d0 ffb fs19 fcb sc0 ls158 ws0">HAPTER</div><div class="t m0 xe4 h2b y1cf ffb fs18 fcb sc0 ls1bb ws730"> 10</div><div class="t m0 x2a h2d y80 ffa fs7 fcb sc0 ls6 ws0">Achieving loose coupling</div><div class="t m0 x44 h15 y40 ff4 fsb fc3 sc0 ls1e ws7d2">You can see that loose coupling, sep<span class="_ _0"></span>aration of concerns, and encapsulation all work</div><div class="t m0 x44 h15 y41 ff4 fsb fc3 sc0 ls1c ws21d">together. The separation and encapsulation <span class="ls3a ws5a1">of behavior with a <span class="ws37e">care<span class="_ _e"></span>fully thought out</span></span></div><div class="t m0 x44 h15 y42 ff4 fsb fc3 sc0 ls3a ws32">interface to the outside world helps <span class="ls3e ws4a">achieve the loose coupling you desire. </span></div><div class="t m0 x42 h1f y16a3 ffc fs13 fc2 sc0 ls148 ws923">1<span class="_ _1d"></span>0.<span class="_ _1d"></span>2<span class="_ _12"> </span>Recognizing coupling</div><div class="t m0 x44 h15 y45 ff4 fsb fc3 sc0 ls48 ws4b8">You’ve seen examples of tight and loose co<span class="ls1c ws17f">upling now, but coupling can take on a few</span></div><div class="t m0 x44 h15 y46 ff4 fsb fc3 sc0 ls51 ws268">specific forms in practice. Giving a name <span class="ls20 wsc7">to these forms, and recognizing the signs of</span></div><div class="t m0 x44 h15 ye3 ff4 fsb fc3 sc0 ls42 ws206">each form, will help you mitigate tight co<span class="ls6 ws924">upling early on, keep<span class="_ _e"></span>ing you more produc-</span></div><div class="t m0 x44 h15 y48 ff4 fsb fc3 sc0 ls36 ws35">tive in the long term.</div><div class="t m0 x42 h26 y16a4 ffc fs15 fc2 sc0 ls21b ws907">10.2.1<span class="_ _fc"> </span>F<span class="_ _e"></span>ea<span class="_ _e"></span>t<span class="_ _e"></span>ur<span class="_ _e"></span>e<span class="_ _e"></span> e<span class="_ _e"></span>nv<span class="_ _e"></span>y</div><div class="t m0 x44 h15 y5ab ff4 fsb fc3 sc0 ls21e ws925">In the early version of your query-cleaning</div><div class="t m0 x44 h15 y14b ff4 fsb fc3 sc0 ls21f ws926">cod<span class="_ _0"></span>e,<span class="_ _0"></span> th<span class="_ _0"></span>e <span class="_ _0"></span>consumer needed to call sev-</div><div class="t m0 x44 h15 y4d ff4 fsb fc3 sc0 ls220 ws927">eral functions from the search module.</div><div class="t m0 x44 h15 y4e ff4 fsb fc3 sc0 ls1ed ws928">When code performs several tasks using</div><div class="t m0 x44 h15 y4f ff4 fsb fc3 sc0 ls1ee ws929">mainly features from another area, that</div><div class="t m0 x44 h15 y2b2 ff4 fsb fc3 sc0 ls221 ws92a">code is said to have <span class="ff3 ls222 ws92b">feature envy</span><span class="ls21c ws92c">. Your main</span></div><div class="t m0 x44 h15 yed ff4 fsb fc3 sc0 ls223 ws92d">procedure feels like it wants to <span class="ff3 ls1a0 ws0">be</span><span class="lse8 ws92e"> the</span></div><div class="t m0 x44 h15 y52 ff4 fsb fc3 sc0 ls223 ws12b">search module because it uses all of its</div><div class="t m0 x44 h15 y53 ff4 fsb fc3 sc0 ls224 ws92f">features explicitly. This is also common in</div><div class="t m0 x44 h15 y54 ff4 fsb fc3 sc0 lse9 wsf6">classes, as<span class="_ _0"></span> show<span class="ls1ec ws2e9">n in figure 10.4.</span></div><div class="t m0 x32 h15 y199 ff4 fsb fc3 sc0 ls34 ws185"> Feature envy can be solved the same</div><div class="t m0 x44 h15 y19a ff4 fsb fc3 sc0 ls34 ws930">way you fixed your query-cleaning</div><div class="t m0 x44 h15 y57 ff4 fsb fc3 sc0 ls44 ws53">logic: roll it up into a single entry point</div><div class="t m0 x44 h15 y58 ff4 fsb fc3 sc0 ls30 ws931">back at the source. In the previous</div><div class="t m0 x44 h15 y59 ff4 fsb fc3 sc0 ls2f ws932">example, you created a </div><div class="t m5 xf1 h24 y16a5 ffd fsc fc3 sc0 lsa0 ws0">clean_query</div><div class="t m0 x44 h15 y19b ff4 fsb fc3 sc0 ls71 ws933">function in the search module. The</div><div class="t m0 x44 h15 y19c ff4 fsb fc3 sc0 ls62 ws708">search module is w<span class="_ _e"></span>here query-cleaning logic<span class="_ _e"></span> goes, so a </div><div class="t m5 x2d h24 y16a6 ffd fsc fc3 sc0 lsa0 ws0">clean_query</div><div class="t m0 x9d h15 y19c ff4 fsb fc3 sc0 ls3a ws1cf"> function is per-</div><div class="t m0 x44 h15 y5c ff4 fsb fc3 sc0 ls3d ws2bc">fectly at home there. Othe<span class="ls3e ws34d">r code can continue using </span></div><div class="t m5 xf8 h24 y438 ffd fsc fc3 sc0 lsa0 ws0">clean_query</div><div class="t m0 x5c h15 y5c ff4 fsb fc3 sc0 ls34 ws11f">, blissfully unaware</div><div class="t m0 x44 h15 y5d ff4 fsb fc3 sc0 ls2e ws6e1">of what happens underneath and tru<span class="_ _0"></span>sting th<span class="ls25 ws1e1">at it will receive a pr<span class="ls44">operly cleaned query</span></span></div><div class="t m0 x44 h15 y24b ff4 fsb fc3 sc0 ls25 wsfc">in return. That code no long<span class="ls6b ws5d3">er has f<span class="_ _0"></span>eature envy; it’s ha<span class="ls25 wsfc">ppy letting the searc<span class="_ _0"></span>h module</span></span></div><div class="t m0 x44 h15 y19d ff4 fsb fc3 sc0 ls48 ws2be">be in charge of se<span class="ls3a ws28">arch-related things.</span></div><div class="t m0 x32 h15 y60 ff4 fsb fc3 sc0 ls7f ws0"> A<span class="_ _1c"></span>s<span class="_ _1d"></span> y<span class="_ _1d"></span>o<span class="_ _1d"></span>u<span class="_ _1c"></span> r<span class="_ _1d"></span>e<span class="_ _1d"></span>f<span class="_ _1d"></span>a<span class="_ _1d"></span>c<span class="_ _1c"></span>t<span class="_ _1d"></span>o<span class="_ _1d"></span>r<span class="_ _1d"></span> t<span class="_ _1c"></span>o<span class="_ _1d"></span> r<span class="_ _1d"></span>e<span class="_ _1d"></span>m<span class="_ _1c"></span>o<span class="_ _1d"></span>v<span class="_ _1d"></span>e<span class="_ _1d"></span> f<span class="_ _1d"></span>e<span class="_ _1c"></span>a<span class="_ _1d"></span>t<span class="_ _1d"></span>u<span class="_ _1d"></span>r<span class="_ _1d"></span>e<span class="_ _1c"></span> e<span class="_ _1d"></span>n<span class="_ _1d"></span>v<span class="_ _1d"></span>y<span class="_ _1c"></span>,<span class="_ _1d"></span> i<span class="_ _1d"></span>t<span class="_ _1d"></span> w<span class="_ _1c"></span>i<span class="_ _1d"></span>l<span class="_ _1d"></span>l<span class="_ _1d"></span> f<span class="_ _1c"></span>e<span class="_ _1d"></span>e<span class="_ _1d"></span>l<span class="_ _1d"></span> l<span class="_ _1c"></span>i<span class="_ _1d"></span>k<span class="_ _1d"></span>e<span class="_ _1d"></span> y<span class="_ _1c"></span>o<span class="_ _1d"></span>u<span class="_ _1d"></span>’<span class="_ _1d"></span>r<span class="_ _1d"></span>e<span class="_ _1c"></span> g<span class="_ _1d"></span>i<span class="_ _1d"></span>v<span class="_ _1d"></span>i<span class="_ _1c"></span>n<span class="_ _1d"></span>g<span class="_ _1d"></span> u<span class="_ _1d"></span>p<span class="_ _1c"></span> a<span class="_ _1d"></span> c<span class="_ _1d"></span>e<span class="_ _1d"></span>r<span class="_ _1c"></span>t<span class="_ _1d"></span>a<span class="_ _1d"></span>i<span class="_ _1d"></span>n</div><div class="t m0 x44 h15 y61 ff4 fsb fc3 sc0 ls2f ws15f">amount of control. Before <span class="ls3a ws26d">refactoring, you can see exactly how the information f<span class="_ _e"></span>lows</span></div><div class="t m0 x44 h15 y62 ff4 fsb fc3 sc0 ls3d ws7da">through the code, but afterward, that flow is often hidden under a layer of abstrac-</div><div class="t m0 x44 h15 y24c ff4 fsb fc3 sc0 ls38 ws424">tion. This requires putting a certain amount <span class="ls3d ws2c0">of trust in the code you int<span class="_ _e"></span>eract with to</span></div><div class="t m0 x44 h15 y19e ff4 fsb fc3 sc0 ls38 ws30c">do what it says. It will feel uncomfortabl<span class="ws23e">e occasionally, but a thorough test suite can</span></div><div class="t m0 x44 h15 y65 ff4 fsb fc3 sc0 ls38 ws23">help you remain confident in the functionality. </div><div class="t m0 x42 h26 y16a7 ffc fs15 fc2 sc0 ls21b ws907">10.2.2<span class="_ _fc"> </span>S<span class="_ _e"></span>ho<span class="_ _e"></span>t<span class="_ _e"></span>g<span class="_ _e"></span>un<span class="_ _e"></span> s<span class="_ _e"></span>ur<span class="_ _e"></span>g<span class="_ _e"></span>e<span class="_ _e"></span>ry</div><div class="t m0 x44 h15 yd9 ff4 fsb fc3 sc0 ls34 ws143">You learned about shotgun surgery in chapte<span class="ls2d ws3d4">r 7, and it often happens as a result of</span></div><div class="t m0 x44 h15 y16a8 ff4 fsb fc3 sc0 ls4e ws934">tight coupling. You<span class="_ _e"></span> make one change to <span class="ls34 ws141">a class or module, <span class="_ _e"></span>an<span class="wscd">d you need to make</span></span></div><div class="c x65 y16a9 wcc h14b"><div class="t m0 x12b h5f y16aa ff15 fs1c fc12 sc0 ls6 ws0">Class A</div><div class="t m0 x12b h5f y16ab ff15 fs1c fc12 sc0 ls6 ws0">    attr_a</div><div class="t m0 x12b h5f y16ac ff15 fs1c fc12 sc0 ls6 ws0">    attr_b</div><div class="t m0 x12b h5f y16ad ff15 fs1c fc12 sc0 ls6 ws0">    method_a</div><div class="t m0 x12b h5f y16ae ff15 fs1c fc12 sc0 ls6 ws0">    method_b</div><div class="t m0 xae h5f y16aa ff15 fs1c fc12 sc0 ls6 ws0">Class B</div><div class="t m0 xae h5f y16ab ff15 fs1c fc12 sc0 ls6 ws0">    attr_c</div><div class="t m0 xae h5f y16ac ff15 fs1c fc12 sc0 ls6 ws0">    attr_d</div><div class="t m0 xae h5f y16ad ff15 fs1c fc12 sc0 ls6 ws0">    method_c</div><div class="t me x13f h115 y16af ff1e fs2c fc12 sc0 ls6 ws0">Class</div><div class="t m0 xea h37 y16b0 ff12 fs1d fc12 sc0 ls6 ws0"> </div><div class="t me x12f h115 y16af ff1e fs2c fc12 sc0 ls6 ws0">A</div><div class="t m0 x42 h37 y16b0 ff12 fs1d fc12 sc0 ls6 ws0"> depends heavily on </div><div class="t me x102 h115 y16af ff1e fs2c fc12 sc0 ls6 ws0">Class</div><div class="t m0 xac h37 y16b0 ff12 fs1d fc12 sc0 ls6 ws0"> </div><div class="t me x37 h115 y16af ff1e fs2c fc12 sc0 ls6 ws0">B</div><div class="t m0 x38 h37 y16b0 ff12 fs1d fc12 sc0 ls6 ws0"> to</div><div class="t m0 x13f h37 y16b1 ff12 fs1d fc12 sc0 ls6 ws0">get most of its work done, so </div><div class="t me x102 h115 y16b2 ff1e fs2c fc12 sc0 ls6 ws0">Class</div><div class="t m0 xac h37 y16b1 ff12 fs1d fc12 sc0 ls6 ws0"> </div><div class="t me x37 h115 y16b2 ff1e fs2c fc12 sc0 ls6 ws0">A</div><div class="t m0 x13f h37 y16b3 ff12 fs1d fc12 sc0 ls6 ws0">has feature envy of </div><div class="t me x44 h115 y16b4 ff1e fs2c fc12 sc0 ls6 ws0">Class</div><div class="t m0 x8b h37 y16b3 ff12 fs1d fc12 sc0 ls6 ws0"> </div><div class="t me x1b h115 y16b4 ff1e fs2c fc12 sc0 ls6 ws0">B</div><div class="t m0 x140 h37 y16b3 ff12 fs1d fc12 sc0 ls6 ws0">.</div><div class="t m0 x13f h37 y16b5 ff12 fs1d fc12 sc0 ls6 ws0">Feature envy points out an opportunity to</div><div class="t m0 x13f h37 y16b6 ff12 fs1d fc12 sc0 ls6 ws0">reduce coupling by moving some methods</div><div class="t m0 x13f h37 y16b7 ff12 fs1d fc12 sc0 ls6 ws0">from </div><div class="t me xbd h115 y16b8 ff1e fs2c fc12 sc0 ls6 ws0">Class</div><div class="t m0 x13a h37 y16b9 ff12 fs1d fc12 sc0 ls6 ws0"> </div><div class="t me xc6 h115 y16b8 ff1e fs2c fc12 sc0 ls6 ws0">A</div><div class="t m0 xf5 h37 y16b9 ff12 fs1d fc12 sc0 ls6 ws0"> to </div><div class="t me x1 h115 y16b8 ff1e fs2c fc12 sc0 ls6 ws0">Class</div><div class="t m0 xae h37 y16b9 ff12 fs1d fc12 sc0 ls6 ws0"> </div><div class="t me x151 h115 y16b8 ff1e fs2c fc12 sc0 ls6 ws0">B</div><div class="t m0 x1b h37 y16b9 ff12 fs1d fc12 sc0 ls6 ws0">, or to combine </div><div class="t m0 x13f h37 y16ba ff12 fs1d fc12 sc0 ls6 ws0">the two classes altogether if they<span class="_ _e"></span>’re cohesive.</div></div><div class="c x84 y16bb wcd hd7"><div class="t m0 x129 h2b y16bc ffb fs18 fcb sc0 ls29 ws935">Feature envy from one class to another<span class="_ _10a"></span>Figure 10.4</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
