<div id="pf2c" class="pf w0 h0" data-page-no="2c"><div class="pc pc2c w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg2c.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">20</div><div class="t m0 x3 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 x29 h2c y1d0 ffb fs19 fcb sc0 lsf6 ws0">HAPTER</div><div class="t m0 x47 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 2</div><div class="t m0 xca h2d y80 ffa fs7 fcb sc0 ls6 ws0">Separation of concerns</div><div class="t m0 x32 h49 y33a ffb fs17 fc2 sc0 lsf7 ws0">NOTE</div><div class="t m0 x90 h15 y40 ff4 fsb fc3 sc0 ls42 ws2e3">If you haven’t yet, you’ll want to <span class="ls36 ws2e4">set up Python on your computer so</span></div><div class="t m0 x32 h15 y33b ff4 fsb fc3 sc0 ls30 ws187">you can follow along with the co<span class="_ _e"></span>de in<span class="ls71 ws2e5"> this book. The installation and best</span></div><div class="t m0 x32 h15 y33c ff4 fsb fc3 sc0 ls31 wse8">practices are all cove<span class="lsf8 ws2e6">red in the appendix<span class="_ _e"></span>, so befo<span class="ls36 ws2e7">re you go too much further,</span></span></div><div class="t m0 x32 h15 y33d ff4 fsb fc3 sc0 ls3a ws296">you should head there and get set up. <span class="ls36 ws2e8">I’ll be right here when you’re ready.</span></div><div class="t m0 x32 h15 y33e ff4 fsb fc3 sc0 ls44 ws114">Remember that you can get <span class="lsb1 ws2e9">t<span class="_ _0"></span>he full source code fo<span class="_ _0"></span>r the book’s examples a<span class="_ _0"></span>nd</span></div><div class="t m0 x32 h15 y33f ff4 fsb fc3 sc0 ls1c ws2ea">exercises in the book’s <span class="ls6 ws2eb">repository on GitH<span class="_ _e"></span>ub (<span class="fcc ls5f ws0">https://gi<span class="_ _0"></span>thub.com/daneah/</span></span></div><div class="t m0 x32 h15 y340 ff4 fsb fcc sc0 ls2f ws0">practices-of-the-python-pro<span class="fc3 ls79">).</span></div><div class="t m0 x42 h1f y341 ffc fs13 fc2 sc0 lsf9 ws0">2.1<span class="_ _21"> </span>N<span class="_ _e"></span>a<span class="_ _e"></span>m<span class="_ _e"></span>e<span class="_ _e"></span>s<span class="_ _e"></span>pa<span class="_ _e"></span>c<span class="_ _e"></span>i<span class="_ _e"></span>n<span class="_ _e"></span>g</div><div class="t m0 x44 h15 y342 ff4 fsb fc3 sc0 ls3e ws2ec">Like many programming languages, Python isolates code throug<span class="_ _0"></span>h the concept of</div><div class="t m0 x44 h15 y343 ff3 fsb fc3 sc0 ls38 ws0">namespaces<span class="ff4 ls79 ws2ed">. As a program ru<span class="_ _e"></span>ns, it keeps track <span class="ls31 ws261">of all the known namespaces and the</span></span></div><div class="t m0 x44 h15 y344 ff4 fsb fc3 sc0 ls3e ws4a">information available in those namespaces.</div><div class="t m0 x32 h15 y345 ff4 fsb fc3 sc0 ls71 wsd4"> Namespaces are helpful in a few ways:</div><div class="t m0 x86 h29 y346 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y8e ff4 fsb fc3 sc0 ls25 ws2ee">As software grows, multiple concepts will need si<span class="ls38 ws2ef">milar or identical names.</span></div><div class="t m0 x87 h15 y347 ff4 fsb fc3 sc0 ls38 ws1b8">Namespaces help minimize collisions so<span class="wsf5"> it remains clear to which concept a</span></div><div class="t m0 x87 h15 y348 ff4 fsb fc3 sc0 ls38 ws1f4">name refers.</div><div class="t m0 x86 h29 y349 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y34a ff4 fsb fc3 sc0 ls31 ws25">As software grows, it become<span class="ls2d ws31">s exponentially more difficu</span>lt to know what code <span class="_ _0"></span>is</div><div class="t m0 x87 h15 y34b ff4 fsb fc3 sc0 ls20 ws2f0">already present in the codebase. Namesp<span class="ls3a ws1c6">aces help you <span class="_ _e"></span>make educated guesses</span></div><div class="t m0 x87 h15 y276 ff4 fsb fc3 sc0 ls34 ws22">about where code might live, if it does exist.</div><div class="t m0 x86 h29 y34c ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y96 ff4 fsb fc3 sc0 ls2e ws44">When adding new code to a large codeba<span class="ls34 ws9f">se, the existing namespaces can guide</span></div><div class="t m0 x87 h15 y34d ff4 fsb fc3 sc0 ls66 ws2f1">where the ne<span class="_ _0"></span>w code should live<span class="_ _0"></span>. If no <span class="ls1c ws151">obvious choice exists, a new namespace</span></div><div class="t m0 x87 h15 y34e ff4 fsb fc3 sc0 ls1c ws51">might be appropriate.</div><div class="t m0 x44 h15 y34f ff4 fsb fc3 sc0 ls34 ws2f2">Namespaces are so important, in fact, that <span class="ls1c ws151">they are included as <span class="_ _e"></span>the last statement in</span></div><div class="t m0 x44 h15 y350 ff4 fsb fc3 sc0 ls42 ws2f3">“The Zen of Python” (if you’re unfamiliar wi<span class="ls34 ws2f4">th “The Zen of Python,” try firing up the</span></div><div class="t m0 x44 h15 y351 ff4 fsb fc3 sc0 ls71 wsd4">Python interpreter and typing </div><div class="t m5 x8f h24 y352 ffd fsc fc3 sc0 lsa0 ws0">import</div><div class="t m0 xa9 h15 y351 ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m5 xa5 h24 y352 ffd fsc fc3 sc0 lsa0 ws0">this</div><div class="t m0 xf h15 y351 ff4 fsb fc3 sc0 ls79 ws0">).</div><div class="t m0 x32 h16 y353 ff3 fsc fc3 sc0 lsf wsb">Namespaces are one honking great idea—let’s do more of those!</div><div class="t m0 xcb ha y354 ff4 fs7 fc1 sc0 ls6 ws0">—</div><div class="t m0 xcc h15 y355 ff4 fsb fc3 sc0 ls34 ws22">The Zen of Python</div><div class="t m0 x44 h15 y356 ff4 fsb fc3 sc0 ls20 ws202">The names for all the variables, functions, an<span class="ls47 ws2f5">d classes you’ve ever used in Python were</span></div><div class="t m0 x44 h15 y357 ff4 fsb fc3 sc0 ls25 ws123">names in one namespace or<span class="ls34 ws2f4"> another. Names, like </span></div><div class="t m5 x75 h24 y358 ffd fsc fc3 sc0 ls6 ws0">x</div><div class="t m0 x55 h15 y359 ff4 fsb fc3 sc0 ls2d ws177"> or </div><div class="t m5 xcd h24 y358 ffd fsc fc3 sc0 lsa0 ws0">total</div><div class="t m0 xa6 h15 y359 ff4 fsb fc3 sc0 ls2d ws177"> or </div><div class="t m5 x5 h24 y358 ffd fsc fc3 sc0 lsa0 ws0">EssentialBusi<span class="_ _e"></span>ness-</div><div class="t m5 x44 h24 y35a ffd fsc fc3 sc0 lsa0 ws0">DomainObject</div><div class="t m0 x8c h15 y35b ff4 fsb fc3 sc0 ls71 ws2f6">, are references to something. When your Python code says </div><div class="t m5 xce h24 y35a ffd fsc fc3 sc0 ls6 ws2f7">x = 3</div><div class="t m0 xcf h15 y35b ff4 fsb fc3 sc0 ls1c ws2f8">, it</div><div class="t m0 x44 h15 y35c ff4 fsb fc3 sc0 ls38 wsaa">means “assign the value 3 to the name </div><div class="t m5 x22 h24 y35d ffd fsc fc3 sc0 ls6 ws0">x</div><div class="t m0 x13 h15 y35c ff4 fsb fc3 sc0 ls31 ws21c">,” and you can then refer to </div><div class="t m5 x61 h24 y35d ffd fsc fc3 sc0 ls6 ws0">x</div><div class="t m0 x7c h15 y35c ff4 fsb fc3 sc0 lsc1 ws0"> in y<span class="_ _0"></span>our c<span class="_ _0"></span>ode<span class="_ _0"></span>. A</div><div class="t m0 x44 h15 y77 ff4 fsb fc3 sc0 ls42 ws2f9">“variable” is a name that refers to a va<span class="ls3e ws2fa">lue, though names<span class="_ _0"></span> ca<span class="ls30 ws2fb">n refer to functions,</span></span></div><div class="t m0 x44 h15 y35e ff4 fsb fc3 sc0 ls42 ws32">classes, and more in Python.</div><div class="t m0 x42 h26 y35f ffc fs15 fc2 sc0 lsfa ws2fc">2<span class="_ _0"></span>.<span class="_ _0"></span>1<span class="_ _0"></span>.<span class="_ _0"></span>1<span class="_ _11"> </span>Namespaces an<span class="_ _e"></span>d the import statement</div><div class="t m0 x44 h15 y360 ff4 fsb fc3 sc0 lsc5 ws2fd">When you first op<span class="_ _0"></span>en the Python i<span class="_ _0"></span>nterpreter, <span class="_ _0"></span>the <span class="ff3 ls71 ws0">built-in</span><span class="ls4e ws2fe"> namespace is populated with</span></div><div class="t m0 x44 h15 y361 ff4 fsb fc3 sc0 ls21 ws2ff">all the stuff buil<span class="_ _0"></span>t into Python. This namespac<span class="_ _0"></span>e contains built-in funct<span class="_ _0"></span>ions like </div><div class="t m5 xab h24 y362 ffd fsc fc3 sc0 lsa0 ws0">print()</div><div class="t m0 x44 h15 y363 ff4 fsb fc3 sc0 ls4e ws0">and </div><div class="t m5 xae h24 y364 ffd fsc fc3 sc0 lsa0 ws0">open()</div><div class="t m0 x79 h15 y363 ff4 fsb fc3 sc0 ls31 ws300">. These built-ins have no prefix, and yo<span class="ls2d ws301">u don’t need to do anything special</span></div><div class="t m0 x44 h15 y365 ff4 fsb fc3 sc0 ls20 ws2f0">to use them. Python makes them available to you anywhere in your code. That<span class="_ _e"></span>’s why</div><div class="t m0 x44 h15 y366 ff4 fsb fc3 sc0 ls20 ws21">the famously easy </div><div class="t m5 xa7 h24 y367 ffd fsc fc3 sc0 lsa0 ws0">print(&apos;Hell<span class="_ _e"></span>o world!&apos;)</div><div class="t m0 x10 h15 y368 ff4 fsb fc3 sc0 ls44 ws34"> Just Works™ in Python.</div><a class="l" href="https://github.com/daneah/practices-of-the-python-pro"><div class="d m2" style="border-style:none;position:absolute;left:311.220000px;bottom:541.538000px;width:129.900000px;height:11.220000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://github.com/daneah/practices-of-the-python-pro"><div class="d m2" style="border-style:none;position:absolute;left:441.120000px;bottom:541.538000px;width:24.000000px;height:11.220000px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="https://github.com/daneah/practices-of-the-python-pro"><div class="d m2" style="border-style:none;position:absolute;left:57.120000px;bottom:529.538000px;width:165.120000px;height:12.000000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
