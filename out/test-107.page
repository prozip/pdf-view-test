<div id="pf6b" class="pf w0 h0" data-page-no="6b"><div class="pc pc6b w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg6b.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">83<span class="_ _22"></span><span class="ffa">Functional testing approaches</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls38 wsaa">Try a few other lists of numbers in<span class="ls30 ws22e"> the REPL now to verify that </span></div><div class="t m5 xdd h24 y3eb ffd fsc fc3 sc0 lsa0 ws0">calculate_mea<span class="_ _e"></span>n</div><div class="t m0 x9f h15 y40 ff4 fsb fc3 sc0 lsbc ws484"> is giv-</div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls34 ws11f">ing the right results. Think of useful sets <span class="ls20 wsac">of inputs that might change the behavior of</span></div><div class="t m0 x35 h15 y42 ff4 fsb fc3 sc0 ls30 wsbd">the function:</div><div class="t m0 x8b h29 yade ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 y142 ff4 fsb fc3 sc0 ls2e ws4d">Does it work correctly with negative numbers?</div><div class="t m0 x8b h29 yadf ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 yae0 ff4 fsb fc3 sc0 lsab ws361">Does it work<span class="_ _0"></span> when the l<span class="_ _0"></span>i<span class="ls3a ws1e0">st of numbers contains </span></div><div class="t m5 xa2 h24 yae1 ffd fsc fc3 sc0 ls6 ws0">0</div><div class="t m0 x4f h15 yae0 ff4 fsb fc3 sc0 ls6 ws0">?</div><div class="t m0 x8b h29 yae2 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 yae3 ff4 fsb fc3 sc0 ls6c ws2c7">Does it work<span class="_ _0"></span> when the l<span class="_ _0"></span>ist is empty?</div><div class="t m0 x35 h15 yad3 ff4 fsb fc3 sc0 ls3a wsb1">These kinds of curiosities are worth <span class="_ _e"></span>writing <span class="ls30 ws167">tests for. They occasionally uncover ques-</span></div><div class="t m0 x35 h15 y73e ff4 fsb fc3 sc0 ls30 ws612">tions you haven’t accounted for in your <span class="ls2e ws613">code, which gives you an opportunity to</span></div><div class="t m0 x35 h15 y73f ff4 fsb fc3 sc0 lsac ws387">address those ques<span class="_ _0"></span>tions before<span class="ls1c ws151"> <span class="_ _0"></span>someone finds out the hard way that a particular use</span></div><div class="t m0 x35 h15 y694 ff4 fsb fc3 sc0 ls1c ws10">case wasn’t considered.</div><div class="t m0 x35 h3b y413 ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>0.0<span class="_"> </span>==<span class="_"> </span>calculate_mean([-1,<span class="_"> </span>0,<span class="_"> </span>1])</div><div class="t m0 x35 h3b yae4 ffd fs18 fc3 sc0 lsb2 ws0">True</div><div class="t m0 x35 h3b y46d ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>0.0<span class="_"> </span>==<span class="_"> </span>calculate_mean([])</div><div class="t m0 x35 h3b y99d ffd fs18 fc3 sc0 lsb2 ws0">Traceback<span class="_"> </span>(most<span class="_"> </span>recent<span class="_"> </span>call<span class="_"> </span>last):</div><div class="t m0 xae h3b y99e ffd fs18 fc3 sc0 lsb2 ws0">File<span class="_"> </span>&quot;&lt;stdin&gt;&quot;,<span class="_"> </span>line<span class="_"> </span>1,<span class="_"> </span>in<span class="_"> </span>&lt;module&gt;</div><div class="t m0 xae h3b y46e ffd fs18 fc3 sc0 lsb2 ws0">File<span class="_"> </span>&quot;&lt;stdin&gt;&quot;,<span class="_"> </span>line<span class="_"> </span>2,<span class="_"> </span>in<span class="_"> </span>calculate_mean</div><div class="t m0 x35 h3b y46f ffd fs18 fc1 sc0 lsb2 ws0">ZeroDivisionError:<span class="_"> </span>division<span class="_"> </span>by<span class="_"> </span>zero</div><div class="t m0 x35 h15 y114 ff4 fsb fc3 sc0 ls81 ws26f">You can fix </div><div class="t m5 xac h24 yae5 ffd fsc fc3 sc0 lsa0 ws0">calculate_m<span class="_ _e"></span>ean</div><div class="t m0 x46 h15 y114 ff4 fsb fc3 sc0 ls3e ws4a"> by returning </div><div class="t m5 x7b h24 yae5 ffd fsc fc3 sc0 ls6 ws0">0</div><div class="t m0 x10d h15 y114 ff4 fsb fc3 sc0 ls34 ws22"> if the list is empty:</div><div class="t m0 x35 h3b y372 ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>def<span class="_"> </span>calculate_mean(numbers):</div><div class="t m0 x35 h3b y985 ffd fs18 fc3 sc0 lsb2 ws0">...<span class="_ _94"> </span>if<span class="_"> </span>not<span class="_"> </span>numbers:</div><div class="t m0 x35 h3b y733 ffd fs18 fc3 sc0 lsb2 ws0">...<span class="_ _95"> </span>return<span class="_"> </span>0</div><div class="t m0 x35 h3b yae6 ffd fs18 fc3 sc0 lsb2 ws0">...<span class="_ _94"> </span>return<span class="_"> </span>sum(numbers)<span class="_"> </span>/<span class="_"> </span>len(numbers)</div><div class="t m0 x35 h3b y71f ffd fs18 fc3 sc0 lsb2 ws0">&gt;&gt;&gt;<span class="_"> </span>0.0<span class="_"> </span>==<span class="_"> </span>calculate_mean([])</div><div class="t m0 x35 h3b y987 ffd fs18 fc1 sc0 lsb2 ws0">True</div><div class="t m0 x35 h15 yae7 ff4 fsb fc3 sc0 ls30 ws0">Great—</div><div class="t m5 xd8 h24 yae8 ffd fsc fc3 sc0 lsa0 ws0">calculate_mea<span class="_ _e"></span>n</div><div class="t m0 xf1 h15 yae7 ff4 fsb fc3 sc0 ls42 ws614"> has passed all the cases we’ve <span class="ls38 ws3e9">thrown at it. Remember that</span></div><div class="t m0 x35 h15 y15b ff4 fsb fc3 sc0 ls20 ws330">unit tests are the foundation that enables succ<span class="ls31 wsb5">ess in larger testing efforts, like end-to-</span></div><div class="t m0 x35 h15 y9e ff4 fsb fc3 sc0 ls2d ws301">end testing. To understand that relationship<span class="ls5e ws14a"> better, we’ll look at two other testing cat-</span></div><div class="t m0 x35 h15 yae9 ff4 fsb fc3 sc0 ls71 ws83">egories in the following sections. </div><div class="t m0 x19 h26 yaea ffc fs15 fc2 sc0 ls18c ws615">5<span class="_ _0"></span>.<span class="_ _0"></span>2<span class="_ _0"></span>.<span class="_ _0"></span>5<span class="_ _11"> </span>Integration testing</div><div class="t m0 x35 h15 y11c ff4 fsb fc3 sc0 ls36 ws2d9">Whereas unit tests are all abou<span class="ls18b ws0">t<span class="_ _1d"></span> m<span class="_ _0"></span>a<span class="_ _1d"></span>k<span class="_ _0"></span>i<span class="_ _1d"></span>n<span class="_ _0"></span>g<span class="_ _1d"></span> s<span class="_ _0"></span>u<span class="_ _1d"></span>r<span class="_ _0"></span>e<span class="_ _1d"></span> th<span class="_ _1d"></span>e<span class="_ _1d"></span> i<span class="_ _0"></span>n<span class="_ _1d"></span>d<span class="_ _0"></span>i<span class="_ _1d"></span>v<span class="_ _0"></span>i<span class="_ _1d"></span>d<span class="_ _0"></span>u<span class="_ _1d"></span>a<span class="_ _0"></span>l<span class="_ _1d"></span> pi<span class="_ _1c"></span>ec<span class="_ _1d"></span>e<span class="_ _1d"></span>s<span class="_ _0"></span> o<span class="_ _1d"></span>f<span class="_ _0"></span> y<span class="_ _1d"></span>o<span class="_ _0"></span>u<span class="_ _1d"></span>r c<span class="_ _1d"></span>o<span class="_ _1d"></span>d<span class="_ _0"></span>e<span class="_ _1d"></span> wo<span class="_ _1c"></span>r<span class="_ _0"></span>k</span></div><div class="t m0 x35 h15 y714 ff4 fsb fc3 sc0 ls71 ws160">as expected, <span class="ff3 ls2c ws616">integration testing</span><span class="ls3a ws5a1"> focuses on making sure th<span class="ls70 ws617">ose units all work in tandem</span></span></div><div class="t m0 x35 h15 y11d ff4 fsb fc3 sc0 ls20 wsac">to produce the right behavior (see figure 5.<span class="ls38 wsc5">3). You may have 10 fully func<span class="_ _0"></span>tional units</span></div><div class="t m0 x35 h15 y11e ff4 fsb fc3 sc0 ls3b ws618">of software, but if they can’t be put to<span class="_ _e"></span>gether<span class="ls48 ws432"> to do what you want, they aren’t t<span class="_ _e"></span>oo use-</span></div><div class="t m0 x35 h15 y11f ff4 fsb fc3 sc0 ls30 ws32c">ful. Whereas end-to-end workflow tests are <span class="ls1e ws124">usually framed from the perspective of a</span></div><div class="t m0 x35 h15 ya8 ff4 fsb fc3 sc0 ls31 ws238">user, integration tests focus mo<span class="ls3a ws12e">re on the behavior of the code. They’re at different lev-</span></div><div class="t m0 x35 h15 y120 ff4 fsb fc3 sc0 ls31 ws25">els of abstraction.</div><div class="t m0 x83 h15 y121 ff4 fsb fc3 sc0 ls38 ws3c6"> Integration testing <span class="ls7d ws619">carries several caveats, though<span class="ls51 ws13e">. Because integration tests need</span></span></div><div class="t m0 x35 h15 y122 ff4 fsb fc3 sc0 ls71 ws46b">to thread multiple pieces of code together<span class="ls42 ws19d">, it’s common to build tests that are struc-</span></div><div class="t m0 x35 h15 y123 ff4 fsb fc3 sc0 lsc5 ws2fd">tured much like th<span class="_ _0"></span>e code they’re testing<span class="_ _0"></span>. <span class="ls36 ws25d">This introduces tight <span class="ls3b ws61a">coupling between the</span></span></div><div class="t m0 x35 h15 y124 ff4 fsb fc3 sc0 ls3b ws80">tests and the code—change<span class="_ _e"></span>s in the code th<span class="ls3a ws61b">at produce the same outcome might still</span></div><div class="c x10b yaeb w9 h56"><div class="t m0 x43 h14 y567 ff12 fs7 fcb sc0 lsde ws61c">Raises a<span class="ff13 ls6 ws0">n</span><span class="lsff ws61d"> exceptio<span class="ff13 ls6 ws0">n</span><span class="ls123 ws61e"> fo<span class="ff13 ls6 ws0">r</span><span class="lsdf ws61f"> a case </span></span></span></div><div class="t m0 x43 h14 y68e ff12 fs7 fcb sc0 lsdf ws2ae">you have<span class="ff13 ls6 ws0">n</span><span class="ls18d ws620">’t co<span class="ff13 ls6 ws0">n<span class="ff12 ls124">side</span>r</span><span class="lsde ws3cf">ed yet</span></span></div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
