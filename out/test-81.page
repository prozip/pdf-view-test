<div id="pf51" class="pf w0 h0" data-page-no="51"><div class="pc pc51 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgf0.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">57<span class="_ _68"></span><span class="ffa">Recognizing the wrong abstraction</span></div><div class="t m0 x35 h15 y40 ff4 fsb fc3 sc0 ls3d ws377">country. You cert<span class="_ _e"></span>ainly can’t change the electrical plugs in France (<span class="_ _e"></span>without someone</div><div class="t m0 x35 h15 y41 ff4 fsb fc3 sc0 ls1e ws8b">getting angry, anyway) and you don’t have a French plug for your devices on-hand. So</div><div class="t m0 x35 h15 y42 ff4 fsb fc3 sc0 ls30 wsbd">even though the travel plug costs <span class="ff17 ls6 ws0">€</span><span class="ls34 ws9f">48 and your first-born, it’s<span class="ls42 ws26e"> less expensive than find-</span></span></div><div class="t m0 x35 h15 y43 ff4 fsb fc3 sc0 ls35 ws506">ing and buying French <span class="_ _0"></span>power supplies for thre<span class="ls5e ws3c9">e or four different devices. In software,</span></div><div class="t m0 x35 h15 y44 ff4 fsb fc3 sc0 ls3e ws351">you can create your own adap<span class="ls3d ws476">ter class that has the inte<span class="ls1b ws358">rface your program expect<span class="_ _e"></span>s,</span></span></div><div class="t m0 x35 h15 y45 ff4 fsb fc3 sc0 ls34 ws507">with code in each of its methods that ma<span class="lsf8 ws508">kes calls to the in<span class="_ _e"></span>compatible thir<span class="_ _e"></span>d-party</span></div><div class="t m0 x35 h15 y46 ff4 fsb fc3 sc0 ls30 ws36">object behind the scenes. </div><div class="t m0 x19 h26 y233 ffc fs15 fc2 sc0 ls153 ws509">3<span class="_ _0"></span>.<span class="_ _0"></span>6<span class="_ _0"></span>.<span class="_ _1d"></span>2<span class="_ _5f"> </span>Clever gets the cleaver</div><div class="t m0 x35 h15 y49 ff4 fsb fc3 sc0 ls36 ws4fc">I’ve gone on about writing code that’s slick,<span class="ls34 ws2c6"> but overly clever solutions can be painful</span></div><div class="t m0 x35 h15 y4a ff4 fsb fc3 sc0 ls2d ws1d">too. If such solutions prov<span class="ls3d ws61">ide too much magic and not en<span class="ls2f ws26a">ough granularity, you might</span></span></div><div class="t m0 x35 h15 y4b ff4 fsb fc3 sc0 ls42 wsc4">find that other developers create their own <span class="ls20 ws251">solutions to get their jobs done, defeating</span></div><div class="t m0 x35 h15 y14b ff4 fsb fc3 sc0 ls31 ws1fd">your effort to provide a single working im<span class="ls38 ws3dd">plementation. Robust software must weigh</span></div><div class="t m0 x35 h15 y4d ff4 fsb fc3 sc0 ls47 ws4aa">the frequency and impact of use cases to<span class="ls3e ws2d"> determine which to accommodate; common</span></div><div class="t m0 x35 h15 y4e ff4 fsb fc3 sc0 ls31 wscd">use cases should be as smooth as possible, whereas rare use cases can be clunky or</div><div class="t m0 x35 h15 y4f ff4 fsb fc3 sc0 ls51 ws23d">explicitly unsupported if need<span class="ls71 wsdf">ed. Your solution should be </span><span class="ff3 ls36">just cle<span class="_ _0"></span>ver enough<span class="ff4 ls1e ws154">, which is</span></span></div><div class="t m0 x35 h15 y50 ff4 fsb fc3 sc0 ls20 ws51">an admittedly hard target to hit.</div><div class="t m0 x83 h15 yed ff4 fsb fc3 sc0 ls38 ws256"> That being said, if something feels awkward or cumbersome, give it some time. If it</div><div class="t m0 x35 h15 y52 ff4 fsb fc3 sc0 ls34 ws9f">still feels awkward or cumbersome<span class="lsae ws418"> after a while,<span class="_ _0"></span> ask others if the<span class="_ _0"></span>y agree. If they<span class="_ _0"></span> say no</span></div><div class="t m0 x35 h15 y53 ff4 fsb fc3 sc0 ls30 ws219">but it <span class="ff3 ls1e ws0">still</span><span class="ls3a ws296"> feels awkward or cumbersome, it’s <span class="ls38 ws180">probably awkward or cumbersome. Go</span></span></div><div class="t m0 x35 h15 y54 ff4 fsb fc3 sc0 ls4e ws1e3">forth and make the <span class="_ _e"></span>world a little better with abstract<span class="_ _e"></span>ion!</div><div class="t m0 x35 h1f y7cc ffc fs13 fc2 sc0 lsa9 ws0">Summary</div><div class="t m0 x8b h29 y7cd ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 y7ce ff4 fsb fc3 sc0 ls2f ws23">Abstraction is a tool for deferrin<span class="ls1c ws10">g obligatory compre</span>hension of code.</div><div class="t m0 x8b h29 y7cf ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 y7d0 ff4 fsb fc3 sc0 ls38 ws50a">Abstraction takes many forms: decomp<span class="ls5b ws50b">osition<span class="_ _e"></span>, encapsulation, pr<span class="_ _e"></span>ogramming</span></div><div class="t m0 x48 h15 y7d1 ff4 fsb fc3 sc0 ls38 ws26">style, and inheritance versus composition.</div><div class="t m0 x8b h29 y7d2 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 y7d3 ff4 fsb fc3 sc0 ls36 ws50c">Each approach to abstraction is usef<span class="ls3d ws50d">ul, but context and extent<span class="_ _e"></span> of use are</span></div><div class="t m0 x48 h15 y7d4 ff4 fsb fc3 sc0 ls31 ws25">important considerations.</div><div class="t m0 x8b h29 y7d5 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 y7d6 ff4 fsb fc3 sc0 ls6b ws1a2">Refactoring is an iterative process; abs<span class="_ _0"></span>t<span class="ls34 ws185">raction that once worked may need to be</span></div><div class="t m0 x48 h15 y7d7 ff4 fsb fc3 sc0 ls4b ws3b">revisited later.</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
