<div id="pfdb" class="pf w0 h0" data-page-no="db"><div class="pc pcdb w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgdb.png"/><div class="t m0 xa0 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">195<span class="_ _37"></span><span class="ffa">Addressi<span class="_ _0"></span>ng coupling</span></div><div class="t m0 x35 h3b y395 ffd fs18 fc3 sc0 lsb2 ws0">class<span class="_"> </span>EditBookmarkCommand(Command):</div><div class="t m0 x87 h3b y396 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>execute(self,<span class="_"> </span>data):</div><div class="t m0 x36 h3b y397 ffd fs18 fc3 sc0 lsb2 ws0">persistence.edit(data[&apos;id&apos;],<span class="_"> </span>data[&apos;update&apos;])</div><div class="t m0 x36 h3b y40d ffd fs18 fc3 sc0 lsb2 ws0">return<span class="_"> </span>True,<span class="_"> </span>None</div><div class="t m0 x35 h15 y44 ff4 fsb fc3 sc0 ls2f wsa2">Bark is now extensible to new use cases li<span class="ls6b ws8a0">ke importing star<span class="_ _0"></span>s from<span class="ls34 ws13b"> GitHub. Its concerns</span></span></div><div class="t m0 x35 h15 y45 ff4 fsb fc3 sc0 ls51 wsbf">are well-separated so that you can reason <span class="ls30 wsef">about the presentation, business logic, and</span></div><div class="t m0 x35 h15 y46 ff4 fsb fc3 sc0 ls36 wsb2">persistence in isolation. It’s now feasible to<span class="_ _0"></span><span class="ls42 ws1d1"> swap any of those layers out to realize dis-</span></div><div class="t m0 x35 h15 ye3 ff4 fsb fc3 sc0 ls51 ws47">tinct new use cases.</div><div class="t m0 x83 h15 y48 ff4 fsb fc3 sc0 ls6b ws967"> You could swap </div><div class="t m5 xba h24 y15dc ffd fsc fc3 sc0 lsa0 ws0">BookmarksData<span class="_ _e"></span>base</div><div class="t m0 x3f h15 y48 ff4 fsb fc3 sc0 ls229 ws0"> f<span class="_ _1f"></span>o<span class="_ _1f"></span>r<span class="_ _20"></span>,<span class="_ _1f"></span> s<span class="_ _20"></span>a<span class="_ _1f"></span>y<span class="_ _20"></span>,<span class="_ _1f"></span> a<span class="_ _1f"></span> </div><div class="t m5 x6e h24 y15dc ffd fsc fc3 sc0 lsa0 ws0">BookmarksStor<span class="_ _e"></span>ageService</div><div class="t m0 xd5 h15 y48 ff4 fsb fc3 sc0 ls71 ws958"> that</div><div class="t m0 x35 h15 y49 ff4 fsb fc3 sc0 ls34 ws968">sends bookmark data via an HTTP API to <span class="ls44 ws969">the cloud. You could also swap in <span class="_ _0"></span>a</span></div><div class="t m5 x35 h24 yf96 ffd fsc fc3 sc0 lsa0 ws0">DummyBookmark<span class="_ _e"></span>sDatabase</div><div class="t m0 xc9 h15 y4a ff4 fsb fc3 sc0 ls48 ws31e"> for testing that only persists bookmarks in memory for the</div><div class="t m0 x35 h15 y5ab ff4 fsb fc3 sc0 lsc9 ws0">d<span class="_ _1d"></span>u<span class="_ _1d"></span>r<span class="_ _1d"></span>a<span class="_ _1d"></span>t<span class="_ _1d"></span>i<span class="_ _1d"></span>o<span class="_ _1c"></span>n<span class="_ _1d"></span> o<span class="_ _1d"></span>f<span class="_ _0"></span> t<span class="_ _1c"></span>h<span class="_ _1d"></span>e<span class="_ _1d"></span> t<span class="_ _1d"></span>e<span class="_ _1d"></span>s<span class="_ _1d"></span>t<span class="_ _1d"></span>s<span class="_ _1d"></span>.<span class="_ _1d"></span> L<span class="_ _1d"></span>o<span class="_ _1d"></span>o<span class="_ _1d"></span>s<span class="_ _1d"></span>e<span class="_ _1d"></span> c<span class="_ _1d"></span>o<span class="_ _1d"></span>u<span class="_ _1d"></span>p<span class="_ _1d"></span>l<span class="_ _1d"></span>i<span class="_ _1d"></span>n<span class="_ _1d"></span>g<span class="_ _1d"></span> i<span class="_ _1d"></span>s<span class="_ _1d"></span> r<span class="_ _1d"></span>i<span class="_ _1d"></span><span class="ls47 ws6c3">fe with opportunitie<span class="_ _e"></span>s!<span class="ls2f ws1c1"> I strongly encourage</span></span></div><div class="t m0 x35 h15 y14b ff4 fsb fc3 sc0 ls42 ws32">you to explore a few of these on<span class="_ _e"></span> your own.</div><div class="t m0 x83 h15 y4d ff4 fsb fc3 sc0 lsae ws96a"> The principles you’ve applied to Bark ca<span class="_ _0"></span>rry over readily to many real-world proj<span class="_ _0"></span>-</div><div class="t m0 x35 h15 y4e ff4 fsb fc3 sc0 ls31 ws376">ects. By applying what you’ve learned here<span class="ls36 ws871"> to your own <span class="_ _0"></span>projects, you’ll be able to</span></div><div class="t m0 x35 h15 y4f ff4 fsb fc3 sc0 ls36 ws47">increase maintainability as well as help othe<span class="ls35 ws24">rs pick up your code and<span class="_ _0"></span> make sense of it.</span></div><div class="t m0 x35 h15 y2b2 ff4 fsb fc3 sc0 ls71 wsd4">I can’t express just how much value this <span class="ls2d ws31">holds as you continue building software.</span></div><div class="t m0 x83 h15 yed ff4 fsb fc3 sc0 ls3a ws296"> In the last part of this book, we’ll recap the breadth of what you’ve learned and</div><div class="t m0 x35 h15 y52 ff4 fsb fc3 sc0 ls34 ws22">look at some recommendations for wh<span class="ls192 ws7e0">at to explore next. See yo<span class="_ _0"></span>u there!</span></div><div class="t m0 x35 h1f y17df ffc fs13 fc2 sc0 lsa9 ws0">Summary</div><div class="t m0 x8b h29 y17e0 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 y17e1 ff4 fsb fc3 sc0 ls4e ws96b">Separate concer<span class="_ _e"></span>ns, encapsulate data an<span class="ls48 ws841">d behaviors, and then creat<span class="_ _e"></span>e shared</span></div><div class="t m0 x48 h15 y17e2 ff4 fsb fc3 sc0 ls31 ws25">abstractions to loosen coupling.</div><div class="t m0 x8b h29 y17e3 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 y17e4 ff4 fsb fc3 sc0 ls51 ws2de">Classes that know and use many details of another class may need to be sub-</div><div class="t m0 x48 h15 y7d0 ff4 fsb fc3 sc0 ls38 ws26">sumed by that class.</div><div class="t m0 x8b h29 y17e5 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x48 h15 y17e6 ff4 fsb fc3 sc0 ls51 wsba">Tight coupling can be addressed by re-e<span class="ls31 wscd">ncapsulation with <span class="ls2f wsce">stronger cohesion,</span></span></div><div class="t m0 x48 h15 y7d3 ff4 fsb fc3 sc0 ls30 wsef">but it can often be well-served by the <span class="ls38 ws24a">introduction of a ne<span class="ls31 ws200">w abstraction shared</span></span></div><div class="t m0 x48 h15 y7d4 ff4 fsb fc3 sc0 lsab wsa8">by both parti<span class="_ _0"></span>es. (For example<span class="_ _0"></span>, a me<span class="ls51 ws23d">nu and a command may rely on the com-</span></div><div class="t m0 x48 h15 y17e7 ff4 fsb fc3 sc0 ls38 ws26">mand returning a status and a resu<span class="ls31 ws25">lt instead of specific messaging.)</span></div><div class="t m0 x83 h15 y17e8 ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x83 h15 y17e9 ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x83 h15 y17ea ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x83 h15 y1d1 ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x83 h15 y15e8 ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x83 h15 y15e9 ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x83 h15 y236 ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x83 h15 y17eb ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x83 h15 ye89 ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x83 h15 y1d6 ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x83 h15 y17ec ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x83 h15 y17ed ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="t m0 x83 h15 y17ee ff4 fsb fc3 sc0 ls6 ws0"> </div><div class="c xcd y17ef we2 h56"><div class="t m0 x12e h14 y68d ff12 fs7 fcb sc0 lsec ws0">pe<span class="ff13 ls6">r</span><span class="ls170">siste<span class="ff13 ls6">n</span><span class="lsee ws2cf">ce.edit takes </span></span></div><div class="t m0 x12e h14 y1435 ff12 fs7 fcb sc0 ls6 ws317">the place of db.update.</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
