<div id="pfb9" class="pf w0 h0" data-page-no="b9"><div class="pc pcb9 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgf0.png"/><div class="t m0 xa0 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">161<span class="_ _e2"></span><span class="ffa">How big should my class/function/module be?</span></div><div class="t m0 x35 h1f y13f ffc fs13 fc2 sc0 ls7e wsd5">How big should my class/function/module be?<span class="_ _e3"></span>9<span class="_ _0"></span>.<span class="_ _1d"></span>1</div><div class="t m0 x35 h15 y1e5 ff4 fsb fc3 sc0 ls38 ws166">Many an online forum on software maintenance conta<span class="_ _0"></span>ins questions of this nature. I</div><div class="t m0 x35 h15 y1e6 ff4 fsb fc3 sc0 ls34 ws2c6">sometimes wonder if we<span class="ls160 ws0"> kee<span class="_ _1d"></span>p ask<span class="_ _1d"></span>ing b<span class="_ _0"></span>ec<span class="_ _0"></span>au<span class="_ _0"></span>se<span class="_ _0"></span> we<span class="_ _0"></span> th<span class="_ _0"></span>in<span class="_ _0"></span>k <span class="ls42 wsc4">eventually we can transcend to</span></span></div><div class="t m0 x35 h15 y13da ff4 fsb fc3 sc0 ls20 ws435">some new plane of understanding, where <span class="_ _e"></span>the <span class="ls31 ws5b2">answer was obvious all along. Each ensuing</span></div><div class="t m0 x35 h15 y13db ff4 fsb fc3 sc0 ls71 wsd4">discussion thread contains a <span class="ls30 wsbd">mix of opinions, anecdotes, <span class="ls21 wsf7">and occasional data points.</span></span></div><div class="t m0 x83 h15 y13dc ff4 fsb fc3 sc0 ls80 ws7ff"> The desire to find a final answer to this <span class="ls7d ws1b2">question isn’t inherent<span class="_ _e"></span>ly bad; it’s useful to</span></div><div class="t m0 x35 h15 y13dd ff4 fsb fc3 sc0 ls51 ws23d">have guidelines and waypoints so you can recognize when you should invest time in</div><div class="t m0 x35 h15 y13de ff4 fsb fc3 sc0 ls51 ws2d9">your code. But it’s also important to u<span class="_ _0"></span>nde<span class="ls2d ws344">rstand the strengths and weaknesses of the</span></div><div class="t m0 x35 h15 y13df ff4 fsb fc3 sc0 ls20 ws51">metrics that we use to approach this quest<span class="_ _e"></span>ion.</div><div class="t m0 x35 h26 y13e0 ffc fs15 fc2 sc0 ls110 ws42b">P<span class="_ _e"></span>hy<span class="_ _e"></span>s<span class="_ _e"></span>i<span class="_ _e"></span>ca<span class="_ _e"></span>l<span class="_ _e"></span> s<span class="_ _e"></span>iz<span class="_ _e"></span>e<span class="_ _28"></span>9.1.1</div><div class="t m0 x35 h15 y13e1 ff4 fsb fc3 sc0 ls3b ws1ee">Some folks attempt<span class="_ _e"></span> to prescribe a line limit <span class="ls3a ws74">for functions, methods, and classes. This</span></div><div class="t m0 x35 h15 y13e2 ff4 fsb fc3 sc0 ls1e ws6b5">metric seems nice because it<span class="ls31 ws2c2">’s readily measurable: “My fu<span class="ls2d ws33c">nction is 17 lines long.” I</span></span></div><div class="t m0 x35 h15 y13e3 ff4 fsb fc3 sc0 ls42 ws1e5">take issue with this approach<span class="ls1c ws42a"> because it can force a deve<span class="_ _e"></span>loper to break up a function</span></div><div class="t m0 x35 h15 y13e4 ff4 fsb fc3 sc0 ls4b ws3b">that is otherwise perf<span class="_ _e"></span>ectly understandable, incre<span class="_ _e"></span>asing cognitive load.</div><div class="t m0 x83 h15 y13e5 ff4 fsb fc3 sc0 ls1e ws13"> If you draw a line in the sand at five lines<span class="ls44 ws53">, a six-line function is suddenly out of the</span></div><div class="t m0 x35 h15 y13e6 ff4 fsb fc3 sc0 ls71 ws353">question. This encourages developers to <span class="ls3d ws89b">play “code golf,” trying to fit the same</span></div><div class="t m0 x35 h15 y13e7 ff4 fsb fc3 sc0 ls4e ws1e3">amount of logic into fewe<span class="_ _e"></span>r lines. Pyth<span class="ls48 ws39">on enables this kind of<span class="_ _e"></span> game too:</span></div><div class="t m0 x35 h3b y13e8 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>valuable_customers(customers):</div><div class="t m0 x87 h3b y13e9 ffd fs18 fc3 sc0 lsb2 ws0">return<span class="_"> </span>[customer<span class="_"> </span>for<span class="_"> </span>customer<span class="_"> </span>in<span class="_"> </span>customers<span class="_"> </span>if<span class="_"> </span>customer.active<span class="_"> </span>and</div><div class="t m0 x35 h51 y13ea ff9 fs15 fc9 sc0 ls6 ws0">➥</div><div class="t m0 xae h51 y13eb ff9 fs15 fc9 sc0 ls6 ws0"> </div><div class="t m0 x83 h3b y13ec ffd fs18 fc1 sc0 lsb2 ws0">sum(account.value<span class="_"> </span>for<span class="_"> </span>account<span class="_"> </span>in<span class="_"> </span>customer.accounts)<span class="_"> </span>&gt;<span class="_"> </span>1_000_000]</div><div class="t m0 x35 h15 ye0f ff4 fsb fc3 sc0 ls160 ws0">We<span class="_ _0"></span>re<span class="_ _0"></span> yo<span class="_ _0"></span>u a<span class="_ _0"></span>bl<span class="_ _0"></span>e t<span class="_ _0"></span>o m<span class="_ _0"></span>ak<span class="_ _0"></span>e s<span class="_ _0"></span>en<span class="_ _0"></span>se<span class="_ _0"></span> of<span class="_ _0"></span> th<span class="_ _0"></span>at<span class="_ _1d"></span> code<span class="_ _0"></span> <span class="ls71 ws483">immediately? It’s not <span class="ls3b ws618">awful, but does mash-</span></span></div><div class="t m0 x35 h15 y13ed ff4 fsb fc3 sc0 ls35 ws24">ing it into one line add value?</div><div class="t m0 x83 h15 y13ee ff4 fsb fc3 sc0 ls1c ws21"> Take a look at a rewritten version, wh<span class="ls1e ws16">ere each cl<span class="_ _0"></span>ause is given its own line:</span></div><div class="t m0 x35 h3b y13ef ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>valuable_customers(customers):</div><div class="t m0 x87 h3b y13f0 ffd fs18 fc3 sc0 lsb2 ws0">return<span class="_"> </span>[</div><div class="t m0 x36 h3b y13f1 ffd fs18 fc3 sc0 lsb2 ws0">customer</div><div class="t m0 x36 h3b y6f2 ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>customer<span class="_"> </span>in<span class="_"> </span>customers</div><div class="t m0 x36 h3b y6f3 ffd fs18 fc3 sc0 lsb2 ws0">if<span class="_"> </span>customer.active</div><div class="t m0 x36 h3b y13f2 ffd fs18 fc3 sc0 lsb2 ws0">and<span class="_"> </span>sum(account.value<span class="_"> </span>for<span class="_"> </span>account<span class="_"> </span>in<span class="_"> </span>customer.accounts)<span class="_"> </span>&gt;<span class="_"> </span>1_000_000</div><div class="t m0 x87 h3b y13f3 ffd fs18 fc1 sc0 ls6 ws0">]</div><div class="t m0 x35 h15 y13f4 ff4 fsb fc3 sc0 lsbc ws1ff">Breaking thing<span class="_ _e"></span>s up logically gives some<span class="_ _e"></span>one <span class="ls1e ws16">reading your code a chance to digest each</span></div><div class="t m0 x35 h15 y13f5 ff4 fsb fc3 sc0 ls3a ws1e0">clause, forming a mental model of<span class="ls38 ws26"> what’s happening as they go.</span></div><div class="t m0 x83 h15 y89a ff4 fsb fc3 sc0 ls1e ws67e"> Another form of the line-limit rule I’ve <span class="ls42 ws89c">seen is that “a class should fit on one</span></div><div class="t m0 x35 h15 ye86 ff4 fsb fc3 sc0 ls25 ws1e1">screen.” This shares some of <span class="ls35 ws2c4">the pai<span class="_ _0"></span>n points with its strict<span class="ls20 ws17">er version, while at the same</span></span></div><div class="t m0 x35 h15 ye87 ff4 fsb fc3 sc0 ls71 wsd4">time being less measurable due to di<span class="ls5e ws57">fferent screen size<span class="ls20 ws17">s and resolutions.</span></span></div><div class="t m0 x83 h15 ye88 ff4 fsb fc3 sc0 ls5e ws4bf"> The spirit of these metrics is to “keep it<span class="ls1c wsa5"> sim<span class="_ _e"></span>ple,” with which I agree. But there are</span></div><div class="t m0 x35 h15 y20b ff4 fsb fc3 sc0 ls7a ws2c3">other ways to defi<span class="_ _0"></span>ne “simple.”</div><div class="t m0 x35 h26 y13f6 ffc fs15 fc2 sc0 ls1f7 ws89d">Single responsibility<span class="_ _e4"></span>9<span class="_ _0"></span>.<span class="_ _0"></span>1<span class="_ _0"></span>.<span class="_ _0"></span>2</div><div class="t m0 x35 h15 y13f7 ff4 fsb fc3 sc0 ls1c ws165">A more open-ended measurement o<span class="_ _e"></span>f the size <span class="ls2f ws40e">of a class, method, or function is how</span></div><div class="t m0 x35 h15 y13f8 ff4 fsb fc3 sc0 ls48 ws712">many different things it does. As you’ve <span class="ls1c ws5d8">learned from separation of<span class="_ _e"></span> <span class="_ _0"></span>concerns, the</span></div><div class="t m0 x35 h15 y13f9 ff4 fsb fc3 sc0 ls80 ws622">ideal number is <span class="_ _e"></span>one. For functions and <span class="ls38 ws764">m<span class="_ _e"></span>ethods, this means performing a single</span></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
