<div id="pfd4" class="pf w0 h0" data-page-no="d4"><div class="pc pcd4 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgd4.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">188</div><div class="t m0 x92 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xd3 h2c y1d0 ffb fs19 fcb sc0 ls158 ws0">HAPTER</div><div class="t m0 xe4 h2b y1cf ffb fs18 fcb sc0 ls1bb ws730"> 10</div><div class="t m0 x2a h2d y80 ffa fs7 fcb sc0 ls6 ws0">Achieving loose coupling</div><div class="t m0 x44 h15 y40 ff4 fsb fc3 sc0 ls2f ws1ed">intended for? The user. You’re handling a <span class="ls34 wsb6">piece of presentation-level information in</span></div><div class="t m0 x44 h15 y41 ff4 fsb fc3 sc0 ls3d ws13d">the business logic layer, which is an exampl<span class="ls2f ws253">e of a leaky abstraction. The presentation</span></div><div class="t m0 x44 h15 y42 ff4 fsb fc3 sc0 ls62 ws3a7">layer should<span class="_ _e"></span> be in charge of what’s sho<span class="_ _e"></span>w<span class="ls2f ws338">n to users. Some of the other commands you</span></div><div class="t m0 x44 h15 y43 ff4 fsb fc3 sc0 ls31 ws25">wrote have this same struct<span class="ls51 ws47">ure, which you’ll fix shortly.</span></div><div class="t m0 x32 h15 y44 ff4 fsb fc3 sc0 ls38 ws472"> Another command, the </div><div class="t m5 x24 h24 y9b8 ffd fsc fc3 sc0 lsa0 ws0">CreateBookmar<span class="_ _e"></span>ksTableCommand</div><div class="t m0 x4a h15 y44 ff4 fsb fc3 sc0 ls42 ws112">, introduces even tighter</div><div class="t m0 x44 h15 y45 ff4 fsb fc3 sc0 ls6 ws948">coupling. The </div><div class="t m5 x38 h24 y9b9 ffd fsc fc3 sc0 lsa0 ws0">Table</div><div class="t m0 x1e h15 y45 ff4 fsb fc3 sc0 ls38 wsf5"> in its name implies the presence of a database, a persistence</div><div class="t m0 x44 h15 y46 ff4 fsb fc3 sc0 ls47 ws38">layer feature, and then the co<span class="_ _e"></span>mmand is refe<span class="ls38 ws1f4">renced when the application starts, in the</span></div><div class="t m0 x44 h15 ye3 ff4 fsb fc3 sc0 ls38 ws1c1">presentation layer. This command spans all <span class="ws3c6">the layers of abstraction you so carefully</span></div><div class="t m0 x44 h15 y48 ff4 fsb fc3 sc0 ls30 ws36">built! Don’t worry, you’ll be able <span class="_ _e"></span>to clean that up soon as well.</div><div class="t m0 x32 h15 y49 ff4 fsb fc3 sc0 ls81 ws949"> Read on to<span class="_ _e"></span> see how this coupli<span class="_ _e"></span>ng can cause proble<span class="_ _e"></span>ms in a real-life situati<span class="_ _e"></span>on and</div><div class="t m0 x44 h15 y4a ff4 fsb fc3 sc0 ls6f ws149">how you should <span class="_ _e"></span>think about tackling <span class="_ _e"></span>it.</div><div class="t m0 x44 h1f y1715 ffc fs13 fc2 sc0 ls225 ws93f">A<span class="_ _e"></span>d<span class="_ _e"></span>dr<span class="_ _e"></span>e<span class="_ _e"></span>s<span class="_ _e"></span>s<span class="_ _e"></span>i<span class="_ _e"></span>ng<span class="_ _e"></span> c<span class="_ _e"></span>o<span class="_ _e"></span>u<span class="_ _e"></span>p<span class="_ _e"></span>l<span class="_ _e"></span>in<span class="_ _e"></span>g<span class="_ _111"></span>10.4</div><div class="t m0 x44 h15 y4d ff4 fsb fc3 sc0 ls30 ws6b8">Imagine now that you’re tasked with taking Bark mobile. (Also imagine phones that</div><div class="t m0 x44 h15 y4e ff4 fsb fc3 sc0 ls6 ws94a">run Python!) You’d lik<span class="_ _e"></span>e to reuse as much of<span class="ls51 ws27d"> Bark’s code as possible to optimize the</span></div><div class="t m0 x44 h15 y4f ff4 fsb fc3 sc0 ls25 ws6d1">experience for users on their phones while maintaining the existing command-line</div><div class="t m0 x44 h15 y2b2 ff4 fsb fc3 sc0 ls3a ws1e0">interface, as shown in figure 10.7.</div><div class="t m0 x32 h15 yed ff4 fsb fc3 sc0 ls2d ws15b"> Addressing new requirements<span class="ls4e ws7f4"> often exposes tightly co<span class="_ _e"></span>upled areas of code. New use</span></div><div class="t m0 x44 h15 y52 ff4 fsb fc3 sc0 ls71 ws83">cases require you to swap out behavior and <span class="ls2e ws44">inevitably uncover the points in your code</span></div><div class="t m0 x44 h15 y53 ff4 fsb fc3 sc0 ls3d ws2c">without flexibility. What will you find <span class="_ _e"></span>in Bark?</div><div class="c x44 y1716 wd4 h154"><div class="t m0 x29 h37 y1717 ff12 fs1d fc12 sc0 ls6 ws0">Different users need different presentations.</div><div class="t m0 x29 h37 y1718 ff12 fs1d fc12 sc0 ls6 ws0">Command-line interfaces work well on</div><div class="t m0 x29 h37 y1719 ff12 fs1d fc12 sc0 ls6 ws0">computers, but graphical applications</div><div class="t m0 x29 h37 y171a ff12 fs1d fc12 sc0 ls6 ws0">often work better on phones.</div><div class="t m0 x11c h36 y171b ff11 fs1c fc12 sc0 ls6 ws0">Command-line</div><div class="t m0 xea h36 y171c ff11 fs1c fc12 sc0 ls6 ws0">interface</div><div class="t m0 x20 h36 y171b ff11 fs1c fc12 sc0 ls6 ws0">Mobile</div><div class="t m0 x4 h36 y171c ff11 fs1c fc12 sc0 ls6 ws0">application</div><div class="t m0 xc1 h36 y171d ff11 fs1c fc12 sc0 ls6 ws0">Database</div><div class="t m0 xea h36 y171e ff11 fs1c fc12 sc0 ls6 ws0">backend</div><div class="t m0 x102 h36 y171d ff11 fs1c fc12 sc0 ls6 ws0">HTTP API</div><div class="t m0 x97 h36 y171e ff11 fs1c fc12 sc0 ls6 ws0">backend</div><div class="t m0 x13e h36 y171f ff11 fs1c fc12 sc0 ls6 ws0">Business</div><div class="t m0 xb5 h36 y1720 ff11 fs1c fc12 sc0 ls6 ws0">logic</div><div class="t m0 x12f h36 y1721 ff11 fs1c fc12 sc0 ls6 ws0">SQLite</div><div class="t m0 x29 h37 y1722 ff12 fs1d fc12 sc0 ls6 ws0">Loosely coupled business logic is often</div><div class="t m0 x29 h37 y1723 ff12 fs1d fc12 sc0 ls6 ws0">the most reusable portion of code because</div><div class="t m0 x29 h37 y1724 ff12 fs1d fc12 sc0 ls6 ws0">it can support a variety of use cases,</div><div class="t m0 x29 h37 y1725 ff12 fs1d fc12 sc0 ls6 ws0">regardless of the technology involved.</div><div class="t m0 x29 h37 y1726 ff12 fs1d fc12 sc0 ls6 ws0">Data persistence varies widely with use</div><div class="t m0 x29 h37 y1727 ff12 fs1d fc12 sc0 ls6 ws0">cases too. Aside from relational databases,</div><div class="t m0 x29 h37 y1728 ff12 fs1d fc12 sc0 ls6 ws0">in-memory caches can be used for data</div><div class="t m0 x29 h37 y1729 ff12 fs1d fc12 sc0 ls6 ws0">access performance, queues can be used</div><div class="t m0 x29 h37 y172a ff12 fs1d fc12 sc0 ls6 ws0">for better reliability<span class="_ _1c"></span>, and so on.</div><div class="t m0 x82 h36 y172b ff11 fs1c fc12 sc0 ls6 ws0">Cloud storage</div><div class="t m0 x20 h36 y172c ff11 fs1c fc12 sc0 ls6 ws0">service</div></div><div class="c x44 y3f w2 h155"><div class="t m0 xea h2b y172d ffb fs18 fcb sc0 ls69 ws44f">How core business logic supports a variety of use cases<span class="_ _112"></span>Figure 10.7</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
