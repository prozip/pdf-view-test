<div id="pfae" class="pf w0 h0" data-page-no="ae"><div class="pc pcae w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgae.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">150</div><div class="t m0 x17 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xa7 h2c y1d0 ffb fs19 fcb sc0 lsf6 ws0">HAPTER</div><div class="t m0 xba h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 8</div><div class="t m0 xe7 h2d y80 ffa fs7 fcb sc0 ls6 ws0">The rules (and exceptions) of inheritance</div><div class="t m0 x44 h15 y40 ff4 fsb fc3 sc0 ls1f ws1ab">What happens when you get to a penguin, or <span class="ls71 ws241">a kiwi, or an ostrich?<span class="ls48 ws4e0"> None of these birds</span></span></div><div class="t m0 x44 h15 y12a1 ff4 fsb fc3 sc0 ls38 ws1f4">fly at all. One possible solution i<span class="_ _0"></span>s to override </div><div class="t m5 x40 h24 y12a2 ffd fsc fc3 sc0 lsa0 ws0">fly</div><div class="t m0 x74 h15 y12a1 ff4 fsb fc3 sc0 ls3b ws70"> in this way:</div><div class="t m0 x44 h3b y12a3 ffd fs18 fc3 sc0 lsb2 ws0">class<span class="_"> </span>Penguin(Bird):</div><div class="t m0 xae h3b y12a4 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>fly(self):</div><div class="t m0 x97 h3b y12a5 ffd fs18 fc1 sc0 lsb2 ws0">print(&apos;no<span class="_"> </span>can<span class="_"> </span>do.&apos;)</div><div class="t m0 x44 h15 y12a6 ff4 fsb fc3 sc0 ls5f ws401">You could also overr<span class="_ _0"></span>ide </div><div class="t m5 xd3 h24 y12a7 ffd fsc fc3 sc0 lsa0 ws0">fly</div><div class="t m0 x116 h15 y12a6 ff4 fsb fc3 sc0 ls67 ws3e7"> to do nothing (</div><div class="t m5 x7b h24 y12a7 ffd fsc fc3 sc0 lsa0 ws0">pass</div><div class="t m0 x74 h15 y12a6 ff4 fsb fc3 sc0 ls36 ws2e7">) or raise an exception of some kind.</div><div class="t m0 x44 h15 y12a8 ff4 fsb fc3 sc0 ls50 ws85b">This goes against t<span class="_ _0"></span>he substitutabil<span class="_ _0"></span>ity<span class="ls7d ws85c"> principle, though. <span class="_ _e"></span>Any code that <span class="ff3 ls31 ws0">knows</span><span class="ls2f ws85d"> it’s dealing</span></span></div><div class="t m0 x44 h15 y12a9 ff4 fsb fc3 sc0 ls42 ws693">with a </div><div class="t m5 x1b h24 y12aa ffd fsc fc3 sc0 lsa0 ws0">Penguin</div><div class="t m0 x37 h15 y12a9 ff4 fsb fc3 sc0 ls35 ws85e"> will be unlikely to call </div><div class="t m5 xd0 h24 y12aa ffd fsc fc3 sc0 lsa0 ws0">fly</div><div class="t m0 x31 h15 y12a9 ff4 fsb fc3 sc0 ls2d ws717"> at all, so that behavior isn’t being used. Again,</div><div class="t m0 x44 h15 y12ab ff4 fsb fc3 sc0 ls38 ws85f">composition of the flying behavi<span class="ls42 ws860">or into classes that need it might be a better choice here. </span></div><div class="t m0 x44 h30 y12ac ffb fsc fc2 sc0 ls6 ws0">E</div><div class="t m0 x1a h5a y12ad ffb fs20 fc2 sc0 ls1ea ws0">XERCISE</div><div class="t m0 x44 h15 y12ae ff4 fsb fc3 sc0 ls1eb wsaa">Now that you know some of<span class="_ _e"></span> the things to look for, try applying the rules for inheritance</div><div class="t m0 x44 h15 y12af ff4 fsb fc3 sc0 ls1ec ws861">and composition to the </div><div class="t m5 xb9 h24 y12b0 ffd fsc fc3 sc0 ls1c7 ws0">Bicycle</div><div class="t m0 x101 h15 y12af ff4 fsb fc3 sc0 lse8 ws862"> example. The bicycle module can be found in the source</div><div class="t m0 x44 h15 y12b1 ff4 fsb fc3 sc0 ls1ed wsb3">code for this<span class="ls1ee ws6d6"> chapter(see <span class="fcc ls1ef ws0">https://github.com/daneah/pr<span class="ls152">a<span class="_ _0"></span>ctices-of-t<span class="_ _0"></span>he-python-<span class="_ _0"></span>pro<span class="fc3 ls137">).</span></span></span></span></div><div class="t m0 x32 h15 y12b2 ff4 fsb fc3 sc0 ls9e ws863"> How well does the </div><div class="t m5 x16 h24 y12b3 ffd fsc fc3 sc0 lsa0 ws0">Bicycle</div><div class="t m0 x59 h15 y12b2 ff4 fsb fc3 sc0 ls1c ws217"> example follow the rules for inheritance that<span class="_ _e"></span> Metz</div><div class="t m0 x44 h15 y12b4 ff4 fsb fc3 sc0 ls38 ws24a">describes? See if you can tell whether the <span class="ls1e ws299">objects in the bic<span class="_ _0"></span>ycle module do or do not</span></div><div class="t m0 x44 h15 y12b5 ff4 fsb fc3 sc0 ls34 ws22">follow each of the rules.</div><div class="t m0 x32 h15 y12b6 ff4 fsb fc3 sc0 ls44 ws53"> Come back here to see how<span class="_ _0"></span> you did:</div><div class="t m0 x86 h29 y12b7 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m5 x87 h24 y573 ffd fsc fc3 sc0 lsa0 ws0">Frame</div><div class="t m0 x15 h15 y1a4 ff4 fsb fc3 sc0 ls5f ws864"> and </div><div class="t m5 xad h24 y573 ffd fsc fc3 sc0 lsa0 ws0">Tire</div><div class="t m0 xd6 h15 y1a4 ff4 fsb fc3 sc0 ls34 ws185"> both have a narrow, shallow hier<span class="ls71">archy; they each have one level</span></div><div class="t m0 x87 h15 y12b8 ff4 fsb fc3 sc0 ls71 wsd4">below them, with at most two subclasses.</div><div class="t m0 x86 h29 y12b9 ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 y12ba ff4 fsb fc3 sc0 ls1e ws16">The different types of tires and frames don’t depend on any other objects.</div><div class="t m0 x86 h29 y12bb ffe fs17 fca sc0 ls6 ws0"></div><div class="t m0 x87 h15 yd52 ff4 fsb fc3 sc0 ls1c ws10">The different types of tires and frames use <span class="ls48 ws39">or specialize all the behavior of the<span class="_ _e"></span>ir</span></div><div class="t m0 x87 h15 ycd3 ff4 fsb fc3 sc0 ls42 ws0">superclasses.</div><div class="t m0 x44 h15 y12bc ff4 fsb fc3 sc0 ls36 ws29e">Success! The model you crea<span class="ls42 ws105">ted uses inheritance properly where needed, and uses</span></div><div class="t m0 x44 h15 y12bd ff4 fsb fc3 sc0 ls48 ws4b8">composition to bring different pieces togethe<span class="_ _e"></span>r<span class="ls42 ws27b"> into a whole. Read on to see what tools</span></div><div class="t m0 x44 h15 y12be ff4 fsb fc3 sc0 ls1e ws16">Python provides for inspecting and using inheritance. </div><div class="t m0 x44 h1f y12bf ffc fs13 fc2 sc0 ls148 ws0">Inheritance in Python<span class="_ _dc"></span>8<span class="_ _1d"></span>.3</div><div class="t m0 x44 h15 y13c ff4 fsb fc3 sc0 ls3b ws20c">Python provides a set of tools for ex<span class="_ _e"></span>amin<span class="ls3a ws296">ing classes and their <span class="ls2f ws303">inheritance structure,</span></span></div><div class="t m0 x44 h15 y12c0 ff4 fsb fc3 sc0 ls34 ws203">along with a number of ways to approach <span class="ls51 ws13e">inheritance and composition. This section</span></div><div class="t m0 x44 h15 y12c1 ff4 fsb fc3 sc0 ls7c ws0">wi<span class="_ _e"></span>ll<span class="_ _e"></span> co<span class="_ _e"></span>ve<span class="_ _e"></span>r ea<span class="_ _e"></span>ch<span class="_ _e"></span> of<span class="_ _e"></span> th<span class="_ _e"></span>em<span class="_ _e"></span> so<span class="_ _e"></span> th<span class="_ _e"></span>at w<span class="_ _e"></span>he<span class="_ _e"></span>n y<span class="_ _e"></span>ou<span class="_ _e"></span> do<span class="_ _e"></span> us<span class="_ _e"></span>e in<span class="_ _e"></span>he<span class="_ _e"></span>ri<span class="_ _e"></span>ta<span class="_ _e"></span>nc<span class="_ _e"></span>e,<span class="_ _e"></span> you<span class="_ _e"></span>’l<span class="_ _e"></span>l h<span class="_ _e"></span>av<span class="_ _e"></span>e t<span class="_ _e"></span>he<span class="_ _e"></span> kno<span class="_ _e"></span>w-<span class="_ _e"></span>ho<span class="_ _e"></span>w</div><div class="t m0 x44 h15 y1165 ff4 fsb fc3 sc0 ls79 wsf6">to debug and t<span class="_ _e"></span>est your code.</div><div class="t m0 x44 h26 y12c2 ffc fs15 fc2 sc0 ls107 ws328">Type inspection<span class="_ _d4"></span>8<span class="_ _1d"></span>.3<span class="_ _1d"></span>.1</div><div class="t m0 x44 h15 y12c3 ff4 fsb fc3 sc0 lsb3 ws0">O<span class="_ _25"></span>n<span class="_ _1c"></span>e<span class="_ _1d"></span> o<span class="_ _25"></span>f<span class="_ _1c"></span> t<span class="_ _1c"></span>h<span class="_ _1c"></span>e<span class="_ _1c"></span> m<span class="_ _1c"></span>o<span class="_ _1c"></span>s<span class="_ _1c"></span>t<span class="_ _1c"></span> c<span class="_ _1c"></span>o<span class="_ _1c"></span>m<span class="_ _1c"></span>m<span class="_ _1c"></span>o<span class="_ _1c"></span>n<span class="_ _1c"></span> t<span class="_ _1d"></span>h<span class="_ _25"></span>i<span class="_ _1c"></span>n<span class="_ _1c"></span>g<span class="_ _1c"></span>s<span class="_ _1c"></span> y<span class="_ _1c"></span>o<span class="_ _1c"></span>u<span class="_ _1c"></span>’<span class="_ _1c"></span>l<span class="_ _1c"></span>l<span class="_ _1c"></span> w<span class="_ _1c"></span>a<span class="_ _1c"></span>n<span class="_ _1c"></span>t<span class="_ _1c"></span> t<span class="_ _1c"></span>o<span class="_ _1c"></span> k<span class="_ _1c"></span>n<span class="_ _1c"></span>o<span class="_ _1c"></span>w<span class="_ _1c"></span> w<span class="_ _1c"></span>h<span class="_ _1c"></span>e<span class="_ _1c"></span>n<span class="_ _1c"></span> d<span class="_ _1c"></span>e<span class="_ _1c"></span>b<span class="_ _1c"></span>u<span class="_ _1c"></span>g<span class="_ _1c"></span>g<span class="_ _1c"></span>i<span class="_ _1c"></span>n<span class="_ _1c"></span>g<span class="_ _1c"></span> y<span class="_ _1c"></span>o<span class="_ _1c"></span>u<span class="_ _1c"></span>r<span class="_ _1d"></span> c<span class="_ _25"></span>o<span class="_ _1c"></span>d<span class="_ _1c"></span>e<span class="_ _1c"></span> i<span class="_ _1c"></span>s</div><div class="t m0 x44 h15 y127d ff4 fsb fc3 sc0 ls3d ws2c0">what type of object you’re dealing with on<span class="ls25 ws5ef"> a particular line. Python’s <span class="_ _0"></span>dynamic typing</span></div><div class="t m0 x44 h15 y3a6 ff4 fsb fc3 sc0 ls31 ws25">means this isn’t always immediately obvi<span class="ls3d ws2c">ous, so it’s a good<span class="_ _e"></span> thing to inspect.</span></div><div class="c x44 y3f w2 h10e"><div class="t m0 xb7 h2f y12c4 ffb fs15 fc2 sc0 ls151 ws865">Type checking </div><div class="t m0 xb7 h30 y12c5 fff fsc fc3 sc0 ls1f0 ws866">The latest versions of Python<span class="_ _0"></span> support <span class="ff10 ls1f1 ws867">type hinting</span><span class="ls1f2 ws868">, which is a wa<span class="_ _e"></span>y to tell developers and</span></div><div class="t m0 xb7 h30 y12c6 fff fsc fc3 sc0 ls1f3 ws869">automated tooling what types of ob<span class="_ _0"></span>jects a <span class="ws86a">function o<span class="_ _0"></span>r method ex<span class="ls1f4 ws86b">pects. Tools can check</span></span></div><div class="t m0 xb7 h30 y12c7 fff fsc fc3 sc0 ls1f5 ws86c">for calls that might viola<span class="_ _0"></span>te these types, wi<span class="_ _0"></span><span class="ls1f6 ws86d">thout executing your code. Note <span class="_ _0"></span>that Python</span></div><div class="t m0 xb7 h30 y12c8 fff fsc fc3 sc0 ls1f0 ws86e">doesn’t enforce the types during execution; <span class="ws0">this fe<span class="_ _0"></span>ature is strictly a development aid.</span></div></div><a class="l" href="https://github.com/daneah/practices-of-the-python-pro"><div class="d m2" style="border-style:none;position:absolute;left:201.660000px;bottom:438.998000px;width:241.800000px;height:11.280000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
