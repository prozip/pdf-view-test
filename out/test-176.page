<div id="pfb0" class="pf w0 h0" data-page-no="b0"><div class="pc pcb0 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgb0.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">152</div><div class="t m0 x17 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xa7 h2c y1d0 ffb fs19 fcb sc0 lsf6 ws0">HAPTER</div><div class="t m0 xba h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 8</div><div class="t m0 xe7 h2d y80 ffa fs7 fcb sc0 ls6 ws0">The rules (and exceptions) of inheritance</div><div class="t m0 x44 h3b y395 ffd fs18 fc3 sc0 lsb2 ws0">class<span class="_"> </span>CorruptTeller(Teller):</div><div class="t m0 xae h3b y396 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>__init__(self):</div><div class="t m0 x97 h3b y397 ffd fs18 fc3 sc0 lsb2 ws0">self.coffers<span class="_"> </span>=<span class="_"> </span>0</div><div class="t m0 xae h3b y483 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>deposit(self,<span class="_"> </span>amount,<span class="_"> </span>account):</div><div class="t m0 x97 h3b y484 ffd fs18 fc3 sc0 lsb2 ws0">self.coffers<span class="_"> </span>+=<span class="_"> </span>amount<span class="_"> </span>*<span class="_"> </span>0.01</div><div class="t m0 x97 h3b y569 ffd fs18 fc3 sc0 lsb2 ws0">super().deposit(amount<span class="_"> </span>*<span class="_"> </span>0.99,<span class="_"> </span>account)</div><div class="t m0 x44 h15 y40f ff4 fsb fc3 sc0 ls71 ws241">Code that uses </div><div class="t m5 xe6 h24 y12db ffd fsc fc3 sc0 lsa0 ws0">super()</div><div class="t m0 xba h15 y40f ff4 fsb fc3 sc0 ls1e ws225"> can become particularly confusin<span class="ls42 ws8c">g if substitutability is broken.</span></div><div class="t m0 x44 h15 y410 ff4 fsb fc3 sc0 ls3d ws53f">Overriding methods to take different numb<span class="ls36 ws33b">ers of arguments, and passing only some</span></div><div class="t m0 x44 h15 y56b ff4 fsb fc3 sc0 ls1c wsa5">of them along using </div><div class="t m5 x8e h24 y56c ffd fsc fc3 sc0 lsa0 ws0">super()</div><div class="t m0 x68 h15 y56b ff4 fsb fc3 sc0 ls2d wsbc">, can lead to confusion and poor maintainability. Substi-</div><div class="t m0 x44 h15 y56d ff4 fsb fc3 sc0 lsbc ws1ff">tutability becom<span class="_ _e"></span>es particularly importan<span class="_ _e"></span>t in the case of <span class="ff3 ls71 wsd4">multiple inheritance</span><span class="ls5e ws14a"> in Python. </span></div><div class="t m0 x42 h26 y12dc ffc fs15 fc2 sc0 lsad ws1be">8<span class="_ _0"></span>.<span class="_ _0"></span>3<span class="_ _0"></span>.<span class="_ _0"></span>3<span class="_ _11"> </span>Multiple inheritance and method resolution order</div><div class="t m0 x44 h15 y843 ff4 fsb fc3 sc0 ls34 ws10e">Up to now, I’ve most<span class="ls2d ws1e9">ly been discussing <span class="ff3 ls2f ws0">single</span><span class="ls51 ws4a1"> inheritance, where a subclass has pre-</span></span></div><div class="t m0 x44 h15 yfd0 ff4 fsb fc3 sc0 ls20 ws40a">cisely one superclass. But Python<span class="ls31 wse8"> also supports the idea of <span class="ff3 ls8d ws870">multiple inhe<span class="_ _e"></span>ritance</span><span class="ls79 ws6c5">, where a</span></span></div><div class="t m0 x44 h15 yeb ff4 fsb fc3 sc0 ls3a ws28">subclass may have two or more direct <span class="ls31 ws25">superclasses, as <span class="_ _e"></span>sh<span class="ls129 ws5a3">ow<span class="_ _0"></span>n in figure 8.5.</span></span></div><div class="t m0 x32 h15 y93 ff4 fsb fc3 sc0 ls34 ws58e"> Multiple inheritance has uses within pl<span class="ls36 ws871">ugin architectures or when you want to</span></div><div class="t m0 x44 h15 yc6c ff4 fsb fc3 sc0 ls34 ws182">implement multiple interfaces in one class.<span class="ls2f ws303"> For example, an aquatic vehicle has the</span></div><div class="t m0 x44 h15 yc6e ff4 fsb fc3 sc0 ls2f ws23">interfaces of both a boat and a car.</div><div class="t m0 x32 h15 yc6f ff4 fsb fc3 sc0 ls36 wsb2"> You can inherit from multiple classes in a subclass by providing more than one in</div><div class="t m0 x44 h15 yc8 ff4 fsb fc3 sc0 ls42 ws27b">the class definition, as shown in listing 8.3. <span class="ls2d ws301">Place this code in a <span class="_ _e"></span>“cats” module to give it</span></div><div class="c x63 y12dd w9f h110"><div class="t m0 x134 h14 y12de ff12 fs7 fcb sc0 ls105 ws325">A co<span class="ff13 ls123 ws0">rr</span><span class="lsde ws3cf">upt telle<span class="ff13 ls6 ws0">r</span><span class="lsfd ws31a"> is-a telle<span class="ff13 ls6 ws0">r<span class="ff12">.</span></span></span></span></div></div><div class="c xf y12df wa0 hb3"><div class="t m0 xe0 h14 y12e0 ff12 fs7 fcb sc0 ls11a ws872">The co<span class="ff13 ls123 ws0">rr</span><span class="ls105 ws327">upt telle<span class="ff13 ls6 ws0">r</span><span class="lsf2 ws38a"> ove<span class="ff13 ls123 ws0">rr<span class="ff12 lsee">ides </span></span></span></span></div><div class="t m0 xe0 h14 y12e1 ff12 fs7 fcb sc0 lsee ws2cf">the default deposit behavio<span class="ff13 ls6 ws0">r<span class="ff12">.</span></span></div></div><div class="c x50 y12e2 w23 h6f"><div class="t m0 x12e h14 y12e3 ff12 fs7 fcb sc0 ls11a ws872">The co<span class="ff13 ls103 ws0">rr</span><span class="ls105 ws325">upt telle<span class="ff13 ls6 ws0">r</span><span class="ls119 ws3a3"> sk<span class="_ _0"></span>i<span class="ff13 ls6 ws0">m</span><span class="lsd8 ws2a9">s a </span></span></span></div><div class="t m0 x12e h14 y390 ff12 fs7 fcb sc0 ls105 ws327">little off the top fo<span class="ff13 ls6 ws0">r<span class="_ _0"></span><span class="ff12 ls16d ws873"> hi<span class="ff13 ls6 ws0">m<span class="ff12 ls105">self.</span></span></span></span></div></div><div class="c x135 y12e4 w3a h111"><div class="t m0 x128 h14 y9fb ff12 fs7 fcb sc0 lsd5 ws2d2">He deposits the <span class="ff13 ls6 ws0">r</span><span class="lsff ws38b">est the way a<span class="ff13 ls6 ws0">n</span><span class="lsd2 ws38c">y telle<span class="ff13 ls6 ws0">r</span></span></span></div><div class="t m0 x11a h14 ydaf ff12 fs7 fcb sc0 ls88 ws314">does, but usi<span class="ff13 ls6 ws0">n</span><span class="lsd8 ws2a9">g a diffe<span class="ff13 ls6 ws0">r<span class="ff12">e</span>n</span><span class="lsd2 ws35c">t a<span class="ff13 ls6 ws0">m<span class="ff12 ls127">ou</span>n</span><span class="ws0">t.</span></span></span></div></div><div class="c x44 y12e5 wa1 h112"><div class="t m0 x35 h5f y12e6 ff15 fs1c fc12 sc0 ls6 ws0">Frame</div><div class="t m0 x7e h5f y12e7 ff15 fs1c fc12 sc0 ls6 ws0">WoodFrame</div><div class="t m0 x1d h5f y12e8 ff15 fs1c fc12 sc0 ls6 ws0">SyntheticFrame<span class="_ _62"> </span>CarbonFiberFrame</div><div class="t m0 x12c h5f y12e9 ff15 fs1c fc12 sc0 ls6 ws0">BigCat<span class="_ _de"> </span>Liger</div><div class="t m0 x8e h5f y12ea ff15 fs1c fc12 sc0 ls6 ws0">Lion</div><div class="t m0 x67 h5f y12eb ff15 fs1c fc12 sc0 ls6 ws0">Tiger</div><div class="t m0 x0 h37 y12ec ff12 fs1d fc12 sc0 ls6 ws0">In single inheritance, there’s a single</div><div class="t m0 x0 h37 y12ed ff12 fs1d fc12 sc0 ls6 ws0">common ancestor for all subclasses.</div><div class="t m0 x121 h37 y12ee ff12 fs1d fc12 sc0 ls6 ws0">Each subclass inherits from</div><div class="t m0 x121 h37 y12ef ff12 fs1d fc12 sc0 ls6 ws0">exactly one superclass.</div><div class="t m0 x0 h37 y12f0 ff12 fs1d fc12 sc0 ls6 ws0">In multiple inheritance, a subclass</div><div class="t m0 x0 h37 y12f1 ff12 fs1d fc12 sc0 ls6 ws0">may inherit from multiple classes,</div><div class="t m0 x0 h37 y12f2 ff12 fs1d fc12 sc0 ls6 ws0">which may themselves inherit from</div><div class="t m0 x0 h37 y12f3 ff12 fs1d fc12 sc0 ls6 ws0">multiple classes (or a single class).</div></div><div class="c x44 y3f w2 h113"><div class="t m0 x2 h2b y12f4 ffb fs18 fcb sc0 ls17 ws43c">Single and multiple inheritance<span class="_ _df"></span>Figure 8.5</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
