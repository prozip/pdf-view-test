<div id="pf56" class="pf w0 h0" data-page-no="56"><div class="pc pc56 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg56.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">62</div><div class="t m0 x67 h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xb1 h2c y1d0 ffb fs19 fcb sc0 ls158 ws0">HAPTER</div><div class="t m0 xb6 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 4</div><div class="t m0 x101 h2d y80 ffa fs7 fcb sc0 ls6 ws0">Designing for high performance</div><div class="t m0 x44 h30 y857 ffb fsc fc2 sc0 ls6 ws0">P</div><div class="t m0 x1a h5a y858 ffb fs20 fc2 sc0 ls161 ws0">ROPORTIONAL</div><div class="t m0 x21 h30 y857 ffb fsc fc2 sc0 ls6 ws0"> </div><div class="t m0 xc3 h5a y858 ffb fs20 fc2 sc0 ls162 ws0">TO</div><div class="t m0 x38 h30 y857 ffb fsc fc2 sc0 ls6 ws0"> </div><div class="t m0 x1d h5a y858 ffb fs20 fc2 sc0 ls162 ws0">THE</div><div class="t m0 x3a h30 y857 ffb fsc fc2 sc0 ls6 ws0"> </div><div class="t m0 x114 h5a y858 ffb fs20 fc2 sc0 ls163 ws0">SQUARE</div><div class="t m0 x44 h15 y859 ff4 fsb fc3 sc0 ls3a wsa7">Another type of time complexity is proportional to the <span class="ff3 ls63 ws0">square<span class="_ _e"></span></span><span class="ls42 wsde"> of the inputs (<span class="ff3 ls6 ws0">O<span class="ff4">(</span>n</span></span></div><div class="t m0 xdb h31 y85a ff4 fs1a fc3 sc0 ls6 ws0">2</div><div class="t m0 xcf h15 y859 ff4 fsb fc3 sc0 ls79 ws0">)).</div><div class="t m0 x44 h15 y85b ff4 fsb fc3 sc0 ls1c ws151">This crops up in cases where, <span class="ls3b ws265">for each item in a list, you need to look at every other</span></div><div class="t m0 x44 h15 y63b ff4 fsb fc3 sc0 ls30 wsef">item in the list. As you <span class="_ _e"></span>add more inputs, your code has to iterate over the additio<span class="_ _e"></span>nal</div><div class="t m0 x44 h15 y85c ff4 fsb fc3 sc0 ls38 ws33e">items, but it also needs to iterate ov<span class="ls1c ws208">er those additional items on <span class="_ _e"></span>each of <span class="ff3 ls6d ws0">those</span><span class="ls31 ws2b7"> itera-</span></span></div><div class="t m0 x44 h15 y85d ff4 fsb fc3 sc0 ls3d ws61">tions. The increase in exec<span class="ls2f ws23">ution time is compounded.</span></div><div class="t m0 x32 h15 y85e ff4 fsb fc3 sc0 ls7f ws0"> Y<span class="_ _1c"></span>o<span class="_ _1d"></span>u<span class="_ _1d"></span> c<span class="_ _1d"></span>a<span class="_ _1d"></span>n<span class="_ _1c"></span> s<span class="_ _1d"></span>p<span class="_ _1d"></span>o<span class="_ _1d"></span>t<span class="_ _1c"></span> t<span class="_ _1d"></span>h<span class="_ _1d"></span>i<span class="_ _1d"></span>s<span class="_ _1c"></span> i<span class="_ _1d"></span>n<span class="_ _1d"></span> P<span class="_ _1d"></span>y<span class="_ _1c"></span>t<span class="_ _1d"></span>h<span class="_ _1d"></span>o<span class="_ _1d"></span>n<span class="_ _1d"></span> c<span class="_ _1c"></span>o<span class="_ _1d"></span>d<span class="_ _1d"></span>e<span class="_ _1d"></span> b<span class="_ _1d"></span>y<span class="_ _1c"></span> t<span class="_ _1d"></span>h<span class="_ _1d"></span>e<span class="_ _1d"></span> p<span class="_ _1c"></span>r<span class="_ _1d"></span>e<span class="_ _1d"></span>s<span class="_ _1d"></span>e<span class="_ _1d"></span>n<span class="_ _1c"></span>c<span class="_ _1d"></span>e<span class="_ _1d"></span> o<span class="_ _1d"></span>f<span class="_ _1c"></span> n<span class="_ _1d"></span>e<span class="_ _1d"></span>s<span class="_ _1d"></span>t<span class="_ _1c"></span>e<span class="_ _1d"></span>d<span class="_ _1d"></span> l<span class="_ _1d"></span>o<span class="_ _1d"></span>o<span class="_ _1c"></span>p<span class="_ _1d"></span>s<span class="_ _1d"></span>.<span class="_ _1d"></span> T<span class="_ _1d"></span>h<span class="_ _1c"></span>e<span class="_ _1d"></span> f<span class="_ _1d"></span>o<span class="_ _1d"></span>l<span class="_ _1c"></span>l<span class="_ _1d"></span>o<span class="_ _1d"></span>w<span class="_ _1d"></span>i<span class="_ _1c"></span>n<span class="_ _1d"></span>g</div><div class="t m0 x44 h15 y85f ff4 fsb fc3 sc0 ls34 ws22">code checks if a list has any duplicate items:</div><div class="t m0 x44 h3b y860 ffd fs18 fc3 sc0 lsb2 ws0">def<span class="_"> </span>has_duplicates(sequence):</div><div class="t m0 xae h3b y861 ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>index1,<span class="_"> </span>item1<span class="_"> </span>in<span class="_"> </span>enumerate(sequence):</div><div class="t m0 x97 h3b y862 ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>index2,<span class="_"> </span>item2<span class="_"> </span>in<span class="_"> </span>enumerate(sequence):</div><div class="t m0 xc3 h3b y863 ffd fs18 fc3 sc0 lsb2 ws0">if<span class="_"> </span>item1<span class="_"> </span>==<span class="_"> </span>item2<span class="_"> </span>and<span class="_"> </span>index1<span class="_"> </span>!=<span class="_"> </span>index2:</div><div class="t m0 x28 h3b y864 ffd fs18 fc3 sc0 lsb2 ws0">return<span class="_"> </span>True</div><div class="t m0 xae h3b y865 ffd fs18 fc1 sc0 lsb2 ws0">return<span class="_"> </span>False</div><div class="t m0 x44 h15 y866 ff3 fsb fc3 sc0 ls6 ws0">O<span class="ff4">(</span>n</div><div class="t m0 x3c h31 y867 ff4 fs1a fc3 sc0 ls6 ws0">2</div><div class="t m0 xae h15 y866 ff4 fsb fc3 sc0 ls7a ws52d">) is the <span class="ff3 lsae ws52e">worst case</span><span class="ls20 ws2dd"> for this code because even if only the last items are duplicates, or</span></div><div class="t m0 x44 h15 y868 ff4 fsb fc3 sc0 ls7a ws446">if no duplicates ex<span class="_ _0"></span>ist, the code<span class="ls48 ws52f"> still has to iterate over all the inputs before it finishes.</span></div><div class="t m0 x44 h15 y869 ff4 fsb fc3 sc0 ls44 ws530">If the first two items are duplicates, the code wil<span class="_ _0"></span>l be much faster because it can stop</div><div class="t m0 x44 h15 y86a ff4 fsb fc3 sc0 ls20 wsd8">immediately, but it’s useful to examine t<span class="_ _e"></span>he worst case to get a better sense for what the</div><div class="t m0 x44 h15 y86b ff4 fsb fc3 sc0 lsac ws531">code is capa<span class="_ _0"></span>ble of. Big<span class="_ _0"></span> O notation always<span class="_ _0"></span> measures the w<span class="_ _0"></span>orst-case comp<span class="_ _0"></span>lexity of code</div><div class="t m0 x44 h15 y86c ff4 fsb fc3 sc0 ls5e ws14a">for this reason.</div><div class="t m0 x20 h30 y86d ffb fsc fc2 sc0 ls6 ws0"> </div><div class="c xb6 y86e w35 h8a"><div class="t m0 xf9 h14 y86f ff12 fs7 fcb sc0 lsd4 ws205">The oute<span class="ff13 ls6 ws0">r</span><span class="lsda ws2aa"> loop ite<span class="ff13 ls6 ws0">r</span><span class="lse0 ws389">ates ove<span class="ff13 ls6 ws0">r</span></span></span></div><div class="t m0 xc7 h14 y5a7 ff12 fs7 fcb sc0 lsd5 ws0">eve<span class="ff13 ls6">r</span><span class="ls13c ws46f">y ele</span><span class="ff13 ls6">m<span class="ff12">e</span>n</span><span class="ls146 ws4b3">t i</span><span class="ff13 ls6">n</span><span class="lsda ws2aa"> the seque</span><span class="ff13 ls6">n<span class="ff12">ce.</span></span></div></div><div class="c x10e y870 w9 h8b"><div class="t m0 x43 h14 y871 ff12 fs7 fcb sc0 ls113 ws459">The i<span class="ff13 ls145 ws0">nn<span class="ff12 ls6">e<span class="ff13">r</span><span class="lsda ws2aa"> loop ite</span><span class="ff13">r</span><span class="ls88 ws314">ates ove</span><span class="ff13">r</span> </span></span></div><div class="t m0 x43 h14 y872 ff12 fs7 fcb sc0 lsd5 ws0">eve<span class="ff13 ls6">r<span class="ff12 ws3a5">y ele</span>m<span class="ff12">e</span>n</span><span class="ls105 ws327">t agai</span><span class="ff13 ls6">n</span><span class="ls116 ws3a1">, fo</span><span class="ff13 ls6">r</span><span class="ls105 ws325"> each </span></div><div class="t m0 x43 h14 y873 ff12 fs7 fcb sc0 ls6 ws0">ele<span class="ff13">m</span>e<span class="ff13">n</span><span class="lsd2 ws35c">t i</span><span class="ff13">n</span><span class="ls146 ws4b3"> the oute<span class="_ _e"></span></span><span class="ff13">r</span><span class="lsdc ws2ac"> loop.</span></div></div><div class="c x60 y874 w36 h8c"><div class="t m0 xc8 h14 y875 ff12 fs7 fcb sc0 lsd2 ws39b">Checks if two ele<span class="ff13 ls6 ws0">m<span class="ff12">e</span>n</span><span class="lsec ws532">ts a<span class="ff13 ls6 ws0">r<span class="ff12">e </span></span></span></div><div class="t m0 xc8 h14 y876 ff12 fs7 fcb sc0 ls88 ws2d0">the sa<span class="ff13 ls6 ws0">m</span><span class="lsdc ws2ac">e value, but <span class="ff13 ls6 ws0">n<span class="ff12 lsef">ot </span></span></span></div><div class="t m0 xc8 h14 y877 ff12 fs7 fcb sc0 ls88 ws2d0">the sa<span class="ff13 ls6 ws0">m</span><span class="lsdc ws2ac">e specific ele<span class="ff13 ls6 ws0">m<span class="ff12">e</span>n<span class="ff12 lsd2">t </span></span></span></div><div class="t m0 xc8 h14 y878 ff12 fs7 fcb sc0 ls6 ws0">f<span class="ff13">r</span>o<span class="ff13">m</span><span class="lsd5 ws2d2"> the seque</span><span class="ff13">n</span>ce</div></div><div class="c x44 y879 w2 h8d"><div class="t m0 xb7 h2f y87a ffb fs15 fc2 sc0 ls164 ws468">Additional<span class="_ _0"></span> notations</div><div class="t m0 xb7 h30 y87b fff fsc fc3 sc0 ls165 ws533">It’s sometimes useful to calculate<span class="_ _e"></span> not only the <span class="ff10 ls166 ws0">worst</span><span class="ls157 ws534"> case b<span class="_ _e"></span>ut also the <span class="ff10 ls166 ws0">average</span><span class="lsd1 ws535"> case</span></span></div><div class="t m0 xb7 h30 y87c fff fsc fc3 sc0 ls167 ws536">and the <span class="ff10 ls6 ws0">best</span><span class="ls157 ws537"> case. Big <span class="ff1a ls6 ws0">Ω</span><span class="ls98 ws538"> (big ome<span class="_ _e"></span>ga) notation is used for best-case analysis,<span class="_ _e"></span> and big</span></span></div><div class="t m0 xb7 h30 y87d ff1a fsc fc3 sc0 ls6 ws0">θ<span class="fff ls165 ws539"> (big theta) notation is used to<span class="_ _e"></span> express <span class="ls90 ws1df">that the upper and lower b<span class="_ _e"></span>ounds are of the</span></span></div><div class="t m0 xb7 h30 y87e fff fsc fc3 sc0 ls95 ws53a">specified complexity. Usua<span class="_ _e"></span>lly these can help you choose the approach bes<span class="_ _e"></span>t suited to</div><div class="t m0 xb7 h30 y87f fff fsc fc3 sc0 lsb7 ws53b">what you are tryin<span class="_ _0"></span>g to accomplish from a numb<span class="_ _0"></span>er of choices. The complexit<span class="_ _0"></span>y of many</div><div class="t m0 xb7 h30 y880 fff fsc fc3 sc0 ls165 ws53c">algorithms can be found by sea<span class="_ _e"></span>rching online, such as for “complexity of quicksort”.</div><div class="t m0 xb7 h30 y881 fff fsc fc3 sc0 lsb6 ws53d">You can also find<span class="_ _e"></span> the time complexity of some common op<span class="_ _e"></span>erations in the Python docs</div><div class="t m0 xb7 h30 y882 fff fsc fc3 sc0 ls6 ws0">(<span class="fcc lsb8">https://wiki.python.org/moin/TimeCo<span class="_ _e"></span>mplexity</span><span class="ls168">). </span></div></div><div class="t m0 x44 h30 y883 ffb fsc fce sc0 ls6 ws0">C<span class="fs20">ONSTANT</span></div><div class="t m3 x0 h8e y883 ff8 fs20 fce sc0 ls6 ws0"> </div><div class="t m0 xef h5a y883 ffb fs20 fce sc0 ls6 ws0">TIME</div><div class="t m0 x44 h15 y884 ff4 fsb fcd sc0 ls6 ws0">The ideal complexity is constant time <span class="_ _0"></span>(<span class="ff3">O</span>(1)), which doesn’t depend on the <span class="_ _0"></span>size of the</div><div class="t m3 x0 h22 y884 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x44 h15 y885 ff4 fsb fcd sc0 ls6 ws0">inputs. Nothi<span class="_ _e"></span>ng can be be<span class="_ _e"></span>tter than constant <span class="_ _e"></span>time because <span class="_ _e"></span>that would req<span class="_ _e"></span>uire the soft-</div><div class="t m3 x0 h22 y885 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x44 h15 y886 ff4 fsb fcd sc0 ls6 ws0">ware to</div><div class="t m3 x0 h22 y886 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x4 h1b y886 ff3 fsb fcd sc0 ls6 ws0">speed up</div><div class="t m3 x0 h22 y886 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x18 h15 y886 ff4 fsb fcd sc0 ls6 ws0">as its <span class="_ _0"></span>input grow! Constant <span class="_ _0"></span>time is</div><div class="t m3 x0 h22 y886 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x54 h15 y886 ff4 fsb fcd sc0 ls6 ws0">realized in some <span class="_ _0"></span>of the <span class="_ _0"></span>data types in</div><div class="t m3 x0 h22 y886 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x44 h15 y887 ff4 fsb fcd sc0 ls6 ws0">Python, which I’ll ta<span class="_ _e"></span>lk more about later.</div><div class="t m3 x0 h22 y888 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m3 x0 h22 y888 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x86 h15 y888 ff4 fsb fcd sc0 ls6 ws0">Some </div><div class="t m3 x0 h22 y888 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 xd8 h15 y888 ff4 fsb fcd sc0 ls6 ws0">problems <span class="_ _f"></span>that </div><div class="t m3 x0 h22 y888 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x3b h15 y888 ff4 fsb fcd sc0 ls6 ws0">would </div><div class="t m3 x0 h22 y888 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x56 h15 y888 ff4 fsb fcd sc0 ls6 ws0">normally <span class="_ _f"></span>be</div><div class="t m3 x0 h22 y888 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x40 h15 y888 ff4 fsb fcd sc0 ls6 ws0">linear <span class="_ _f"></span>(or </div><div class="t m3 x0 h22 y888 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x6e h15 y888 ff4 fsb fcd sc0 ls6 ws0">worse) <span class="_ _f"></span>can </div><div class="t m3 x0 h22 y888 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x81 h15 y888 ff4 fsb fcd sc0 ls6 ws0">be <span class="_ _f"></span>made <span class="_ _1a"></span>constant</div><div class="t m3 x0 h22 y888 ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x44 h15 y889 ff4 fsb fcd sc0 ls6 ws0">after up-front <span class="_ _e"></span>computation. That init<span class="_ _e"></span>ial computation may itself<span class="_ _e"></span> be nonconstant, but i<span class="_ _e"></span>f</div><div class="t m0 x44 h15 y88a ff4 fsb fcd sc0 ls6 ws0">it allows many su<span class="_ _e"></span>bsequent steps to</div><div class="t m3 x0 h22 y88a ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 xca h1b y88a ff3 fsb fcd sc0 ls6 ws0">become</div><div class="t m3 x0 h22 y88a ff8 fsb fcd sc0 ls6 ws0"> </div><div class="t m0 x4e h15 y88a ff4 fsb fcd sc0 ls6 ws0">constant, it can <span class="_ _e"></span>be a great trade-off.</div><a class="l" href="https://wiki.python.org/moin/TimeComplexity"><div class="d m2" style="border-style:none;position:absolute;left:107.940000px;bottom:187.838000px;width:190.620000px;height:10.500000px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
