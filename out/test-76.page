<div id="pf4c" class="pf w0 h0" data-page-no="4c"><div class="pc pc4c w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bgf0.png"/><div class="t m0 x42 h14 y80 ff7 fs7 fcb sc0 ls6 ws0">52</div><div class="t m0 x8e h2b y1cf ffb fs18 fcb sc0 ls6 ws0">C</div><div class="t m0 xf2 h2c y1d0 ffb fs19 fcb sc0 ls12b ws0">HAPTER</div><div class="t m0 xc9 h2b y1cf ffb fs18 fcb sc0 ls8c ws0"> 3</div><div class="t m0 x47 h2d y80 ffa fs7 fcb sc0 ls6 ws0">Abstraction and encapsulation</div><div class="t m0 x32 h15 y40 ff4 fsb fc3 sc0 ls71 wsee"> Functional languages require you to <span class="_ _e"></span><span class="ls42 ws4ca">think about programs as compositions of</span></div><div class="t m0 x44 h15 y41 ff4 fsb fc3 sc0 ls1c ws0">functions. </div><div class="t m5 x36 h24 y532 ffd fsc fc3 sc0 ls6 ws0">for</div><div class="t m0 x8c h15 y41 ff4 fsb fc3 sc0 ls1c ws165"> loops are replaced b<span class="_ _e"></span>y functions that<span class="ls3d ws27e"> operate on lists, for example. In</span></div><div class="t m0 x44 h15 y533 ff4 fsb fc3 sc0 ls30 wsbd">Python, you might write the following:</div><div class="t m0 x44 h3b y729 ffd fs18 fc3 sc0 lsb2 ws0">numbers<span class="_"> </span>=<span class="_"> </span>[1,<span class="_"> </span>2,<span class="_"> </span>3,<span class="_"> </span>4,<span class="_"> </span>5]</div><div class="t m0 x44 h3b y72a ffd fs18 fc3 sc0 lsb2 ws0">for<span class="_"> </span>i<span class="_"> </span>in<span class="_"> </span>numbers:</div><div class="t m0 xae h3b y72b ffd fs18 fc1 sc0 lsb2 ws0">print(i<span class="_"> </span>*<span class="_"> </span>i)</div><div class="t m0 x44 h15 ye3 ff4 fsb fc3 sc0 ls34 ws25">In a functional language, yo<span class="ls14a ws4cb">u mig<span class="_ _e"></span>ht write it like<span class="_ _e"></span> this:</span></div><div class="t m0 x44 h3b y72c ffd fs18 fc3 sc0 lsb2 ws0">print(map((i)<span class="_"> </span>=<span class="lsfb">&gt;i*i<span class="_ _3a"></span>,[<span class="_ _7"></span>1<span class="_ _3a"></span>,2<span class="_ _7"></span>,3<span class="_ _7"></span>,4<span class="_ _3a"></span>,<span class="lsb2">5]))</span></span></div><div class="t m0 x44 h15 y344 ff4 fsb fc3 sc0 ls38 ws4cc">In functional programming, functions some<span class="ls42 ws4cd">times accept other functions as argu-</span></div><div class="t m0 x44 h15 y345 ff4 fsb fc3 sc0 ls51 ws1bb">ments or return them as results. This<span class="ws76"> is seen in the previous snippet; </span></div><div class="t m5 x6 h24 y72d ffd fsc fc3 sc0 lsa0 ws0">map</div><div class="t m0 x105 h15 y345 ff4 fsb fc3 sc0 ls51 ws1bb"> accepts an</div><div class="t m0 x44 h15 y5c0 ff4 fsb fc3 sc0 ls3a ws28">anonymous function that takes one ar<span class="ls36 ws35">gument and multiplie<span class="ls42 ws32">s it by itself.</span></span></div><div class="t m0 x32 h15 y5c1 ff4 fsb fc3 sc0 ls38 ws1a3"> Python has a number of fu<span class="ls1c ws23a">nctional programming tools; <span class="ls42">many of these are available</span></span></div><div class="t m0 x44 h15 y5c2 ff4 fsb fc3 sc0 ls1e ws4ce">using built-in keywords, and others are <span class="_ _0"></span>import<span class="ls71 ws483">ed from built-in modules like functools</span></div><div class="t m0 x44 h15 y72e ff4 fsb fc3 sc0 ls5e ws4cf">and itertools. Though Python <span class="ff3 ls71 ws0">supports</span><span class="ls38 ws472"> functional programming, it isn’t often a <span class="_ _e"></span>pre-</span></div><div class="t m0 x44 h15 y72f ff4 fsb fc3 sc0 ls25 ws4d0">ferred approach. Some common features <span class="ls71 ws3c7">of functional languages, like the </span></div><div class="t m5 xfc h24 y730 ffd fsc fc3 sc0 lsa0 ws0">reduce</div><div class="t m0 x44 h15 y731 ff4 fsb fc3 sc0 lsc5 ws3ab">function, have bee<span class="_ _0"></span>n moved to functools.</div><div class="t m0 x32 h15 y732 ff4 fsb fc3 sc0 ls6 ws4d1"> Many feel that<span class="_ _e"></span> the imperative Python wa<span class="ls2f ws15f">y of performing some of these operations</span></div><div class="t m0 x44 h15 yef ff4 fsb fc3 sc0 ls51 ws43">is more clear. Using functi<span class="_ _0"></span>onal Pyth<span class="ls7d ws12a">on features would loo<span class="_ _e"></span>k like this:</span></div><div class="t m0 x44 h3b y733 ffd fs18 fc3 sc0 lsb2 ws0">from<span class="_"> </span>functools<span class="_"> </span>import<span class="_"> </span>reduce</div><div class="t m0 x44 h3b y71f ffd fs18 fc3 sc0 lsb2 ws0">squares<span class="_"> </span>=<span class="_"> </span>map(lambda<span class="_"> </span>x<span class="lsfb">:x*x<span class="_ _3a"></span>,[<span class="_ _7"></span>1<span class="_ _3a"></span>,2<span class="_ _7"></span>,3<span class="_ _3a"></span>,4<span class="_ _7"></span>,5<span class="_ _7"></span>]<span class="_ _3a"></span>)</span></div><div class="t m0 x44 h3b y734 ffd fs18 fc3 sc0 lsb2 ws0">should<span class="_"> </span>=<span class="_"> </span>reduce(lambda<span class="_"> </span>x,<span class="_"> </span>y:<span class="_"> </span>x<span class="_"> </span>and<span class="_"> </span>y,<span class="_"> </span>[True,<span class="_"> </span>True,<span class="_"> </span>False])</div><div class="t m0 x44 h3b y735 ffd fs18 fc1 sc0 lsb2 ws0">evens<span class="_"> </span>=<span class="_"> </span>filter(lambda<span class="_"> </span>x<span class="lsfb">:x%2=<span class="_ _3a"></span>=0<span class="_ _7"></span>,[<span class="_ _3a"></span>1<span class="_ _7"></span>,2<span class="_ _3a"></span>,3<span class="_ _7"></span>,4<span class="_ _7"></span>,5<span class="_ _3a"></span>]<span class="_ _7"></span>)</span></div><div class="t m0 x44 h15 y19b ff4 fsb fc3 sc0 ls1c ws10">The preference in Python would be the <span class="_ _e"></span>following:</div><div class="t m0 x44 h3b y736 ffd fs18 fc3 sc0 lsb2 ws0">squares<span class="_"> </span>=<span class="_"> </span>[x<span class="_"> </span>*<span class="_"> </span>x<span class="_"> </span>for<span class="_"> </span>x<span class="_"> </span>in<span class="_"> </span>[1,<span class="_"> </span>2,<span class="_"> </span>3,<span class="_"> </span>4,<span class="_"> </span>5]]</div><div class="t m0 x44 h3b y737 ffd fs18 fc3 sc0 lsb2 ws0">should<span class="_"> </span>=<span class="_"> </span>all([True,<span class="_"> </span>True,<span class="_"> </span>False])</div><div class="t m0 x44 h3b y738 ffd fs18 fc1 sc0 lsb2 ws0">evens<span class="_"> </span>=<span class="_"> </span>[x<span class="_"> </span>for<span class="_"> </span>x<span class="_"> </span>in<span class="_"> </span>[1,<span class="_"> </span>2,<span class="_"> </span>3,<span class="_"> </span>4,<span class="_"> </span>5]<span class="_"> </span>i<span class="lsfb">fx%2=<span class="_ _3a"></span>=0<span class="_ _7"></span>]</span></div><div class="t m0 x44 h15 y19d ff4 fsb fc3 sc0 ls2d ws4d2">Try each approach and <span class="_ _0"></span>print the variables <span class="ls2f ws4d3">afterward. You’ll see that they produce</span></div><div class="t m0 x44 h15 y60 ff4 fsb fc3 sc0 ls63 wse9">identical re<span class="_ _e"></span>sults; it’s up to you to us<span class="ls30 ws36">e the style you f<span class="_ _e"></span>ind most understandable.</span></div><div class="t m0 x32 h15 y61 ff4 fsb fc3 sc0 ls3d ws357"> One functional feature of Pyt<span class="_ _e"></span>hon I enjoy is </div><div class="t m5 x54 h24 y739 ffd fsc fc3 sc0 lsa0 ws0">functools.pa<span class="_ _e"></span>rtial</div><div class="t m0 x62 h15 y61 ff4 fsb fc3 sc0 ls30 ws220">. This function</div><div class="t m0 x44 h15 y2ad ff4 fsb fc3 sc0 ls30 wse3">allows you to create a new function from an<span class="ls42 ws1e5"> existing function w<span class="_ _e"></span>ith some of the origi-</span></div><div class="t m0 x44 h15 y24c ff4 fsb fc3 sc0 ls2f ws135">nal function’s arguments set.<span class="ls51 ws229"> This is sometimes clearer than writing a new function</span></div><div class="t m0 x44 h15 y19e ff4 fsb fc3 sc0 ls1c ws4d4">that calls the original function, especia<span class="ls36 ws4d5">lly in cases where a general-use function</span></div><div class="t m0 x44 h15 y65 ff4 fsb fc3 sc0 ls44 wsda">behaves like a more spec<span class="ls6f ws369">ifically na<span class="_ _e"></span>med function. In the <span class="ls38 ws3c6">case of raising numbers to a</span></span></div><div class="t m0 x44 h15 y66 ff4 fsb fc3 sc0 ls52 ws0">power, </div><div class="t m5 x4 h24 y73a ffd fsc fc3 sc0 ls6 ws0">x</div><div class="t m0 x97 h15 y43b ff4 fsb fc3 sc0 ls14b ws1f5"> to th<span class="_ _0"></span>e pow<span class="_ _0"></span>er of<span class="_ _0"></span> 2 is c<span class="_ _0"></span>ommo<span class="_ _0"></span>nly c<span class="_ _0"></span>alle<span class="_ _0"></span>d the<span class="_ _0"></span> <span class="ff3 ls63 ws0">square</span><span class="lsbc ws484"> of </span></div><div class="t m5 x9c h24 y73a ffd fsc fc3 sc0 ls6 ws0">x</div><div class="t m0 xa6 h15 y43b ff4 fsb fc3 sc0 ls5e ws3c9">, and </div><div class="t m5 x5c h24 y73a ffd fsc fc3 sc0 ls6 ws0">x</div><div class="t m0 x81 h15 y43b ff4 fsb fc3 sc0 ls47 ws4aa"> to the power of 3</div><div class="t m0 x44 h15 y43c ff4 fsb fc3 sc0 ls36 ws25d">is commonly called the <span class="ff3 ls3a ws0">cube</span><span class="lsbc ws4d6"> of </span></div><div class="t m5 x47 h24 y73b ffd fsc fc3 sc0 ls6 ws0">x</div><div class="t m0 x59 h15 y73c ff4 fsb fc3 sc0 ls1f ws4d7">. You can see how thi<span class="_ _0"></span>s works in Python with the </div><div class="t m5 x9 h24 y73b ffd fsc fc3 sc0 lsa0 ws0">par-</div><div class="t m5 x44 h24 y73d ffd fsc fc3 sc0 lsa0 ws0">tial</div><div class="t m0 xae h15 yd9 ff4 fsb fc3 sc0 ls3a ws28"> helper:</div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
