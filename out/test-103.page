<div id="pf67" class="pf w0 h0" data-page-no="67"><div class="pc pc67 w0 h0"><img class="bi x0 y0 w1 h1" alt="" src="bg67.png"/><div class="t m0 xbf h14 y80 ff7 fs7 fcb sc0 ls6 ws0">79<span class="_ _22"></span><span class="ffa">Functional testing approaches</span></div><div class="t m0 x35 h15 ya84 ff4 fsb fc3 sc0 ls34 ws3c3">The preparation of inputs an<span class="ls5e ws3db">d identification of expected<span class="ls20 wsb0"> outputs are where most<span class="_ _e"></span> of</span></span></div><div class="t m0 x35 h15 ya85 ff4 fsb fc3 sc0 ls80 ws427">your work as a developer will be whe<span class="_ _e"></span>n cr<span class="ls31 ws7e">eating tests, <span class="_ _0"></span>whereas <span class="ls42 ws206">obtaining and compar-</span></span></div><div class="t m0 x35 h15 ya86 ff4 fsb fc3 sc0 ls30 ws36">ing the actual output is a matt<span class="_ _e"></span>er of exec<span class="ls1f ws14">uting your code, as shown in figure 5.1.</span></div><div class="t m0 x83 h15 ya87 ff4 fsb fc3 sc0 ls38 ws1a3"> Structuring your tests this way has another <span class="ls34 ws3a8">beneficial effect:<span class="_ _e"></span> you can read your tests</span></div><div class="t m0 x35 h15 ya88 ff4 fsb fc3 sc0 ls38 ws1a9">as a specification of how the code works. Th<span class="ws5db">is pays off when you <span class="ls4b ws3a">revisit code<span class="ls34 ws185"> you <span class="_ _e"></span>wrote</span></span></span></div><div class="t m0 x35 h15 ya89 ff4 fsb fc3 sc0 ls71 ws2bd">long ago (or last week, for me). A good test <span class="_ _e"></span>for a </div><div class="t m5 x113 h24 ya89 ffd fsc fc3 sc0 lsa0 ws0">calculate_m<span class="_ _e"></span>ean</div><div class="t m0 x77 h15 ya89 ff4 fsb fc3 sc0 ls3d ws1ac"> function might read</div><div class="t m0 x35 h15 ya8a ff4 fsb fc3 sc0 ls6d ws3e7">like this:</div><div class="t m0 x83 h16 ya8b ff3 fsc fc3 sc0 lse ws5dc">Given the list of integers </div><div class="t m5 xa8 h24 ya8b ffd fsc fc3 sc0 lsa0 ws5dd">[1, 2, 3, 4]</div><div class="t m0 x64 h16 ya8b ff3 fsc fc3 sc0 ls156 ws5de">, the expected output of </div><div class="t m5 xa6 h24 ya8b ffd fsc fc3 sc0 lsa0 ws0">calculate_me<span class="_ _e"></span>an</div><div class="t m0 xab h16 ya8b ff3 fsc fc3 sc0 ls94 ws5df"> is</div><div class="t m5 x83 h24 ya8c ffd fsc fc3 sc0 lsa0 ws0">2.5</div><div class="t m0 x48 h16 ya8c ff3 fsc fc3 sc0 lsb6 ws5e0">. Verify that the actua<span class="_ _e"></span>l output of </div><div class="t m5 x10b h24 ya8c ffd fsc fc3 sc0 lsa0 ws0">calculate_mea<span class="_ _e"></span>n</div><div class="t m0 x10f h16 ya8c ff3 fsc fc3 sc0 lscf ws5e1"> matches this ex<span class="_ _0"></span>pectation.</div><div class="t m0 x35 h15 ya8d ff4 fsb fc3 sc0 ls71 ws5e2">This format scales to larger functional <span class="ls42 ws5e3">workflows. In an <span class="_ _e"></span>e-commerce system, the</span></div><div class="t m0 x35 h15 ya8e ff4 fsb fc3 sc0 ls2e ws5e4">“input” might be clicking a product and then clicking Add to Car<span class="_ _0"></span>t. The expected “out-</div><div class="t m0 x35 h15 ya8f ff4 fsb fc3 sc0 lsab ws2d6">put” is the item<span class="_ _0"></span> being added to th<span class="_ _0"></span>e cart. A functi<span class="_ _0"></span>onal test for that<span class="_ _0"></span> workflow would re<span class="_ _0"></span>ad</div><div class="t m0 x35 h15 ya90 ff4 fsb fc3 sc0 ls6d ws3e7">like this:</div><div class="t m0 x83 h16 ya91 ff3 fsc fc3 sc0 ls184 ws1de">Given I visit the page for product </div><div class="t m5 x11 h24 ya91 ffd fsc fc3 sc0 lsa0 ws0">53-DE-232</div><div class="t m0 x7b h16 ya91 ff3 fsc fc3 sc0 lsb ws5e5"> and click Add to Cart, I expect to see </div><div class="t m5 x83 h24 y439 ffd fsc fc3 sc0 lsa0 ws0">53-DE-232</div><div class="t m0 x38 h16 y439 ff3 fsc fc3 sc0 ls97 ws5e6"> in my cart.</div><div class="t m0 x35 h15 ya92 ff4 fsb fc3 sc0 lsf3 ws0">U<span class="_ _e"></span>lt<span class="_ _e"></span>im<span class="_ _e"></span>a<span class="_ _e"></span>te<span class="_ _e"></span>ly<span class="_ _e"></span>, i<span class="_ _e"></span>t<span class="_ _e"></span>’s<span class="_ _e"></span> ni<span class="_ _e"></span>c<span class="_ _e"></span>e w<span class="_ _e"></span>he<span class="_ _e"></span>n<span class="_ _e"></span> yo<span class="_ _e"></span>ur<span class="_ _e"></span> t<span class="_ _e"></span>es<span class="_ _e"></span>ts<span class="_ _e"></span> n<span class="_ _e"></span>ot<span class="_ _e"></span> on<span class="_ _e"></span>l<span class="_ _e"></span>y v<span class="_ _e"></span>er<span class="_ _e"></span>if<span class="_ _e"></span>y<span class="_ _e"></span> th<span class="_ _e"></span>a<span class="_ _e"></span>t y<span class="_ _e"></span>ou<span class="_ _e"></span>r c<span class="_ _e"></span>o<span class="_ _e"></span>de<span class="_ _e"></span> w<span class="_ _e"></span>or<span class="_ _e"></span>ks<span class="_ _e"></span>, b<span class="_ _e"></span>u<span class="_ _e"></span>t a<span class="_ _e"></span>ls<span class="_ _e"></span>o<span class="_ _e"></span> ac<span class="_ _e"></span>t a<span class="_ _e"></span>s</div><div class="t m0 x35 h15 ya93 ff4 fsb fc3 sc0 ls1e ws473">documentation on how to use it. In the next<span class="ls2f ws111"> section, <span class="_ _0"></span>you’ll see how this recipe for</span></div><div class="t m0 x35 h15 ya94 ff4 fsb fc3 sc0 ls51 ws43">writing a functional <span class="_ _0"></span>test applies to<span class="ls3a ws1e0"> some different testing approaches. </span></div><div class="t m0 x19 h1f ya95 ffc fs13 fc2 sc0 lsf9 ws510">5.2<span class="_ _21"> </span>F<span class="_ _e"></span>u<span class="_ _e"></span>n<span class="_ _e"></span>c<span class="_ _e"></span>t<span class="_ _e"></span>io<span class="_ _e"></span>n<span class="_ _e"></span>a<span class="_ _e"></span>l<span class="_ _e"></span> t<span class="_ _e"></span>e<span class="lsa1 ws5e7">sting approaches</span></div><div class="t m0 x35 h15 ya96 ff4 fsb fc3 sc0 ls31 ws300">Functional testing takes on many forms in pr<span class="ls3b ws70">actice. From the constant little che<span class="_ _e"></span>cks <span class="_ _0"></span>we</span></div><div class="t m0 x35 h15 ya97 ff4 fsb fc3 sc0 ls5e ws140">do as developers to fully autom<span class="_ _e"></span>ated tests <span class="ls30 ws156">that get kicked off before every production</span></div><div class="t m0 x35 h15 ya98 ff4 fsb fc3 sc0 ls7d ws5e8">deployment, there <span class="_ _e"></span>is a spectrum of practices and c<span class="_ _e"></span>apabilities. You’ll recognize some o<span class="_ _e"></span>f</div><div class="t m0 x35 h15 ya99 ff4 fsb fc3 sc0 ls20 ws202">the following types of testing, but I recomm<span class="_ _e"></span>end reading about each of them to under-</div><div class="t m0 x35 h15 ya9a ff4 fsb fc3 sc0 ls48 ws2be">stand the similarities and differences between them.</div><div class="c x35 ya9b w42 ha5"><div class="t m0 x124 h36 ya9c ff11 fs1c fc12 sc0 ls6 ws0">Prepare inputs</div><div class="t m0 xbb h36 ya9d ff11 fs1c fc12 sc0 ls6 ws0">Identify expected output</div><div class="t m0 xf3 h36 ya9e ff11 fs1c fc12 sc0 ls6 ws0">Obtain actual output</div><div class="t m0 xf3 h36 ya9f ff11 fs1c fc12 sc0 ls6 ws0">Compare actual and</div><div class="t m0 x100 h36 yaa0 ff11 fs1c fc12 sc0 ls6 ws0">expected output</div><div class="t m0 x8a h37 yaa1 ff12 fs1d fc12 sc0 ls6 ws0">Determined by you,</div><div class="t m0 x8a h37 yaa2 ff12 fs1d fc12 sc0 ls6 ws0">the software author</div><div class="t m0 x8a h37 yaa3 ff12 fs1d fc12 sc0 ls6 ws0">Determined by executing</div><div class="t m0 x8a h37 yaa4 ff12 fs1d fc12 sc0 ls6 ws0">the real code</div><div class="t m0 x8a h37 yaa5 ff12 fs1d fc12 sc0 ls6 ws0">If they<span class="_ _e"></span>’re the same, the test passes.</div><div class="t m0 x8a h37 yaa6 ff12 fs1d fc12 sc0 ls6 ws0">If they<span class="_ _e"></span>’re different, the test fails.</div></div><div class="c x35 yaa7 w2 ha6"><div class="t m0 xa9 h2b yaa8 ffb fs18 fcb sc0 lsb2 ws255">Figure 5.1<span class="_ _29"> </span>The basic </div><div class="t m0 xa9 h2b yaa9 ffb fs18 fcb sc0 ls6a ws5e9">flow of a functional test</div></div></div><div class="pi" data-data='{"ctm":[1.000000,0.000000,0.000000,1.000000,0.000000,0.000000]}'></div></div>
